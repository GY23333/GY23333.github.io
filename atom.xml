<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GuoYi的博客</title>
  
  
  <link href="https://gy23333.github.io/atom.xml" rel="self"/>
  
  <link href="https://gy23333.github.io/"/>
  <updated>2025-04-17T16:48:35.013Z</updated>
  <id>https://gy23333.github.io/</id>
  
  <author>
    <name>GuoYi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NUMA 非一致性内存访问</title>
    <link href="https://gy23333.github.io/2025/04/17/NUMA-%E9%9D%9E%E4%B8%80%E8%87%B4%E6%80%A7%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE/"/>
    <id>https://gy23333.github.io/2025/04/17/NUMA-%E9%9D%9E%E4%B8%80%E8%87%B4%E6%80%A7%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE/</id>
    <published>2025-04-17T15:46:48.000Z</published>
    <updated>2025-04-17T16:48:35.013Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>NUMA（Non-Uniform Memory Access，非一致性内存访问）是一种多 CPU 计算机架构。非一致性，表示 CPU 访问不同内存的是时间上的不一致，访问本地内存快于非本地内存。</p><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>早期多 CPU 访问内存采用 SMP （Symmetric Multi-Processor）架构，即：<strong>所有 CPU 通过同一条总线共享访问相同的内存</strong>，所有 CPU 访问内存的速度都是相同的。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20250418000257117.png" alt="image-20250418000257117" style="zoom:50%;" /></p><p>但随着 CPU 数量的增加，使用相同总线和资源必然导致访问冲突，从而造成 CPU 利用率降低。</p><h1 id="NUMA"><a href="#NUMA" class="headerlink" title="NUMA"></a>NUMA</h1><p>NUMA（Non-Uniform Memory Access，非一致性内存访问）将 CPU 划分到多个 NUMA Node，每个 Node 都有独立的 Bus 和 Memory。Node 之间通过 QPI 总线（高速互联总线）互通。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20250418002625551.png" alt="image-20250418002625551" style="zoom:50%;" /></p><p>CPU 访问不同的 Memory 速度不同，访问本地 Memory 的速度快于非本地 Memory。</p><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>Socket 是 CPU 的物理插槽，一个 Socket 可以插入多个 CPU，通常一个 Socket 就是一个 NUMA Node。</p><h1 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h1><ul><li><p>查看 CPU 相关信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># lscpu</span></span><br><span class="line">Architecture:             aarch64</span><br><span class="line">  CPU op<span class="literal">-mode</span>(s):         <span class="number">64</span><span class="literal">-bit</span></span><br><span class="line">  Byte Order:             Little Endian</span><br><span class="line">CPU(s):                   <span class="number">3</span></span><br><span class="line">  On<span class="literal">-line</span> CPU(s) list:    <span class="number">0</span><span class="literal">-2</span></span><br><span class="line">Vendor ID:                Apple</span><br><span class="line">  BIOS Vendor ID:         Apple</span><br><span class="line">  Model name:             -</span><br><span class="line">    BIOS Model name:      Apple silicon  CPU <span class="selector-tag">@</span> <span class="number">0.0</span>GHz</span><br><span class="line">    BIOS CPU family:      <span class="number">280</span></span><br><span class="line">    Model:                <span class="number">0</span></span><br><span class="line">    Thread(s) per core:   <span class="number">1</span></span><br><span class="line">    Core(s) per socket:   <span class="number">3</span>  <span class="comment"># 每个 socket 里有 3 个 CPU</span></span><br><span class="line">    Socket(s):            <span class="number">1</span>  <span class="comment"># 一共 1 个 socket</span></span><br><span class="line">    Stepping:             <span class="number">0</span>x0</span><br><span class="line">    BogoMIPS:             <span class="number">48.00</span></span><br><span class="line">    Flags:                fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm jscvt fcma lrcpc dcpop s</span><br><span class="line">                          ha3 asimddp sha512 asimdfhm dit uscat ilrcpc flagm sb paca pacg dcpodp sve2 flagm2 frint svei8mm svebf1</span><br><span class="line">                          <span class="number">6</span> smei16i64 smef64f64 smei8i32 smef16f32 smeb16f32 smef32f32 sme2 smei16i32 smebi32i32</span><br><span class="line">Caches (sum of all):</span><br><span class="line">  L1d:                    <span class="number">384</span> KiB (<span class="number">3</span> instances)</span><br><span class="line">  L1i:                    <span class="number">576</span> KiB (<span class="number">3</span> instances)</span><br><span class="line">  L2:                     <span class="number">48</span> MiB (<span class="number">3</span> instances)</span><br><span class="line">NUMA:</span><br><span class="line">  NUMA node(s):           <span class="number">1</span>    <span class="comment"># 一共 1 个 NUMA node</span></span><br><span class="line">  NUMA node0 CPU(s):      <span class="number">0</span><span class="literal">-2</span>  <span class="comment"># 0～2 号 CPU 在 NUMA node0 中</span></span><br><span class="line">Vulnerabilities:</span><br><span class="line">  Gather <span class="keyword">data</span> sampling:   Not affected</span><br><span class="line">  Itlb multihit:          Not affected</span><br><span class="line">  L1tf:                   Not affected</span><br><span class="line">  Mds:                    Not affected</span><br><span class="line">  Meltdown:               Not affected</span><br><span class="line">  Mmio stale <span class="keyword">data</span>:        Not affected</span><br><span class="line">  Reg file <span class="keyword">data</span> sampling: Not affected</span><br><span class="line">  Retbleed:               Not affected</span><br><span class="line">  Spec rstack overflow:   Not affected</span><br><span class="line">  Spec store bypass:      Vulnerable</span><br><span class="line">  Spectre v1:             Mitigation; __user pointer sanitization</span><br><span class="line">  Spectre v2:             Not affected</span><br><span class="line">  Srbds:                  Not affected</span><br><span class="line">  Tsx async abort:        Not affected</span><br></pre></td></tr></table></figure></li><li><p>查看 NUMA 信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># numactl --hardware</span></span><br><span class="line">available: <span class="number">1</span> nodes (<span class="number">0</span>)</span><br><span class="line">node <span class="number">0</span> cpus: <span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">node <span class="number">0</span> size: <span class="number">3902</span> MB</span><br><span class="line">node <span class="number">0</span> free: <span class="number">72</span> MB</span><br><span class="line">node distances:</span><br><span class="line">node   <span class="number">0</span></span><br><span class="line">  <span class="number">0</span>:  <span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p>查看 CPU 以及其对应的 NODE、SOCKET、CORE</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># lscpu -p=CPU,NODE,SOCKET,CORE</span></span><br><span class="line"><span class="comment"># The following is the parsable format, which can be fed to other</span></span><br><span class="line"><span class="comment"># programs. Each different item in every column has an unique ID</span></span><br><span class="line"><span class="comment"># starting usually from zero.</span></span><br><span class="line"><span class="comment"># CPU,Node,Socket,Core</span></span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>  <span class="comment"># 逻辑CPU0 -&gt; NUMA node0 -&gt; Socket0 -&gt; 物理核心0</span></span><br><span class="line"><span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;NUMA（Non-Uniform Memory Access，非一致性内存访问）是一种多 CPU 计算机架构。非一致性，表示 CPU 访问不同内存的是时间上的不一致，访问本地内存快于非本地内存。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>DPDK 内存管理</title>
    <link href="https://gy23333.github.io/2025/04/17/DPDK-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://gy23333.github.io/2025/04/17/DPDK-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2025-04-17T15:32:38.000Z</published>
    <updated>2025-04-18T05:39:42.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="rte-mempool"><a href="#rte-mempool" class="headerlink" title="rte_mempool"></a>rte_mempool</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DPDK example: 命令行参数解析</title>
    <link href="https://gy23333.github.io/2025/04/14/DPDK-example-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
    <id>https://gy23333.github.io/2025/04/14/DPDK-example-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/</id>
    <published>2025-04-13T18:05:33.000Z</published>
    <updated>2025-04-18T05:25:38.329Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>DPDK example: 命令行参数解析</p><a id="more"></a><h2 id="参数读取"><a href="#参数读取" class="headerlink" title="参数读取"></a>参数读取</h2><p>初始化 EAL，并获取剩余参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;rte_eal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;rte_common.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cfgs</span> &#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span> num;</span><br><span class="line"><span class="keyword">char</span> *<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">bool</span> mode;</span><br><span class="line">&#125; <span class="keyword">cfgs_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">CMD_OPT_NUM = <span class="number">1</span>,</span><br><span class="line">CMD_OPT_STRING,</span><br><span class="line">CMD_OPT_MODE,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">long_options</span>[] = &#123;</span></span><br><span class="line">&#123;<span class="string">"help"</span>, no_argument, <span class="literal">NULL</span>, <span class="string">'h'</span>&#125;,</span><br><span class="line">&#123;<span class="string">"num"</span>, required_argument, <span class="literal">NULL</span>, CMD_OPT_NUM&#125;,</span><br><span class="line">&#123;<span class="string">"string"</span>, required_argument, <span class="literal">NULL</span>, CMD_OPT_STRING&#125;,</span><br><span class="line">&#123;<span class="string">"mode"</span>, no_argument, <span class="literal">NULL</span>, CMD_OPT_MODE&#125;,</span><br><span class="line"></span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_usage</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *prgname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s [OPTIONS]\n"</span>, prgname);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--help                 Help\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--num &lt;uint32&gt;         Num\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--string &lt;string&gt;      String\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--mode                 Mode\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">str_to_uint32</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">uint32_t</span> *num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *endptr;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> val = strtoul(str, &amp;endptr, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errno != <span class="number">0</span> || *endptr != <span class="string">'\0'</span> || val &gt; UINT32_MAX) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">*num = (<span class="keyword">uint32_t</span>)val;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint32_t</span> <span class="title">parse_num</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *arg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str_to_uint32(arg, &amp;value))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">rte_exit(EXIT_FAILURE, <span class="string">"Failed to parse num\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">cfgs_t</span> <span class="title">parse_args</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line"><span class="keyword">cfgs_t</span> cfgs;</span><br><span class="line"><span class="keyword">char</span> *prgname = argv[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认值</span></span><br><span class="line">cfgs.num = <span class="number">0</span>;</span><br><span class="line">cfgs.<span class="built_in">string</span> = <span class="literal">NULL</span>;</span><br><span class="line">cfgs.mode = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> option_id;</span><br><span class="line"><span class="keyword">while</span> ((option_id = getopt_long_only(argc, argv, <span class="string">"h"</span>, long_options, <span class="literal">NULL</span>)) != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (option_id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">print_usage(prgname);</span><br><span class="line">rte_exit(EXIT_SUCCESS, <span class="string">"Exit APP\n"</span>);</span><br><span class="line"><span class="keyword">case</span> CMD_OPT_NUM:</span><br><span class="line">cfgs.num = parse_num(optarg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CMD_OPT_STRING:</span><br><span class="line">cfgs.<span class="built_in">string</span> = optarg;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CMD_OPT_MODE:</span><br><span class="line">cfgs.mode = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">print_usage(prgname);</span><br><span class="line">rte_exit(EXIT_FAILURE, <span class="string">"Invalid command line parameter\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cfgs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line"><span class="comment">// 初始化EAL</span></span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line">ret = rte_eal_init(argc, argv);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">rte_exit(EXIT_FAILURE, <span class="string">"Failed to init eal"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除掉被EAL使用了的参数</span></span><br><span class="line">argc -= ret;</span><br><span class="line">argv += ret;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析其他参数</span></span><br><span class="line"><span class="keyword">cfgs_t</span> cfgs = parse_args(argc, argv);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"num:     %d\n"</span>, cfgs.num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"string:  %s\n"</span>, cfgs.<span class="built_in">string</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mode:    %d\n"</span>, cfgs.mode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Finished initiation\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/home/guoyi/dpdk<span class="literal">-stable</span><span class="literal">-24</span>.<span class="number">11.1</span>/build<span class="comment"># ./examples/dpdk-playground -- --num 1 --string "abd" --mode</span></span><br><span class="line">EAL: Detected CPU lcores: <span class="number">3</span></span><br><span class="line">EAL: Detected NUMA nodes: <span class="number">1</span></span><br><span class="line">EAL: Detected <span class="keyword">static</span> linkage of DPDK</span><br><span class="line">EAL: Multi<span class="literal">-process</span> socket /var/run/dpdk/rte/mp_socket</span><br><span class="line">EAL: Selected IOVA mode <span class="string">'PA'</span></span><br><span class="line">num:     <span class="number">1</span></span><br><span class="line">string:  abd</span><br><span class="line">mode:    <span class="number">1</span></span><br><span class="line">Finished initiation</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;DPDK example: 命令行参数解析&lt;/p&gt;</summary>
    
    
    
    <category term="DPDK" scheme="https://gy23333.github.io/categories/DPDK/"/>
    
    
    <category term="DPDK" scheme="https://gy23333.github.io/tags/DPDK/"/>
    
  </entry>
  
  <entry>
    <title>Meson 构建系统</title>
    <link href="https://gy23333.github.io/2025/04/14/Meson-%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://gy23333.github.io/2025/04/14/Meson-%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2025-04-13T17:51:08.000Z</published>
    <updated>2025-04-13T17:54:11.355Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a id="more"></a><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://meson.pythonlang.cn" target="_blank" rel="noopener">Meson 官方文档</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C/C++" scheme="https://gy23333.github.io/categories/C-C/"/>
    
    
    <category term="C/C++" scheme="https://gy23333.github.io/tags/C-C/"/>
    
    <category term="Meson" scheme="https://gy23333.github.io/tags/Meson/"/>
    
  </entry>
  
  <entry>
    <title>C getopt 命令行参数解析</title>
    <link href="https://gy23333.github.io/2025/04/13/C-getopt-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
    <id>https://gy23333.github.io/2025/04/13/C-getopt-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/</id>
    <published>2025-04-13T06:37:34.000Z</published>
    <updated>2025-04-13T13:17:30.891Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>使用 <code>getopt_long_only()</code> 解析命令行参数。</p><a id="more"></a><h1 id="选项设置"><a href="#选项设置" class="headerlink" title="选项设置"></a>选项设置</h1><h2 id="shortopts-短选项"><a href="#shortopts-短选项" class="headerlink" title="shortopts 短选项"></a><code>shortopts</code> 短选项</h2><p>字符串，指定可接受的短选项。</p><ul><li>单个字符：不带参数的选项</li><li>单个字符 + <code>:</code>：带参数的选项</li><li>单个字符 + <code>::</code>：可带也可不带参数的选项</li></ul><p>如</p><ul><li><code>ab</code>： 支持两个单选项 <code>-a</code>、<code>-b</code>，且不带参数</li><li><code>a:b</code>：支持一个带参数的选项 <code>-a value</code> 和一个不带参数的选项 <code>-b</code></li><li><code>a::b</code>：支持一个可带可不带参数的选项 <code>-a</code>、 <code>-a value</code> 和一个不带参数的选项 <code>-b</code></li></ul><h2 id="longopts-长选项"><a href="#longopts-长选项" class="headerlink" title="longopts 长选项"></a><code>longopts</code> 长选项</h2><p>option 的数组，指定可接受的长选项。<strong>需以 <code>{0,0,0,0}</code> 结尾作为结束的标志</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">option</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">  <span class="comment">/* has_arg can't be an enum because some compilers complain about</span></span><br><span class="line"><span class="comment">     type mismatches in all the code that assumes it is an int.  */</span></span><br><span class="line">  <span class="keyword">int</span> has_arg;</span><br><span class="line">  <span class="keyword">int</span> *flag;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><code>name</code>：长选项名</p></li><li><p><code>has_arg</code>：是否需要参数</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> no_argument0<span class="comment">//不需要参数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> required_argument1<span class="comment">//必选参数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> optional_argument2<span class="comment">//可选参数</span></span></span><br></pre></td></tr></table></figure></li><li><p><code>flag</code>：设置结果存储方式</p><ul><li>非 NULL 时，解析到这个长选项时会把 <code>val</code> 值放入其指向的内存</li><li>如果不需要，则设置为 NULL</li></ul></li><li><p><code>val</code>：解析返回值（<code>flag</code> 为 NULL ），或者要设置的值（<code>flag</code> 不为 NULL ）</p><ul><li><code>flag</code> 为 NULL 时，为 <code>getopt_long_only()</code> 解析选项的返回值，用于区分不同的选项，一般给不同的选项设置不同的 <code>val</code> 作为 ID。也可以设置为对应短选项的字符，用来匹配长选项和短选项</li><li><code>flag</code> 不为 NULL 时，把 <code>val</code> 值放入其指向的内存</li></ul></li></ul><h1 id="getopt-long-only"><a href="#getopt-long-only" class="headerlink" title="getopt_long_only()"></a><code>getopt_long_only()</code></h1><p>解析一个 option，返回该 option 的 id，并将这个 option 的值存入 optarg 中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt_long_only</span><span class="params">(<span class="keyword">int</span> ___argc, <span class="keyword">char</span> *<span class="keyword">const</span> *___argv, <span class="keyword">const</span> <span class="keyword">char</span> *__shortopts, <span class="keyword">const</span> struct option *__longopts, <span class="keyword">int</span> *__longind)</span></span></span><br></pre></td></tr></table></figure><p>输入参数：</p><ul><li><code>argc</code>、<code>argv</code>：主函数参数</li><li><code>shortopts</code>：短选项字符串</li><li><code>longopts</code>：长选项结构体数组</li><li><code>longind</code>：返回长选项在 <code>longopts</code> 中的索引值。一般只用于调试，正常情况输入 <code>NULL</code> 即可。</li></ul><p>返回值：</p><p>返回解析的这个 option 的 id</p><ul><li>如果这个 option 是短选项，返回该短选项的字符</li><li>如果这个 option 是长选项<ul><li>如果 <code>flag</code> 为 NULL，则返回 <code>val</code> 值</li><li>如果 <code>flag</code> 不为 NULL，则返回 0，并将 <code>val</code> 值放入 <code>flag</code> 指针中</li></ul></li><li>解析完毕，返回 -1</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">    CMD_OPTION_A = <span class="number">1</span>,</span><br><span class="line">    CMD_OPTION_B,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">long_opts</span>[] = &#123;</span></span><br><span class="line">    &#123;<span class="string">"help"</span>, no_argument, <span class="literal">NULL</span>, <span class="string">'h'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"option_a"</span>, required_argument, <span class="literal">NULL</span>, CMD_OPTION_A&#125;, <span class="comment">// 需设置参数的 option</span></span><br><span class="line">    &#123;<span class="string">"option_b"</span>, no_argument, <span class="literal">NULL</span>, CMD_OPTION_B&#125;,       <span class="comment">// 不设置参数的 option</span></span><br><span class="line"></span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_usage</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *prgname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s [OPTIONS]\n"</span>, prgname);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--help                 Help\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--option_a VALUE       Option A\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--option_b             Option B\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parse_args</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> option_id;</span><br><span class="line">    <span class="keyword">char</span> *prgname = argv[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((option_id = getopt_long_only(argc, argv, <span class="string">"h"</span>, long_opts, <span class="literal">NULL</span>)) != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (option_id)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">            print_usage(prgname);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> CMD_OPTION_A:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"option A: %s\n"</span>, optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CMD_OPTION_B:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"set option_b on\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            print_usage(prgname);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    ret = parse_args(argc, argv);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to parse command line parameters\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 &lt;code&gt;getopt_long_only()&lt;/code&gt; 解析命令行参数。&lt;/p&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://gy23333.github.io/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux网卡绑定</title>
    <link href="https://gy23333.github.io/2025/03/26/Linux%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9A/"/>
    <id>https://gy23333.github.io/2025/03/26/Linux%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9A/</id>
    <published>2025-03-25T16:36:08.000Z</published>
    <updated>2025-03-26T17:12:13.372Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Linux NIC Bonding 技术可以将多张物理网卡或者虚拟网卡绑定为一张虚拟的逻辑网卡，从而实现网卡的冗余、带宽的扩容以及负载均衡。</p><a id="more"></a><h1 id="网卡绑定的作用"><a href="#网卡绑定的作用" class="headerlink" title="网卡绑定的作用"></a>网卡绑定的作用</h1><p>网卡绑定的作用主要有两个方面：</p><ul><li><strong>提供冗余（负载均衡）</strong>：网卡绑定最主要的作用，如下图，物理机的多张物理网卡可以上连多个交换机，将网卡绑定为一张虚拟网卡，使用该 bond 虚拟网卡，当其中一个交换机故障时，流量可以自动切换到另一个交换机与物理网卡，提供了网卡的容灾能力。</li><li><strong>提高吞吐量</strong>：由于是多张网卡进行负载均衡，bond 出来的网卡的吞吐量也得到了提升。</li></ul><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20250326005558522.png" alt="image-20250326005558522" style="zoom:50%;" /></p><h1 id="网卡绑定模式"><a href="#网卡绑定模式" class="headerlink" title="网卡绑定模式"></a>网卡绑定模式</h1><h2 id="Mode-0-—-balance-rr（轮询模式）"><a href="#Mode-0-—-balance-rr（轮询模式）" class="headerlink" title="Mode 0 — balance-rr（轮询模式）"></a>Mode 0 — balance-rr（轮询模式）</h2><p>数据包依次顺序轮询每张网卡传输，即第1个包走 eth0，下一个包就走 eth1….一直轮询下去。</p><h2 id="Mode-1-—-active-backup（主备模式）"><a href="#Mode-1-—-active-backup（主备模式）" class="headerlink" title="Mode 1 — active-backup（主备模式）"></a>Mode 1 — active-backup（主备模式）</h2><p>只有一张网卡作为主，承接流量，当主网卡宕机后，启用备网卡。</p><h2 id="Mode-2-—-balance-xor（异或模式）"><a href="#Mode-2-—-balance-xor（异或模式）" class="headerlink" title="Mode 2 — balance-xor（异或模式）"></a>Mode 2 — balance-xor（异或模式）</h2><p>基于源 MAC 和目的 MAC 的 Hash 选择网卡</p><h2 id="Mode-3-—-broadcast（广播模式）"><a href="#Mode-3-—-broadcast（广播模式）" class="headerlink" title="Mode 3 — broadcast（广播模式）"></a>Mode 3 — broadcast（广播模式）</h2><p>所有数据包在所有网卡上传输。</p><h2 id="Mode-4-—-link-aggregation（动态链接聚合）"><a href="#Mode-4-—-link-aggregation（动态链接聚合）" class="headerlink" title="Mode 4 — link aggregation（动态链接聚合）"></a>Mode 4 — link aggregation（动态链接聚合）</h2><h2 id="Mode-5-—-balance-tlb（传输负载均衡）"><a href="#Mode-5-—-balance-tlb（传输负载均衡）" class="headerlink" title="Mode 5 — balance-tlb（传输负载均衡）"></a>Mode 5 — balance-tlb（传输负载均衡）</h2><h2 id="Mode-6-—-balance-alb（适应性负载均衡）"><a href="#Mode-6-—-balance-alb（适应性负载均衡）" class="headerlink" title="Mode 6 — balance-alb（适应性负载均衡）"></a>Mode 6 — balance-alb（适应性负载均衡）</h2><h1 id="使用-nmcli-绑定网卡"><a href="#使用-nmcli-绑定网卡" class="headerlink" title="使用 nmcli 绑定网卡"></a>使用 <code>nmcli</code> 绑定网卡</h1><h2 id="绑定网卡"><a href="#绑定网卡" class="headerlink" title="绑定网卡"></a>绑定网卡</h2><ol><li><p>创建绑定网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection add <span class="built_in">type</span> bond ifname &lt;绑定网卡名&gt; mode &lt;模式&gt;</span><br></pre></td></tr></table></figure><p>例如，创建一张名为 <code>bond0</code> 的主备模式绑定网卡</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># nmcli connection add type bond ifname bond0 mode active-backup</span></span><br><span class="line">Connection <span class="string">'bond-bond0'</span> (fed29263<span class="literal">-5656</span><span class="literal">-449b</span><span class="literal">-95c8</span><span class="literal">-cf2e23432736</span>) successfully added.</span><br></pre></td></tr></table></figure><p>查看网络设备，即可看到新建的 <code>bond0</code> 网卡</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># nmcli device status</span></span><br><span class="line">DEVICE   TYPE      STATE                                  CONNECTION</span><br><span class="line">ens160   ethernet  connected                              netplan<span class="literal">-ens160</span></span><br><span class="line">ens256   ethernet  connected                              Wired connection <span class="number">1</span></span><br><span class="line">bond0    bond      connecting (getting IP configuration)  bond<span class="literal">-bond0</span></span><br><span class="line">lo       loopback  connected (externally)                 lo</span><br><span class="line">docker0  bridge    connected (externally)                 docker0</span><br></pre></td></tr></table></figure></li><li><p>添加从属网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection add <span class="built_in">type</span> bond-slave ifname &lt;从属网卡名&gt; master &lt;绑定网卡名&gt;</span><br></pre></td></tr></table></figure><p>例如，将 <code>ens160</code> 和 <code>ens256</code> 网卡绑定到 <code>bond0</code> 网卡上</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># nmcli connection add type bond-slave ifname ens160 master bond0</span></span><br><span class="line">Connection <span class="string">'bond-slave-ens160'</span> (<span class="number">021</span>cce67<span class="literal">-1440</span><span class="literal">-4d50</span><span class="literal">-a8a9</span><span class="literal">-5c7faf8a361b</span>) successfully added.</span><br><span class="line">root@ubuntu2404:/<span class="comment"># nmcli connection add type bond-slave ifname ens256 master bond0</span></span><br><span class="line">Connection <span class="string">'bond-slave-ens256'</span> (f17d7bf7<span class="literal">-4313</span><span class="literal">-4f90</span><span class="literal">-8f9c</span><span class="literal">-5c35c0ebe319</span>) successfully added.</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># nmcli connection show</span></span><br><span class="line">NAME                UUID                                  TYPE      DEVICE</span><br><span class="line">netplan<span class="literal">-ens160</span>      febc54dc<span class="literal">-e29c</span><span class="literal">-3939</span><span class="literal">-a911</span><span class="literal">-8a11855bd1c8</span>  ethernet  ens160</span><br><span class="line">Wired connection <span class="number">1</span>  ec18620e<span class="literal">-37bf</span><span class="literal">-3343</span><span class="literal">-acf5</span><span class="literal">-b57b8928465d</span>  ethernet  ens256</span><br><span class="line">bond<span class="literal">-bond0</span>          fed29263<span class="literal">-5656</span><span class="literal">-449b</span><span class="literal">-95c8</span><span class="literal">-cf2e23432736</span>  bond      bond0</span><br><span class="line">lo                  <span class="number">73</span>b7043c<span class="literal">-59f1</span><span class="literal">-42aa</span><span class="literal">-a711</span><span class="literal">-2eb721fc18b4</span>  loopback  lo</span><br><span class="line">docker0             <span class="number">5</span>fb2c927<span class="literal">-9b29</span><span class="literal">-4d43</span><span class="literal">-99ab</span><span class="literal">-09af694a8927</span>  bridge    docker0</span><br><span class="line">bond<span class="literal">-slave</span><span class="literal">-ens160</span>   <span class="number">021</span>cce67<span class="literal">-1440</span><span class="literal">-4d50</span><span class="literal">-a8a9</span><span class="literal">-5c7faf8a361b</span>  ethernet  --</span><br><span class="line">bond<span class="literal">-slave</span><span class="literal">-ens256</span>   f17d7bf7<span class="literal">-4313</span><span class="literal">-4f90</span><span class="literal">-8f9c</span><span class="literal">-5c35c0ebe319</span>  ethernet  --</span><br></pre></td></tr></table></figure></li><li><p>配置绑定网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection modify bond-bond0 ipv4.addresses 172.16.19.200&#x2F;24 ipv4.gateway 172.16.19.2 ipv4.method manual</span><br></pre></td></tr></table></figure></li><li><p>激活绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection up bond-bond0</span><br></pre></td></tr></table></figure></li><li><p>激活从属网卡（可不激活，激活后会导致原本的网卡无法直接访问）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection up bond-slave-ens160</span><br><span class="line">nmcli connection up bond-slave-ens256</span><br></pre></td></tr></table></figure></li></ol><h2 id="验证网卡冗余"><a href="#验证网卡冗余" class="headerlink" title="验证网卡冗余"></a>验证网卡冗余</h2><p>按照上面步骤绑定完网卡后，可以看到多了一张网卡 bond0</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># ip a</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::<span class="number">1</span>/<span class="number">128</span> scope host noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: ens160: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc pfifo_fast master bond0 state UP group default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:ec:<span class="number">41</span>:a3 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp2s0</span><br><span class="line"><span class="number">3</span>: ens256: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc pfifo_fast master bond0 state UP group default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:ec:<span class="number">41</span>:a3 brd ff:ff:ff:ff:ff:ff permaddr <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:ec:<span class="number">41</span>:ad</span><br><span class="line">    altname enp26s0</span><br><span class="line"><span class="number">4</span>: docker0: &lt;NO<span class="literal">-CARRIER</span>,BROADCAST,MULTICAST,UP&gt; mtu <span class="number">1500</span> qdisc noqueue state DOWN group default</span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:<span class="number">8</span>b:f0:<span class="number">0</span>f:<span class="number">5</span>a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.17</span>.<span class="number">0.1</span>/<span class="number">16</span> brd <span class="number">172.17</span>.<span class="number">255.255</span> scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">9</span>: bond0: &lt;BROADCAST,MULTICAST,MASTER,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue state UP group default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:ec:<span class="number">41</span>:a3 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.16</span>.<span class="number">19.200</span>/<span class="number">24</span> brd <span class="number">172.16</span>.<span class="number">19.255</span> scope global noprefixroute bond0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::<span class="number">6</span>d51:ebf5:<span class="number">7</span>acc:<span class="number">83</span>ff/<span class="number">64</span> scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># nmcli connection show</span></span><br><span class="line">NAME                UUID                                  TYPE      DEVICE</span><br><span class="line">bond<span class="literal">-bond0</span>          <span class="number">1</span>d93dc92<span class="literal">-b5b8</span><span class="literal">-4710</span><span class="literal">-9f67</span><span class="literal">-2424899947e3</span>  bond      bond0</span><br><span class="line">bond<span class="literal">-slave</span><span class="literal">-ens160</span>   f75880e7<span class="literal">-977e</span><span class="literal">-4537</span><span class="literal">-84cd</span><span class="literal">-a5bc802ad32c</span>  ethernet  ens160</span><br><span class="line">bond<span class="literal">-slave</span><span class="literal">-ens256</span>   cf9838da<span class="literal">-7c22</span><span class="literal">-4066</span><span class="literal">-ba2d</span><span class="literal">-2b89d3e08f63</span>  ethernet  ens256</span><br><span class="line">lo                  <span class="number">73</span>b7043c<span class="literal">-59f1</span><span class="literal">-42aa</span><span class="literal">-a711</span><span class="literal">-2eb721fc18b4</span>  loopback  lo</span><br><span class="line">docker0             <span class="number">5</span>fb2c927<span class="literal">-9b29</span><span class="literal">-4d43</span><span class="literal">-99ab</span><span class="literal">-09af694a8927</span>  bridge    docker0</span><br><span class="line">netplan<span class="literal">-ens160</span>      febc54dc<span class="literal">-e29c</span><span class="literal">-3939</span><span class="literal">-a911</span><span class="literal">-8a11855bd1c8</span>  ethernet  --</span><br><span class="line">Wired connection <span class="number">1</span>  ec18620e<span class="literal">-37bf</span><span class="literal">-3343</span><span class="literal">-acf5</span><span class="literal">-b57b8928465d</span>  ethernet  --</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># nmcli device status</span></span><br><span class="line">DEVICE   TYPE      STATE                   CONNECTION</span><br><span class="line">bond0    bond      connected               bond<span class="literal">-bond0</span></span><br><span class="line">ens160   ethernet  connected               bond<span class="literal">-slave</span><span class="literal">-ens160</span></span><br><span class="line">ens256   ethernet  connected               bond<span class="literal">-slave</span><span class="literal">-ens256</span></span><br><span class="line">lo       loopback  connected (externally)  lo</span><br><span class="line">docker0  bridge    connected (externally)  docker0</span><br></pre></td></tr></table></figure><p>通过 bond0 网卡 IP 连接，单独关掉 ens160 或者 ens256 网卡（<code>ifconfig ens160 down</code>），连接都不会收到影响。</p><ol><li><p>恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection down bond-bond0</span><br><span class="line">nmcli connection down bond-slave-ens160</span><br><span class="line">nmcli connection down bond-slave-ens256</span><br><span class="line"></span><br><span class="line">nmcli connection del bond-bond0</span><br><span class="line">nmcli connection del bond-slave-ens160</span><br><span class="line">nmcli connection del bond-slave-ens256</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux NIC Bonding 技术可以将多张物理网卡或者虚拟网卡绑定为一张虚拟的逻辑网卡，从而实现网卡的冗余、带宽的扩容以及负载均衡。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux策略路由</title>
    <link href="https://gy23333.github.io/2025/03/20/Linux%E7%AD%96%E7%95%A5%E8%B7%AF%E7%94%B1/"/>
    <id>https://gy23333.github.io/2025/03/20/Linux%E7%AD%96%E7%95%A5%E8%B7%AF%E7%94%B1/</id>
    <published>2025-03-20T15:11:01.000Z</published>
    <updated>2025-03-23T16:38:45.429Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Linux 策略路由是一种高级路由机制。相比于传统路由，策略路由允许用户配置多张路由表，根据源地址、目的地址等选择不同路由表，提供了更灵活的路由控制能力。</p><a id="more"></a><h1 id="路由表（Routing-Table）"><a href="#路由表（Routing-Table）" class="headerlink" title="路由表（Routing Table）"></a>路由表（Routing Table）</h1><p>路由表是存储路由规则的集合，Linux 支持配置多张路由表。</p><h2 id="rt-tables-文件"><a href="#rt-tables-文件" class="headerlink" title="rt_tables 文件"></a>rt_tables 文件</h2><p><code>/etc/iproute2/rt_tables</code> 是 Linux 中用于定义路由表名称和编号映射的文件。</p><p>其中的每一行定义了一个路由表，包括其编号（1～255）和名称，编号和名称都不能重复。</p><p>Linux 发行版中，<code>/etc/iproute2/rt_tables</code> 的默认内容如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># cat /etc/iproute2/rt_tables</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># reserved values</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="number">255</span>     local</span><br><span class="line"><span class="number">254</span>     main</span><br><span class="line"><span class="number">253</span>     default</span><br><span class="line"><span class="number">0</span>       unspec</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># local</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#1      inr.ruhep</span></span><br></pre></td></tr></table></figure><h2 id="Linux-默认路由表"><a href="#Linux-默认路由表" class="headerlink" title="Linux 默认路由表"></a>Linux 默认路由表</h2><p>Linux 初始的默认状态下，包含下面四个路由表：</p><ul><li><p><code>local</code>表</p><ul><li>编号：255</li><li>存储本地接口地址和广播地址</li><li>内核自动维护，用户通常不需要修改</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># ip route show table local</span></span><br><span class="line">local <span class="number">127.0</span>.<span class="number">0.0</span>/<span class="number">8</span> dev lo proto kernel scope host src <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">local <span class="number">127.0</span>.<span class="number">0.1</span> dev lo proto kernel scope host src <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">broadcast <span class="number">127.255</span>.<span class="number">255.255</span> dev lo proto kernel scope link src <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">local <span class="number">172.16</span>.<span class="number">19.129</span> dev ens160 proto kernel scope host src <span class="number">172.16</span>.<span class="number">19.129</span></span><br><span class="line">local <span class="number">172.16</span>.<span class="number">19.133</span> dev ens256 proto kernel scope host src <span class="number">172.16</span>.<span class="number">19.133</span></span><br><span class="line">broadcast <span class="number">172.16</span>.<span class="number">19.255</span> dev ens160 proto kernel scope link src <span class="number">172.16</span>.<span class="number">19.129</span></span><br><span class="line">broadcast <span class="number">172.16</span>.<span class="number">19.255</span> dev ens256 proto kernel scope link src <span class="number">172.16</span>.<span class="number">19.133</span></span><br><span class="line">local <span class="number">172.17</span>.<span class="number">0.1</span> dev docker0 proto kernel scope host src <span class="number">172.17</span>.<span class="number">0.1</span></span><br><span class="line">broadcast <span class="number">172.17</span>.<span class="number">255.255</span> dev docker0 proto kernel scope link src <span class="number">172.17</span>.<span class="number">0.1</span> linkdown</span><br></pre></td></tr></table></figure></li><li><p><code>main</code>表</p><ul><li>编号：254</li><li>主路由表，传统路由使用的表</li><li>通过 <code>ip route</code> 命令配置或展示的都是此表</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># ip route show table main</span></span><br><span class="line">default via <span class="number">172.16</span>.<span class="number">19.2</span> dev ens160 proto dhcp src <span class="number">172.16</span>.<span class="number">19.129</span> metric <span class="number">100</span></span><br><span class="line">default via <span class="number">172.16</span>.<span class="number">19.2</span> dev ens256 proto dhcp src <span class="number">172.16</span>.<span class="number">19.133</span> metric <span class="number">101</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">19.0</span>/<span class="number">24</span> dev ens160 proto kernel scope link src <span class="number">172.16</span>.<span class="number">19.129</span> metric <span class="number">100</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">19.0</span>/<span class="number">24</span> dev ens256 proto kernel scope link src <span class="number">172.16</span>.<span class="number">19.133</span> metric <span class="number">101</span></span><br><span class="line"><span class="number">172.17</span>.<span class="number">0.0</span>/<span class="number">16</span> dev docker0 proto kernel scope link src <span class="number">172.17</span>.<span class="number">0.1</span> linkdown</span><br></pre></td></tr></table></figure></li><li><p><code>default</code>表</p><ul><li>编号：253</li><li>默认路由表，通常用于存储默认路由</li><li>初始时为空</li></ul></li><li><p><code>unspec</code>表</p><ul><li>编号：0</li><li>未指定路由表，用于表示未指定或无效的路由表</li></ul></li></ul><h2 id="自定义路由表"><a href="#自定义路由表" class="headerlink" title="自定义路由表"></a>自定义路由表</h2><p>修改 <code>/etc/iproute2/rt_tables</code> 文件，可添加自定义路由表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;编号&gt;&lt;路由表名&gt;</span><br></pre></td></tr></table></figure><p>建议：编号虽然可以从 1 开始取，但是为了避免与未来系统可能保留的编号冲突，通常选择从 100 开始分配编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100   custom1</span><br><span class="line">101   custom2</span><br></pre></td></tr></table></figure><p>也可以分段分配编号，以方便管理不同类型的路由表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100   custom1</span><br><span class="line">200   custom2</span><br></pre></td></tr></table></figure><h1 id="路由规则（Rule）"><a href="#路由规则（Rule）" class="headerlink" title="路由规则（Rule）"></a>路由规则（Rule）</h1><p>路由规则：数据包如何匹配并选择路由表的规则，根据特定的条件（如源地址、目的地址、入接口等）选择不同的路由表。</p><h2 id="查看路由规则"><a href="#查看路由规则" class="headerlink" title="查看路由规则"></a>查看路由规则</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># ip rule show</span></span><br><span class="line"><span class="number">0</span>:      from all lookup local</span><br><span class="line"><span class="number">32766</span>:  from all lookup main</span><br><span class="line"><span class="number">32767</span>:  from all lookup default</span><br></pre></td></tr></table></figure><h2 id="路由规则的组成"><a href="#路由规则的组成" class="headerlink" title="路由规则的组成"></a>路由规则的组成</h2><p>每一条路由规则包含 3 个信息：</p><ul><li>优先级：数字越小，优先级越高。自定义规则的优先级通常设置在 <strong>1 到 32765</strong> 之间。</li><li>条件：匹配数据包的条件，如源地址、目的地址、入接口等</li><li>动作：通常规定选择哪个路由表</li></ul><p>按照优先级，从小到大匹配规则，如果匹配到，则选择规定的路由表。</p><h2 id="增-删路由规则"><a href="#增-删路由规则" class="headerlink" title="增/删路由规则"></a>增/删路由规则</h2><ul><li><p>增加路由规则（优先级可缺省，缺省时取低优先级）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip rule add &lt;条件&gt; lookup &lt;表名&gt; priority &lt;优先级&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除路由规则</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip rule del &lt;条件&gt; lookup &lt;表名&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="匹配条件"><a href="#匹配条件" class="headerlink" title="匹配条件"></a>匹配条件</h2><p>路由规则的匹配条件支持以下字段：</p><ul><li><p>匹配数据包的源地址</p><ul><li><p><code>from &lt;PREFIX&gt;</code></p></li><li><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 来自 192.168.1.0/24 的流量使用 custom1 表</span></span><br><span class="line">ip rule add from <span class="number">192.168</span>.<span class="number">1.0</span>/<span class="number">24</span> lookup custom1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>匹配数据包的目的地址</p><ul><li><p><code>to &lt;PREFIX&gt;</code></p></li><li><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去往 8.8.8.8 的流量使用 custom2 表</span></span><br><span class="line">ip rule add to <span class="number">8.8</span>.<span class="number">8.8</span> lookup custom2</span><br></pre></td></tr></table></figure></li></ul></li><li><p>匹配数据包的入网卡</p><ul><li><p><code>iif &lt;网卡&gt;</code></p></li><li><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 eth1 接口进入的流量使用 custom3 表</span></span><br><span class="line">ip rule add iif eth1 lookup custom3</span><br></pre></td></tr></table></figure></li></ul></li><li><p>匹配数据包的协议</p><ul><li><p><code>ipproto &lt;PROTOCOL&gt;</code></p></li><li><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TCP 协议的流量使用 custom4 表</span></span><br><span class="line">ip rule add proto tcp lookup custom4</span><br></pre></td></tr></table></figure></li></ul></li><li><p>等等，详细见 help</p></li></ul><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># ip rule help</span></span><br><span class="line">Usage: ip rule &#123; add | del &#125; SELECTOR ACTION</span><br><span class="line">       ip rule &#123; flush | save | restore &#125;</span><br><span class="line">       ip rule [ <span class="type">list</span> [ <span class="type">SELECTOR</span> ]]</span><br><span class="line">SELECTOR := [ <span class="type">not</span> ] [ <span class="type">from</span> <span class="type">PREFIX</span> ] [ <span class="type">to</span> <span class="type">PREFIX</span> ] [ <span class="type">tos</span> <span class="type">TOS</span> ]</span><br><span class="line">            [ <span class="type">fwmark</span> <span class="type">FWMARK</span>[/<span class="type">MASK</span>] ]</span><br><span class="line">            [ <span class="type">iif</span> <span class="built_in">STRING</span> ] [ <span class="type">oif</span> <span class="built_in">STRING</span> ] [ <span class="type">pref</span> <span class="type">NUMBER</span> ] [ <span class="type">l3mdev</span> ]</span><br><span class="line">            [ <span class="type">uidrange</span> <span class="type">NUMBER</span>-<span class="type">NUMBER</span> ]</span><br><span class="line">            [ <span class="type">ipproto</span> <span class="type">PROTOCOL</span> ]</span><br><span class="line">            [ <span class="type">sport</span> [ <span class="type">NUMBER</span> | <span class="type">NUMBER</span>-<span class="type">NUMBER</span> ]</span><br><span class="line">            [ <span class="type">dport</span> [ <span class="type">NUMBER</span> | <span class="type">NUMBER</span>-<span class="type">NUMBER</span> ] ]</span><br><span class="line"><span class="type">ACTION</span> := [ <span class="type">table</span> <span class="type">TABLE_ID</span> ]</span><br><span class="line">          [ <span class="type">protocol</span> <span class="type">PROTO</span> ]</span><br><span class="line">          [ <span class="type">nat</span> <span class="type">ADDRESS</span> ]</span><br><span class="line">          [ <span class="type">realms</span> [<span class="type">SRCREALM</span>/]<span class="type">DSTREALM</span> ]</span><br><span class="line">          [ <span class="type">goto</span> <span class="type">NUMBER</span> ]</span><br><span class="line">          <span class="type">SUPPRESSOR</span></span><br><span class="line"><span class="type">SUPPRESSOR</span> := [ <span class="type">suppress_prefixlength</span> <span class="type">NUMBER</span> ]</span><br><span class="line">              [ <span class="type">suppress_ifgroup</span> <span class="type">DEVGROUP</span> ]</span><br><span class="line"><span class="type">TABLE_ID</span> := [ <span class="type">local</span> | <span class="type">main</span> | <span class="type">default</span> | <span class="type">NUMBER</span> ]</span><br></pre></td></tr></table></figure><h1 id="路由（Route）"><a href="#路由（Route）" class="headerlink" title="路由（Route）"></a>路由（Route）</h1><p>每张路由表里都可以配置自己的路由。</p><h2 id="ip-route-命令"><a href="#ip-route-命令" class="headerlink" title="ip route 命令"></a><code>ip route</code> 命令</h2><p><code>ip route</code> 命令如果没有指定路由表，则默认指定 <code>main</code> 表。</p><h3 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip route show table &lt;路由表名&gt;</span><br></pre></td></tr></table></figure><h2 id="help-1"><a href="#help-1" class="headerlink" title="help"></a>help</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/<span class="comment"># ip route help</span></span><br><span class="line">Usage: ip route &#123; list | flush &#125; SELECTOR</span><br><span class="line">       ip route save SELECTOR</span><br><span class="line">       ip route restore</span><br><span class="line">       ip route showdump</span><br><span class="line">       ip route get [ <span class="type">ROUTE_GET_FLAGS</span> ] ADDRESS</span><br><span class="line">                            [ <span class="type">from</span> <span class="type">ADDRESS</span> <span class="type">iif</span> <span class="built_in">STRING</span> ]</span><br><span class="line">                            [ <span class="type">oif</span> <span class="built_in">STRING</span> ] [ <span class="type">tos</span> <span class="type">TOS</span> ]</span><br><span class="line">                            [ <span class="type">mark</span> <span class="type">NUMBER</span> ] [ <span class="type">vrf</span> <span class="type">NAME</span> ]</span><br><span class="line">                            [ <span class="type">uid</span> <span class="type">NUMBER</span> ] [ <span class="type">ipproto</span> <span class="type">PROTOCOL</span> ]</span><br><span class="line">                            [ <span class="type">sport</span> <span class="type">NUMBER</span> ] [ <span class="type">dport</span> <span class="type">NUMBER</span> ]</span><br><span class="line">       ip route &#123; add | del | change | append | replace &#125; ROUTE</span><br><span class="line">SELECTOR := [ <span class="type">root</span> <span class="type">PREFIX</span> ] [ <span class="type">match</span> <span class="type">PREFIX</span> ] [ <span class="type">exact</span> <span class="type">PREFIX</span> ]</span><br><span class="line">            [ <span class="type">table</span> <span class="type">TABLE_ID</span> ] [ <span class="type">vrf</span> <span class="type">NAME</span> ] [ <span class="type">proto</span> <span class="type">RTPROTO</span> ]</span><br><span class="line">            [ <span class="type">type</span> <span class="type">TYPE</span> ] [ <span class="type">scope</span> <span class="type">SCOPE</span> ]</span><br><span class="line">ROUTE := NODE_SPEC [ <span class="type">INFO_SPEC</span> ]</span><br><span class="line">NODE_SPEC := [ <span class="type">TYPE</span> ] PREFIX [ <span class="type">tos</span> <span class="type">TOS</span> ]</span><br><span class="line">             [ <span class="type">table</span> <span class="type">TABLE_ID</span> ] [ <span class="type">proto</span> <span class="type">RTPROTO</span> ]</span><br><span class="line">             [ <span class="type">scope</span> <span class="type">SCOPE</span> ] [ <span class="type">metric</span> <span class="type">METRIC</span> ]</span><br><span class="line">             [ <span class="type">ttl</span>-<span class="type">propagate</span> &#123; <span class="type">enabled</span> | <span class="type">disabled</span> &#125; ]</span><br><span class="line">INFO_SPEC := &#123; NH | nhid ID &#125; OPTIONS FLAGS [ <span class="type">nexthop</span> <span class="type">NH</span> ]...</span><br><span class="line">NH := [ <span class="type">encap</span> <span class="type">ENCAPTYPE</span> <span class="type">ENCAPHDR</span> ] [ <span class="type">via</span> [ <span class="type">FAMILY</span> ] <span class="type">ADDRESS</span> ]</span><br><span class="line">      [ <span class="type">dev</span> <span class="built_in">STRING</span> ] [ <span class="type">weight</span> <span class="type">NUMBER</span> ] NHFLAGS</span><br><span class="line">FAMILY := [ <span class="type">inet</span> | <span class="type">inet6</span> | <span class="type">mpls</span> | <span class="type">bridge</span> | <span class="type">link</span> ]</span><br><span class="line">OPTIONS := FLAGS [ <span class="type">mtu</span> <span class="type">NUMBER</span> ] [ <span class="type">advmss</span> <span class="type">NUMBER</span> ] [ <span class="type">as</span> [ <span class="type">to</span> ] <span class="type">ADDRESS</span> ]</span><br><span class="line">           [ <span class="type">rtt</span> <span class="type">TIME</span> ] [ <span class="type">rttvar</span> <span class="type">TIME</span> ] [ <span class="type">reordering</span> <span class="type">NUMBER</span> ]</span><br><span class="line">           [ <span class="type">window</span> <span class="type">NUMBER</span> ] [ <span class="type">cwnd</span> <span class="type">NUMBER</span> ] [ <span class="type">initcwnd</span> <span class="type">NUMBER</span> ]</span><br><span class="line">           [ <span class="type">ssthresh</span> <span class="type">NUMBER</span> ] [ <span class="type">realms</span> <span class="type">REALM</span> ] [ <span class="type">src</span> <span class="type">ADDRESS</span> ]</span><br><span class="line">           [ <span class="type">rto_min</span> <span class="type">TIME</span> ] [ <span class="type">hoplimit</span> <span class="type">NUMBER</span> ] [ <span class="type">initrwnd</span> <span class="type">NUMBER</span> ]</span><br><span class="line">           [ <span class="type">features</span> <span class="type">FEATURES</span> ] [ <span class="type">quickack</span> <span class="built_in">BOOL</span> ] [ <span class="type">congctl</span> <span class="type">NAME</span> ]</span><br><span class="line">           [ <span class="type">pref</span> <span class="type">PREF</span> ] [ <span class="type">expires</span> <span class="type">TIME</span> ] [ <span class="type">fastopen_no_cookie</span> <span class="built_in">BOOL</span> ]</span><br><span class="line">TYPE := &#123; unicast | local | broadcast | multicast | <span class="keyword">throw</span> |</span><br><span class="line">          unreachable | prohibit | blackhole | nat &#125;</span><br><span class="line">TABLE_ID := [ <span class="type">local</span> | <span class="type">main</span> | <span class="type">default</span> | <span class="type">all</span> | <span class="type">NUMBER</span> ]</span><br><span class="line">SCOPE := [ <span class="type">host</span> | <span class="type">link</span> | <span class="type">global</span> | <span class="type">NUMBER</span> ]</span><br><span class="line">NHFLAGS := [ <span class="type">onlink</span> | <span class="type">pervasive</span> ]</span><br><span class="line">RTPROTO := [ <span class="type">kernel</span> | <span class="type">boot</span> | <span class="type">static</span> | <span class="type">NUMBER</span> ]</span><br><span class="line">PREF := [ <span class="type">low</span> | <span class="type">medium</span> | <span class="type">high</span> ]</span><br><span class="line">TIME := NUMBER[<span class="type">s</span>|<span class="type">ms</span>]</span><br><span class="line">BOOL := [<span class="number">1</span>|<span class="number">0</span>]</span><br><span class="line">FEATURES := ecn</span><br><span class="line">ENCAPTYPE := [ <span class="type">mpls</span> | <span class="type">ip</span> | <span class="type">ip6</span> | <span class="type">seg6</span> | <span class="type">seg6local</span> | <span class="type">rpl</span> | <span class="type">ioam6</span> | <span class="type">xfrm</span> ]</span><br><span class="line">ENCAPHDR := [ <span class="type">MPLSLABEL</span> | <span class="type">SEG6HDR</span> | <span class="type">SEG6LOCAL</span> | <span class="type">IOAM6HDR</span> | <span class="type">XFRMINFO</span> ]</span><br><span class="line">SEG6HDR := [ <span class="type">mode</span> <span class="type">SEGMODE</span> ] segs ADDR1,ADDRi,ADDRn [<span class="type">hmac</span> <span class="type">HMACKEYID</span>] [<span class="type">cleanup</span>]</span><br><span class="line">SEGMODE := [ <span class="type">encap</span> | <span class="type">encap.red</span> | <span class="type">inline</span> | <span class="type">l2encap</span> | <span class="type">l2encap.red</span> ]</span><br><span class="line">SEG6LOCAL := action ACTION [ <span class="type">OPTIONS</span> ] [ <span class="type">count</span> ]</span><br><span class="line">ACTION := &#123; <span class="keyword">End</span> | End.X | End.T | End.DX2 | End.DX6 | End.DX4 |</span><br><span class="line">            End.DT6 | End.DT4 | End.DT46 | End.B6 | End.B6.Encaps |</span><br><span class="line">            End.BM | End.S | End.AS | End.AM | End.BPF &#125;</span><br><span class="line">OPTIONS := OPTION [ <span class="type">OPTIONS</span> ]</span><br><span class="line">OPTION := &#123; flavors FLAVORS | srh SEG6HDR | nh4 ADDR | nh6 ADDR | iif DEV | oif DEV |</span><br><span class="line">            table TABLEID | vrftable TABLEID | endpoint PROGNAME &#125;</span><br><span class="line">FLAVORS := &#123; FLAVOR[,<span class="type">FLAVOR</span>] &#125;</span><br><span class="line">FLAVOR := &#123; psp | usp | usd | next<span class="literal">-csid</span> &#125;</span><br><span class="line">IOAM6HDR := trace prealloc type IOAM6_TRACE_TYPE ns IOAM6_NAMESPACE size IOAM6_TRACE_SIZE</span><br><span class="line">XFRMINFO := if_id IF_ID [ <span class="type">link_dev</span> <span class="type">LINK</span> ]</span><br><span class="line">ROUTE_GET_FLAGS := [ <span class="type">fibmatch</span> ]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux 策略路由是一种高级路由机制。相比于传统路由，策略路由允许用户配置多张路由表，根据源地址、目的地址等选择不同路由表，提供了更灵活的路由控制能力。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="https://gy23333.github.io/2025/01/16/%E5%A0%86/"/>
    <id>https://gy23333.github.io/2025/01/16/%E5%A0%86/</id>
    <published>2025-01-15T17:41:45.000Z</published>
    <updated>2025-01-19T16:48:44.084Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>堆（heap）是一种满足特定条件的完全二叉树，分为大顶堆和小顶堆，通常用于实现优先队列，进行堆排序。本文主要介绍推数据结构以及其 Go 实现。</p><a id="more"></a><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>堆是一种完全二叉树，与优先队列等价，分为两种类型：</p><ul><li>小顶堆（min heap）：任意节点的值 &lt;= 其子节点的值</li><li>大顶堆（max heap）：任意节点的值 &gt;= 其子节点的值</li></ul><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/heap.png" alt="heap" style="zoom: 50%;" /></p><p>从存储结构来看，实际就是树层次遍历所得的队列。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20250117014014174.png" alt="image-20250117014014174" style="zoom:50%;" /></p><h1 id="container-heap"><a href="#container-heap" class="headerlink" title="container/heap"></a><code>container/heap</code></h1><p>Golang 标准库 <code>container/heap</code> 提供了堆的快速实现。</p><h2 id="接口定义源码"><a href="#接口定义源码" class="headerlink" title="接口定义源码"></a>接口定义源码</h2><p><code>heap.Interface</code> 接口定义源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">sort.Interface</span><br><span class="line">Push(x any) <span class="comment">// add x as element Len()</span></span><br><span class="line">Pop() any   <span class="comment">// remove and return element Len() - 1.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sort.Interface</code> 接口定义源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Len is the number of elements in the collection.</span></span><br><span class="line">Len() <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Less reports whether the element with index i</span></span><br><span class="line"><span class="comment">// must sort before the element with index j.</span></span><br><span class="line">Less(i, j <span class="keyword">int</span>) <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Swap swaps the elements with indexes i and j.</span></span><br><span class="line">Swap(i, j <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h2><p>通过实现 <code>heap.Interface</code> 接口，从而实现一个堆。</p><h3 id="堆的结构体"><a href="#堆的结构体" class="headerlink" title="堆的结构体"></a>堆的结构体</h3><p>首先定义堆的结构体，堆的数据类型需要是一个切片（实际以切片形式存储），切片的 type 即为堆的每个元素的数据类型。</p><ul><li><p>最常用的整数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IntHeap []<span class="keyword">int</span></span><br></pre></td></tr></table></figure></li><li><p>也可使用结构体的切片，比如想要实现一个每个元素都是一个长方体的优先队列</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">width  <span class="keyword">int</span></span><br><span class="line">height <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RectangleHeap []Rectangle</span><br></pre></td></tr></table></figure></li></ul><h3 id="Len-int"><a href="#Len-int" class="headerlink" title="Len() int"></a><code>Len() int</code></h3><p>用于返回堆中元素的数量。</p><p>实现方式相对固定，返回切片长度即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntHeap)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(h)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Less-i-j-int-bool"><a href="#Less-i-j-int-bool" class="headerlink" title="Less(i, j int) bool"></a><code>Less(i, j int) bool</code></h3><p>用于设置堆的元素的大小比较方法。</p><p>比较索引为 <code>i</code> 和 <code>j</code> 上的两个元素，如果 <code>i</code> 索引元素应该排在 <code>j</code> 的前面，即返回 true。</p><ul><li>小顶堆：$h[i] &lt; h[j]$，则返回 true</li><li>大顶堆：$h[i] &gt; h[j]$，则返回 true</li></ul><p>示例：</p><ul><li><p>整数小顶堆</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntHeap)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> h[i] &lt; h[j]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>整数大顶堆</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntHeap)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> h[i] &gt; h[j]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>长方体大顶堆，面积比大小</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span> <span class="title">area</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.width * r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h RectangleHeap)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> h[i].area() &gt; h[j].area()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Swap-i-j-int"><a href="#Swap-i-j-int" class="headerlink" title="Swap(i, j int)"></a><code>Swap(i, j int)</code></h3><p>用于交换堆中索引 <code>i</code> 和 <code>j</code> 位置的元素。</p><p>实现方式相对固定，直接交换二者存储位置。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntHeap)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">h[i], h[j] = h[j], h[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Push-x-any"><a href="#Push-x-any" class="headerlink" title="Push(x any)"></a><code>Push(x any)</code></h3><p>将新的元素 x 加入堆切片，即 append 到最后。</p><p>注：接口的 <code>Push(x any)</code> 只需要将新元素加到堆尾即可，使用 <code>heap.Push()</code> 时，将会调用用户实现的  <code>Push(x any)</code> ，将元素加到队尾，然后自动实现上浮排序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *IntHeap)</span> <span class="title">Push</span><span class="params">(x any)</span></span> &#123;</span><br><span class="line">*h = <span class="built_in">append</span>(*h, x.(<span class="keyword">int</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pop-any"><a href="#Pop-any" class="headerlink" title="Pop() any"></a><code>Pop() any</code></h3><p>从堆切片中移除最后一个元素，并返回。</p><p>注：使用 <code>heap.Pop()</code> 时，将先将堆顶的元素下沉到队尾，然后调用用户实现的  <code>Pop() any</code>  删除并返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *IntHeap)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">any</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(*h)</span><br><span class="line">x := (*h)[n<span class="number">-1</span>]</span><br><span class="line">*h = (*h)[:n<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现 <code>Push()</code> 和 <code>Pop()</code> 时，都需使用指针接收。切片是引用类型，但在方法中增加/删除元素，可能会修改切片本身，所以需使用指针接收。</p></blockquote><h2 id="堆的使用"><a href="#堆的使用" class="headerlink" title="堆的使用"></a>堆的使用</h2><h3 id="heap-Init"><a href="#heap-Init" class="headerlink" title="heap.Init()"></a><code>heap.Init()</code></h3><p>作用：完成堆的初始化。调用结束后，堆的切片即完成排序。</p><p>实现方式：将堆的非叶子节点一一下沉。（由底向上，从第一个非叶子节点开始下沉，直到堆顶，叶子节点没有下沉的必要）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">(h Interface)</span></span> &#123;</span><br><span class="line"><span class="comment">// heapify</span></span><br><span class="line">n := h.Len()</span><br><span class="line"><span class="keyword">for</span> i := n/<span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">down(h, i, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="heap-Push"><a href="#heap-Push" class="headerlink" title="heap.Push()"></a><code>heap.Push()</code></h3><p>作用：将新元素推入堆中，并完成排序。</p><p>实现方式：先调用用户实现的 <code>Push()</code> 接口，将新元素加入切片的最尾部，再将尾部上浮。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Push</span><span class="params">(h Interface, x any)</span></span> &#123;</span><br><span class="line">h.Push(x)</span><br><span class="line">up(h, h.Len()<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="heap-Pop"><a href="#heap-Pop" class="headerlink" title="heap.Pop()"></a><code>heap.Pop()</code></h3><p>作用：将堆顶推出并返回。</p><p>实现方式：先将堆顶和堆尾交换，再将新换上的堆顶下沉，最后调用用户实现的 <code>Pop()</code> 接口，将堆尾推出并返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pop</span><span class="params">(h Interface)</span> <span class="title">any</span></span> &#123;</span><br><span class="line">n := h.Len() - <span class="number">1</span></span><br><span class="line">h.Swap(<span class="number">0</span>, n)</span><br><span class="line">down(h, <span class="number">0</span>, n)</span><br><span class="line"><span class="keyword">return</span> h.Pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum?envType=study-plan-v2&amp;envId=top-100-liked" target="_blank" rel="noopener">滑动窗口最大值</a></h2><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p><p>返回 <em>滑动窗口中的最大值</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [1,3,-1,-3,5,3,6,7], k &#x3D; 3</span><br><span class="line">输出：[3,3,5,5,6,7]</span><br><span class="line">解释：</span><br><span class="line">滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure><p>优先队列方法题解：</p><ol><li>将前 k-1 个数字初始化大顶堆</li><li>从第 k 个数字开始遍历<ol><li>将该数字 Push 入堆</li><li>查看堆顶元素<ul><li>如果已经不在滑动窗口里，则 Pop 出堆</li><li>否则，该堆顶即为现在滑动窗口里最大元素，加入结果</li></ul></li></ol></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> element <span class="keyword">struct</span> &#123;</span><br><span class="line">num   <span class="keyword">int</span></span><br><span class="line">index <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ElementHeap []element</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h ElementHeap)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h ElementHeap)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> h[i].num &gt; h[j].num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h ElementHeap)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">h[i], h[j] = h[j], h[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *ElementHeap)</span> <span class="title">Push</span><span class="params">(x any)</span></span> &#123;</span><br><span class="line">*h = <span class="built_in">append</span>(*h, x.(element))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *ElementHeap)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">any</span></span> &#123;</span><br><span class="line">n := h.Len()</span><br><span class="line">x := (*h)[n<span class="number">-1</span>]</span><br><span class="line">*h = (*h)[:n<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSlidingWindow</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">h := &amp;ElementHeap&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k<span class="number">-1</span>; i++ &#123;</span><br><span class="line">*h = <span class="built_in">append</span>(*h, element&#123;</span><br><span class="line">num:   nums[i],</span><br><span class="line">index: i,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">heap.Init(h)</span><br><span class="line">ans := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(nums))</span><br><span class="line"><span class="keyword">for</span> i := k - <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">heap.Push(h, element&#123;</span><br><span class="line">num:   nums[i],</span><br><span class="line">index: i,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (*h)[<span class="number">0</span>].index &lt; i-k+<span class="number">1</span> &#123;</span><br><span class="line">heap.Pop(h)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans = <span class="built_in">append</span>(ans, (*h)[<span class="number">0</span>].num)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;堆（heap）是一种满足特定条件的完全二叉树，分为大顶堆和小顶堆，通常用于实现优先队列，进行堆排序。本文主要介绍推数据结构以及其 Go 实现。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://gy23333.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://gy23333.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="堆" scheme="https://gy23333.github.io/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>OpenTelemetry分布式链路追踪</title>
    <link href="https://gy23333.github.io/2025/01/06/OpenTelemetry%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>https://gy23333.github.io/2025/01/06/OpenTelemetry%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</id>
    <published>2025-01-05T16:37:19.000Z</published>
    <updated>2025-01-06T17:48:25.073Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://jckling.github.io/2021/04/02/Jaeger/全链路追踪与%20Jaeger%20入门/index.html" target="_blank" rel="noopener">https://jckling.github.io/2021/04/02/Jaeger/全链路追踪与%20Jaeger%20入门/index.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name jaeger   -e COLLECTOR_ZIPKIN_HTTP_PORT&#x3D;9411   -p 5775:5775&#x2F;udp   -p 6831:6831&#x2F;udp   -p 6832:6832&#x2F;udp   -p 5778:5778   -p 16686:16686   -p 14268:14268   -p 14250:14250   -p 9411:9411   quay.io&#x2F;jaegertracing&#x2F;all-in-one:1.64.0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TLS 证书</title>
    <link href="https://gy23333.github.io/2024/12/24/TLS-%E8%AF%81%E4%B9%A6/"/>
    <id>https://gy23333.github.io/2024/12/24/TLS-%E8%AF%81%E4%B9%A6/</id>
    <published>2024-12-24T14:55:05.000Z</published>
    <updated>2024-12-24T14:55:05.810Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Go 环境配置</title>
    <link href="https://gy23333.github.io/2024/12/24/Go-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
    <id>https://gy23333.github.io/2024/12/24/Go-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</id>
    <published>2024-12-23T17:18:11.000Z</published>
    <updated>2025-04-23T05:46:43.865Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Go 环境配置</p><a id="more"></a><h1 id="Go-版本管理"><a href="#Go-版本管理" class="headerlink" title="Go 版本管理"></a>Go 版本管理</h1><p>Go 版本管理工具 <a href="https://github.com/moovweb/gvm" target="_blank" rel="noopener">gvm</a> 管理多个版本的 Golang</p><h2 id="gvm-安装"><a href="#gvm-安装" class="headerlink" title="gvm 安装"></a>gvm 安装</h2><ol><li><p>安装 bison</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install bison</span><br></pre></td></tr></table></figure></li><li><p>安装 gvm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt; &lt;(curl -s -S -L https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;moovweb&#x2F;gvm&#x2F;master&#x2F;binscripts&#x2F;gvm-installer)</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;root&#x2F;.gvm&#x2F;scripts&#x2F;gvm</span><br></pre></td></tr></table></figure></li></ol><h2 id="gvm-管理多个-go-版本"><a href="#gvm-管理多个-go-版本" class="headerlink" title="gvm 管理多个 go 版本"></a>gvm 管理多个 go 版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:~&#x2F;.gvm&#x2F;scripts# gvm help</span><br><span class="line">Usage: gvm [command]</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">  GVM is the Go Version Manager</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  version    - print the gvm version number</span><br><span class="line">  get        - gets the latest code (for debugging)</span><br><span class="line">  use        - select a go version to use (--default to set permanently)</span><br><span class="line">  diff       - view changes to Go root</span><br><span class="line">  help       - display this usage text</span><br><span class="line">  implode    - completely remove gvm</span><br><span class="line">  install    - install go versions</span><br><span class="line">  uninstall  - uninstall go versions</span><br><span class="line">  cross      - install go cross compilers</span><br><span class="line">  linkthis   - link this directory into GOPATH</span><br><span class="line">  list       - list installed go versions</span><br><span class="line">  listall    - list available versions</span><br><span class="line">  alias      - manage go version aliases</span><br><span class="line">  pkgset     - manage go packages sets</span><br><span class="line">  pkgenv     - edit the environment for a package set</span><br><span class="line">  applymod   - apply the go version in go.mod</span><br></pre></td></tr></table></figure><ul><li><p>查看已下载 go 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gvm list</span><br></pre></td></tr></table></figure></li><li><p>查看可下载 go 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gvm listall</span><br></pre></td></tr></table></figure></li></ul><ul><li></li></ul><h1 id="初始化-Go-项目"><a href="#初始化-Go-项目" class="headerlink" title="初始化 Go 项目"></a>初始化 Go 项目</h1><ol><li><p>新建项目文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir survey-test</span><br><span class="line">cd survey-test</span><br></pre></td></tr></table></figure></li><li><p>初始化 Go 模块</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go mod init github.com/GY23333/survey<span class="literal">-test</span></span><br><span class="line">go: creating new go.mod: module github.com/GY23333/survey<span class="literal">-test</span></span><br></pre></td></tr></table></figure><p>该步会自动生成 go.mod 文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module github.com/GY23333/survey-test</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.23</span><span class="number">.3</span></span><br></pre></td></tr></table></figure></li><li><p>如需获取依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com&#x2F;gorilla&#x2F;mux</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Go 环境配置&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://gy23333.github.io/categories/Golang/"/>
    
    
    <category term="Golang" scheme="https://gy23333.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go Package: survey</title>
    <link href="https://gy23333.github.io/2024/12/24/Go-Package-survey/"/>
    <id>https://gy23333.github.io/2024/12/24/Go-Package-survey/</id>
    <published>2024-12-23T16:44:26.000Z</published>
    <updated>2024-12-25T18:09:26.971Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Go 交互式命令行工具库，提供了包括文本输入、选择菜单、确认提示、多项选择等多种交互类型，帮助快速构建交互式命令行页面。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com&#x2F;AlecAivazis&#x2F;survey&#x2F;v2</span><br></pre></td></tr></table></figure><h1 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h1><h2 id="Input-单行输入"><a href="#Input-单行输入" class="headerlink" title="Input 单行输入"></a>Input 单行输入</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username <span class="keyword">string</span></span><br><span class="line">prompt := &amp;survey.Input&#123;</span><br><span class="line">  Message: <span class="string">"Input username:"</span>,</span><br><span class="line">&#125;</span><br><span class="line">survey.AskOne(prompt, &amp;username)</span><br></pre></td></tr></table></figure><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241225015619560.png" alt="image-20241225015619560" style="zoom:67%;" /></p><p>可以通过设置 <code>Suggest</code> 来给用户提供建议，帮助补全输入，<code>Suggest</code> 为由当前输入值返回建议值列表的方法。如下面补全文件路径示例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path <span class="keyword">string</span></span><br><span class="line">prompt := &amp;survey.Input&#123;</span><br><span class="line">  Message: <span class="string">"Input file path:"</span>,</span><br><span class="line">  Suggest: <span class="function"><span class="keyword">func</span><span class="params">(toComplete <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    files, _ := filepath.Glob(toComplete + <span class="string">"*"</span>)</span><br><span class="line">    <span class="keyword">return</span> files</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">survey.AskOne(prompt, &amp;path)</span><br></pre></td></tr></table></figure><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241225020920573.png" alt=""></p><h2 id="Multiline-多行输入"><a href="#Multiline-多行输入" class="headerlink" title="Multiline 多行输入"></a>Multiline 多行输入</h2><h2 id="Select-单选"><a href="#Select-单选" class="headerlink" title="Select 单选"></a>Select 单选</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tool <span class="keyword">string</span></span><br><span class="line">prompt := &amp;survey.Select&#123;</span><br><span class="line">  Message: <span class="string">"Choose a tool:"</span>,</span><br><span class="line">  Options: []<span class="keyword">string</span>&#123;<span class="string">"toolA"</span>, <span class="string">"toolB"</span>, <span class="string">"toolC"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">survey.AskOne(prompt, &amp;tool)</span><br></pre></td></tr></table></figure><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241225013809541.png" style="zoom: 67%;" /></p><p>可以通过设置 <code>Description</code> 给每个选项添加描述， <code>Description</code>  为由选项值/序号返回描述的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tool <span class="keyword">string</span></span><br><span class="line">description := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">  <span class="string">"toolA"</span>: <span class="string">"Description for toolA"</span>,</span><br><span class="line">  <span class="string">"toolB"</span>: <span class="string">"Description for toolB"</span>,</span><br><span class="line">  <span class="string">"toolC"</span>: <span class="string">"Description for toolC"</span>,</span><br><span class="line">&#125;</span><br><span class="line">prompt := &amp;survey.Select&#123;</span><br><span class="line">  Message: <span class="string">"Choose a tool:"</span>,</span><br><span class="line">  Options: []<span class="keyword">string</span>&#123;<span class="string">"toolA"</span>, <span class="string">"toolB"</span>, <span class="string">"toolC"</span>&#125;,</span><br><span class="line">  Description: <span class="function"><span class="keyword">func</span><span class="params">(value <span class="keyword">string</span>, index <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> description[value]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">survey.AskOne(prompt, &amp;tool)</span><br></pre></td></tr></table></figure><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241225014328295.png" style="zoom:67%;" /></p><h2 id="MultiSelect-多选"><a href="#MultiSelect-多选" class="headerlink" title="MultiSelect 多选"></a>MultiSelect 多选</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">days := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">prompt := &amp;survey.MultiSelect&#123;</span><br><span class="line">    Message: <span class="string">"What days do you prefer:"</span>,</span><br><span class="line">    Options: []<span class="keyword">string</span>&#123;<span class="string">"Sunday"</span>, <span class="string">"Monday"</span>, <span class="string">"Tuesday"</span>, <span class="string">"Wednesday"</span>, <span class="string">"Thursday"</span>, <span class="string">"Friday"</span>, <span class="string">"Saturday"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">survey.AskOne(prompt, &amp;days)</span><br></pre></td></tr></table></figure><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241226000302861.png" alt="image-20241226000302861"></p><h2 id="Confirm-确认"><a href="#Confirm-确认" class="headerlink" title="Confirm 确认"></a>Confirm 确认</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">answer := <span class="literal">false</span></span><br><span class="line">prompt := &amp;survey.Confirm&#123;</span><br><span class="line">  Message: <span class="string">"Are you sure to continue?"</span>,</span><br><span class="line">&#125;</span><br><span class="line">survey.AskOne(prompt, &amp;answer)</span><br></pre></td></tr></table></figure><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241226004601642.png" alt="image-20241226004601642" style="zoom:67%;" /></p><h2 id="Password-密码"><a href="#Password-密码" class="headerlink" title="Password 密码"></a>Password 密码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">password := <span class="string">""</span></span><br><span class="line">prompt := &amp;survey.Password&#123;</span><br><span class="line">  Message: <span class="string">"Please type your password"</span>,</span><br><span class="line">&#125;</span><br><span class="line">survey.AskOne(prompt, &amp;password)</span><br></pre></td></tr></table></figure><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241226004825233.png" alt="image-20241226004825233" style="zoom:67%;" /></p><h1 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h1><h2 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h2><p>设置输入验证，提供输入验证函数（输入：输入值，返回 error），如果用户输入验证不通过，则提示错误，并重新提问。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input <span class="keyword">string</span></span><br><span class="line">prompt := &amp;survey.Input&#123;</span><br><span class="line">  Message: <span class="string">"Input number:"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证输入为数字，并在0到10范围内</span></span><br><span class="line">vaildInputNumber := <span class="function"><span class="keyword">func</span><span class="params">(val <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  num, err := strconv.Atoi(val.(<span class="keyword">string</span>))</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">"not number"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> num &lt; <span class="number">0</span> || num &gt; <span class="number">10</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">"not in 0~10"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">survey.AskOne(prompt, &amp;input, survey.WithValidator(vaildInputNumber))</span><br></pre></td></tr></table></figure><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241226013939360.png" alt="image-20241226013939360" style="zoom:67%;" /></p><p>Survey 库也提供了一些可直接调用的验证函数</p><ul><li><code>Required</code>：要求非空</li><li><code>MinLength(n)</code>：最小长度</li><li><code>MaxLength(n)：最大长度</code></li></ul><h1 id="Ask"><a href="#Ask" class="headerlink" title="Ask"></a>Ask</h1><p><code>Ask</code>支持连续问多个问题，设置多个问题，每个问题可以包括四个部分：</p><ul><li><code>Name</code>：与回答结构体里的元素对应，用于指名结果解析到哪个元素</li><li><code>Prompt</code>：具体的问题</li><li><code>Vaildate</code>：回答的验证方法</li><li><code>Transform</code>：自动更改格式</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">qs := []*survey.Question&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    Name:      <span class="string">"name"</span>,</span><br><span class="line">    Prompt:    &amp;survey.Input&#123;Message: <span class="string">"What is your name?"</span>&#125;,</span><br><span class="line">    Validate:  survey.Required,</span><br><span class="line">    Transform: survey.Title,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    Name: <span class="string">"color"</span>,</span><br><span class="line">    Prompt: &amp;survey.Select&#123;</span><br><span class="line">      Message: <span class="string">"Choose a color:"</span>,</span><br><span class="line">      Options: []<span class="keyword">string</span>&#123;<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>&#125;,</span><br><span class="line">      Default: <span class="string">"red"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    Name:   <span class="string">"age"</span>,</span><br><span class="line">    Prompt: &amp;survey.Input&#123;Message: <span class="string">"How old are you?"</span>&#125;,</span><br><span class="line">    Validate: <span class="function"><span class="keyword">func</span><span class="params">(val <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">      _, err := strconv.Atoi(val.(<span class="keyword">string</span>))</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"not number"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">answers := <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name          <span class="keyword">string</span> <span class="comment">// survey will match the question and field names</span></span><br><span class="line">  FavoriteColor <span class="keyword">string</span> <span class="string">`survey:"color"`</span> <span class="comment">// or you can tag fields to match a specific name</span></span><br><span class="line">  Age           <span class="keyword">int</span>    <span class="comment">// if the types don't match, survey will convert it</span></span><br><span class="line">&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// perform the questions</span></span><br><span class="line">err := survey.Ask(qs, &amp;answers)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  fmt.Println(err.Error())</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241226020405076.png" alt="image-20241226020405076" style="zoom:67%;" /></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/AlecAivazis/survey" target="_blank" rel="noopener">https://github.com/AlecAivazis/survey</a></li><li><a href="https://pkg.go.dev/github.com/AlecAivazis/survey/v2#section-readme" target="_blank" rel="noopener">https://pkg.go.dev/github.com/AlecAivazis/survey/v2#section-readme</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Go 交互式命令行工具库，提供了包括文本输入、选择菜单、确认提示、多项选择等多种交互类型，帮助快速构建交互式命令行页面。&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://gy23333.github.io/categories/Golang/"/>
    
    
    <category term="Golang" scheme="https://gy23333.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>IPIP隧道</title>
    <link href="https://gy23333.github.io/2024/12/07/IPIP%E9%9A%A7%E9%81%93/"/>
    <id>https://gy23333.github.io/2024/12/07/IPIP%E9%9A%A7%E9%81%93/</id>
    <published>2024-12-06T16:47:53.000Z</published>
    <updated>2025-04-15T17:05:29.048Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a id="more"></a><h1 id="IPIP"><a href="#IPIP" class="headerlink" title="IPIP"></a>IPIP</h1><h1 id="scapy-构建-IPIP-包"><a href="#scapy-构建-IPIP-包" class="headerlink" title="scapy 构建 IPIP 包"></a>scapy 构建 IPIP 包</h1><p>tcpdump -i ens160 -nn -v ‘ip proto 4’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 外层IP头</span><br><span class="line">outer_ip &#x3D; IP(src&#x3D;&quot;192.168.1.1&quot;, dst&#x3D;&quot;192.168.1.2&quot;, proto&#x3D;4)  # proto&#x3D;4表示IPIP</span><br><span class="line"></span><br><span class="line"># 内层IP头</span><br><span class="line">inner_ip &#x3D; IP(src&#x3D;&quot;10.0.0.1&quot;, dst&#x3D;&quot;10.0.0.2&quot;)</span><br><span class="line"></span><br><span class="line"># 内层负载数据</span><br><span class="line">payload &#x3D; &quot;This is the payload&quot;</span><br><span class="line"></span><br><span class="line"># 组合成IPIP包</span><br><span class="line">ipip_packet &#x3D; outer_ip&#x2F;inner_ip&#x2F;payload</span><br><span class="line"></span><br><span class="line"># 发送数据包</span><br><span class="line">send(ipip_packet)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sendp(Ether(src&#x3D;&quot;00:0c:29:4e:e5:7b&quot;, dst&#x3D;&quot;00:0c:29:4e:e5:7a&quot;)&#x2F;IP(src&#x3D;&quot;192.168.1.1&quot;, dst&#x3D;&quot;172.16.19.137&quot;, proto&#x3D;4)&#x2F;IP(src&#x3D;&quot;10.0.0.1&quot;, dst&#x3D;&quot;10.0.0.2&quot;)&#x2F;&quot;This is the payload&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>IPv6</title>
    <link href="https://gy23333.github.io/2024/12/07/IPv6/"/>
    <id>https://gy23333.github.io/2024/12/07/IPv6/</id>
    <published>2024-12-06T16:47:16.000Z</published>
    <updated>2025-02-18T17:24:18.406Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>IPv6 是网络层协议的第二代标准协议，将 IP 地址长度从原来的 32 位升级为 128 位，从根本上解决了 IP 地址耗尽的问题。</p><a id="more"></a><h1 id="IPv6-地址"><a href="#IPv6-地址" class="headerlink" title="IPv6 地址"></a>IPv6 地址</h1><p>IPv6 地址由 128 位二进制数组成，书写时采用十六进制，分为 8 组，组之间用 <code>:</code> 分开，每组 16 位，用 4 个十六进制表示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX</span><br></pre></td></tr></table></figure><p>比如 <code>2001:00b8:130F:0000:0000:09C0:0000:0000</code></p><h1 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h1><p>如 IPv6 地址 <code>2001:00b8:130F:0000:0000:09C0:0000:0000</code></p><ol><li><p>每组前半部分的 <code>0</code> 可省去，<code>0000</code> 可简写为 <code>0</code></p><p><code>2001:b8:130F:0:0:9C0:0:0</code></p></li><li><p>连续的 <code>0</code> 可以用 <code>::</code> 缩写（只能用一个 <code>::</code>，且缩最前面那个连续 <code>0</code>）</p><p><code>2001:b8:130F::9C0:0:0</code></p></li></ol><h1 id="IPv4-转-IPv6"><a href="#IPv4-转-IPv6" class="headerlink" title="IPv4 转 IPv6"></a>IPv4 转 IPv6</h1><p>原 IPv4 地址转 IPv6 采用 <code>0:0:0:0:0:FFFF:IPv4-address</code> 格式。</p><p>如 <code>172.17.0.3</code> 变成 <code>0:0:0:0:0:FFFF:172.17.0.3</code></p><h1 id="地址结构"><a href="#地址结构" class="headerlink" title="地址结构"></a>地址结构</h1><p>IPv6 地址可以划分为两个部分：网络前缀、接口标识</p><ul><li>网络前缀：前 n 位划分为网络前缀，类似于 IPv4 中的网络号，一般推荐使用 64 位</li><li>接口标识：后 128-n 位划分为网络前缀，类似于 IPv4 中的主机号</li></ul><p>如 <code>2001:db8:130F:0000:0000:09C0:876A:130B/64</code>，<code>/</code> 后数字表示网络前缀的长度</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20250219010228278.png" alt="image-20250219010228278" style="zoom:67%;" /></p><h1 id="地址划分"><a href="#地址划分" class="headerlink" title="地址划分"></a>地址划分</h1><p>按照目的地址，可以将 IPv6 地址划分成下面三种类型：</p><ul><li>单播地址：唯一标识一个接口，和 IPv4 单播一样，点对点的通信。</li><li>组播地址：一点对多点的通信，和 IPv4 组播一样，发送到组播地址的数据包被传输给此地址所标识的所有接口。</li><li>任播地址：IPv6 相比 IPv4 新增地址类型，发送到任播地址的数据包被传输给此地址所标识的一组接口中距离源节点最近的一个接口。</li><li>IPv6 不支持广播，广播地址的功能均由组播地址来提供。IPv4 依赖 BGP 来实现任播。</li></ul><p>IPv6 单播地址又可分为</p><div class="table-container"><table><thead><tr><th>地址类型</th><th>二进制前缀</th><th>IPv6前缀标识</th></tr></thead><tbody><tr><td>链路本地单播地址</td><td>1111111010</td><td>FE80::/10</td></tr><tr><td>唯一本地地址</td><td>1111110</td><td>FC00::/7</td></tr><tr><td>环回地址</td><td>00…1 (128 bits)</td><td>::1/128</td></tr><tr><td>未指定地址</td><td>00…0 (128 bits)</td><td>::/128</td></tr><tr><td>全球单播地址</td><td>其他</td><td>-</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;IPv6 是网络层协议的第二代标准协议，将 IP 地址长度从原来的 32 位升级为 128 位，从根本上解决了 IP 地址耗尽的问题。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux日志管理工具--logrotate</title>
    <link href="https://gy23333.github.io/2024/12/07/Linux%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-logrotate/"/>
    <id>https://gy23333.github.io/2024/12/07/Linux%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-logrotate/</id>
    <published>2024-12-06T16:45:51.000Z</published>
    <updated>2024-12-16T05:23:49.137Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>logrotate 是 Linux 系统中用来管理日志的工具，通过配置可以实现日志的自动轮转、压缩、删除、邮件发送功能。</p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>logrotate 提供了日志的自动轮转、压缩、删除、邮件发送能力，可以设置定期或者限制文件大小来触发。</p><p>一般来说，logrotate 都是作为每日的定时任务运行，一般不会一天内处理多次，除非触发条件是基于文件的大小并且设置 logrotate 一天执行多次，或者在执行时使用强制选项 <code>-f</code></p><h1 id="logrotate-命令"><a href="#logrotate-命令" class="headerlink" title="logrotate 命令"></a>logrotate 命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logrotate [OPTION...] &lt;configfile&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>-d</code>, <code>--debug</code>：以调试模式运行，打印出详细的调试信息，但不执行任何轮转操作</p></li><li><p><code>-f</code>, <code>--force</code>：强制执行日志轮转，即使不符合轮转条件</p></li><li><p><code>-v</code>, <code>--verbose</code>：在轮转时显示更多信息</p></li><li><p><code>-s</code>, <code>--state=statefile</code>：指定一个状态文件来记录日志轮转的历史状态，默认状态文件是 /var/lib/logrotate/status</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logrotate -s &#x2F;var&#x2F;log&#x2F;logrotate.status &#x2F;etc&#x2F;logrotate.conf</span><br></pre></td></tr></table></figure></li><li><p><code>-l</code>, <code>--log=logfile</code>：指定 logrotate 日志记入的日志文件</p></li><li><p><code>-m</code>, <code>--mail=command</code>：指定发送邮件的命令</p></li></ul><h1 id="logrotate-定时任务"><a href="#logrotate-定时任务" class="headerlink" title="logrotate 定时任务"></a>logrotate 定时任务</h1><h2 id="logrotate-配置文件"><a href="#logrotate-配置文件" class="headerlink" title="logrotate 配置文件"></a>logrotate 配置文件</h2><p>将 logrotate 配置文件按路径不同分为下面三种：</p><ul><li><code>/etc/logrotate.conf</code></li><li><code>/etc/logrotate.d/</code></li><li>其他路径</li></ul><h1 id="logrotate-配置"><a href="#logrotate-配置" class="headerlink" title="logrotate 配置"></a>logrotate 配置</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://linux.die.net/man/8/logrotate" target="_blank" rel="noopener">logrotate 官方文档</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;logrotate 是 Linux 系统中用来管理日志的工具，通过配置可以实现日志的自动轮转、压缩、删除、邮件发送功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://gy23333.github.io/categories/Linux/"/>
    
    
    <category term="logrotate" scheme="https://gy23333.github.io/tags/logrotate/"/>
    
  </entry>
  
  <entry>
    <title>基于FRRouting/Bird的OSPF组网及负载均衡实现</title>
    <link href="https://gy23333.github.io/2024/12/07/%E5%9F%BA%E4%BA%8EFRRouting-Bird%E7%9A%84OSPF%E7%BB%84%E7%BD%91%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0/"/>
    <id>https://gy23333.github.io/2024/12/07/%E5%9F%BA%E4%BA%8EFRRouting-Bird%E7%9A%84OSPF%E7%BB%84%E7%BD%91%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-12-06T16:36:31.000Z</published>
    <updated>2024-12-09T13:33:38.863Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>基于 FRRouting/Bird 配置多虚拟机之间的 OSPF 组网（建邻、路由交换），并实现多路径负载均衡。</p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>FRRouting、Bird 都是常用的开源路由软件，支持 OSPF 协议。本文采用 FRRouting 作为两台 DNS Server 的路由发布器，Bird 作为 DR 兼 Client 的路由软件（在实际测试环境中，可以使用其中任一款软件来实现 OSPF 的组网），通过 FRRouting 发布 VIP，实现 OSPF 场景下的多路径负载均衡。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="1、创建三台虚拟机，每台虚拟机至少有一张可用的网卡"><a href="#1、创建三台虚拟机，每台虚拟机至少有一张可用的网卡" class="headerlink" title="1、创建三台虚拟机，每台虚拟机至少有一张可用的网卡"></a>1、创建三台虚拟机，每台虚拟机至少有一张可用的网卡</h2><p>安装 Linux 虚拟机，本文安装了三台 Ubuntu 24.04.1，安装过程参考 <a href="https://gy23333.github.io/2023/03/19/Linux学习/#Linux虚拟机的安装">Mac安装虚拟机</a></p><h2 id="2、在其中一台虚拟机上安装-bird"><a href="#2、在其中一台虚拟机上安装-bird" class="headerlink" title="2、在其中一台虚拟机上安装 bird"></a>2、在其中一台虚拟机上安装 bird</h2><p><a href="https://gy23333.github.io/2024/12/03/bird/#安装-bird">bird安装方法</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bird2</span><br></pre></td></tr></table></figure><h2 id="3、在另外两台虚拟机上安装-FRRouting-以及-Coredns"><a href="#3、在另外两台虚拟机上安装-FRRouting-以及-Coredns" class="headerlink" title="3、在另外两台虚拟机上安装 FRRouting 以及 Coredns"></a>3、在另外两台虚拟机上安装 FRRouting 以及 Coredns</h2><p><a href="https://gy23333.github.io/2024/09/19/FRRouting/">FRRouting安装方法</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install frr</span><br></pre></td></tr></table></figure><p>Coredns 下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;coredns&#x2F;coredns&#x2F;releases&#x2F;download&#x2F;v1.12.0&#x2F;coredns_1.12.0_linux_arm64.tgz</span><br><span class="line">tar -zxvf coredns_1.12.0_linux_arm64.tgz</span><br><span class="line">sudo mv coredns &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coredns --version</span><br></pre></td></tr></table></figure><h1 id="OSPF-建邻"><a href="#OSPF-建邻" class="headerlink" title="OSPF 建邻"></a>OSPF 建邻</h1><p>目标：以 Bird 节点作为 DR，实现 3 台虚拟机的建邻组网。</p><h2 id="FRRouting-配置-OSPF"><a href="#FRRouting-配置-OSPF" class="headerlink" title="FRRouting 配置 OSPF"></a>FRRouting 配置 OSPF</h2><h3 id="开启-ospfd-进程"><a href="#开启-ospfd-进程" class="headerlink" title="开启 ospfd 进程"></a>开启 ospfd 进程</h3><ol><li><p>修改 daemons 文件，默认位置在 <code>/etc/frr/daemons</code>，将 ospfd 开关打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ospfd&#x3D;yes</span><br></pre></td></tr></table></figure></li><li><p>重启 FRR，查看 ospfd 进程是否正常启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart frr</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2:~<span class="variable">$</span> systemctl status frr</span><br><span class="line">● frr.service - FRRouting</span><br><span class="line">     Loaded: loaded (/etc/systemd/system/frr.service; enabled; preset: enabled)</span><br><span class="line">     Active: active (running) since Sun <span class="number">2024</span><span class="literal">-12</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">09</span> UTC; <span class="number">5</span>s ago</span><br><span class="line">       Docs: https://frrouting.readthedocs.io/en/latest/setup.html</span><br><span class="line">    <span class="keyword">Process</span>: <span class="number">39653</span> ExecStart=/usr/lib/frr/frrinit.sh start (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line">   Main PID: <span class="number">39664</span> (watchfrr)</span><br><span class="line">     Status: <span class="string">"FRR Operational"</span></span><br><span class="line">      Tasks: <span class="number">10</span> (limit: <span class="number">4550</span>)</span><br><span class="line">     Memory: <span class="number">18.6</span>M (peak: <span class="number">32.1</span>M)</span><br><span class="line">        CPU: <span class="number">117</span>ms</span><br><span class="line">     CGroup: /system.slice/frr.service</span><br><span class="line">             ├─<span class="number">39664</span> /usr/lib/frr/watchfrr <span class="literal">-d</span> <span class="operator">-F</span> traditional zebra mgmtd ospfd staticd</span><br><span class="line">             ├─<span class="number">39676</span> /usr/lib/frr/zebra <span class="literal">-d</span> <span class="operator">-F</span> traditional <span class="literal">-A</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="literal">-s</span> <span class="number">90000000</span></span><br><span class="line">             ├─<span class="number">39681</span> /usr/lib/frr/mgmtd <span class="literal">-d</span> <span class="operator">-F</span> traditional <span class="literal">-A</span> <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">             ├─<span class="number">39683</span> /usr/lib/frr/ospfd <span class="literal">-d</span> <span class="operator">-F</span> traditional <span class="literal">-A</span> <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">             └─<span class="number">39686</span> /usr/lib/frr/staticd <span class="literal">-d</span> <span class="operator">-F</span> traditional <span class="literal">-A</span> <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">Dec <span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">09</span> ubuntu2 frrinit.sh[<span class="number">39693</span>]: [<span class="number">39693</span>|<span class="type">ospfd</span>] done</span><br><span class="line">Dec <span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">09</span> ubuntu2 staticd[<span class="number">39686</span>]: [<span class="type">VTVCM</span>-<span class="type">Y2NW3</span>] Configuration Read <span class="keyword">in</span> Took: <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Dec <span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">09</span> ubuntu2 frrinit.sh[<span class="number">39706</span>]: [<span class="number">39706</span>|<span class="type">staticd</span>] done</span><br><span class="line">Dec <span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">09</span> ubuntu2 watchfrr[<span class="number">39664</span>]: [<span class="type">QDG3Y</span>-<span class="type">BY5TN</span>] zebra state -&gt; up : connect succeeded</span><br><span class="line">Dec <span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">09</span> ubuntu2 frrinit.sh[<span class="number">39653</span>]:  * Started watchfrr</span><br><span class="line">Dec <span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">09</span> ubuntu2 watchfrr[<span class="number">39664</span>]: [<span class="type">QDG3Y</span>-<span class="type">BY5TN</span>] mgmtd state -&gt; up : connect succeeded</span><br><span class="line">Dec <span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">09</span> ubuntu2 watchfrr[<span class="number">39664</span>]: [<span class="type">QDG3Y</span>-<span class="type">BY5TN</span>] ospfd state -&gt; up : connect succeeded</span><br><span class="line">Dec <span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">09</span> ubuntu2 watchfrr[<span class="number">39664</span>]: [<span class="type">QDG3Y</span>-<span class="type">BY5TN</span>] staticd state -&gt; up : connect succeeded</span><br><span class="line">Dec <span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">09</span> ubuntu2 watchfrr[<span class="number">39664</span>]: [<span class="type">KWE5Q</span>-<span class="type">QNGFC</span>] all daemons up, doing startup<span class="literal">-complete</span> notify</span><br><span class="line">Dec <span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">09</span> ubuntu2 systemd[<span class="number">1</span>]: Started frr.service - FRRouting.</span><br></pre></td></tr></table></figure></li></ol><h3 id="FRR-配置"><a href="#FRR-配置" class="headerlink" title="FRR 配置"></a>FRR 配置</h3><p>该 FRR 节点网卡信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">guoyi@ubuntu2:~<span class="variable">$</span> ip a</span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::<span class="number">1</span>/<span class="number">128</span> scope host noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">62</span>:<span class="number">77</span>:<span class="number">76</span> brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp2s0</span><br><span class="line">    inet <span class="number">172.16</span>.<span class="number">19.131</span>/<span class="number">24</span> metric <span class="number">100</span> brd <span class="number">172.16</span>.<span class="number">19.255</span> scope global dynamic ens160</span><br><span class="line">       valid_lft <span class="number">1194</span>sec preferred_lft <span class="number">1194</span>sec</span><br><span class="line">    inet6 fe80::<span class="number">20</span>c:<span class="number">29</span>ff:fe62:<span class="number">7776</span>/<span class="number">64</span> scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>使用 ens160 网卡作为 OSPF 网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">!</span><br><span class="line">interface ens160</span><br><span class="line"> ip ospf area 0.0.0.0</span><br><span class="line"> ip ospf dead-interval 20</span><br><span class="line"> ip ospf hello-interval 5</span><br><span class="line"> ip ospf priority 0</span><br><span class="line">exit</span><br><span class="line">!</span><br><span class="line">router ospf</span><br><span class="line"> ospf router-id 172.16.19.131</span><br><span class="line">exit</span><br><span class="line">!</span><br></pre></td></tr></table></figure><ul><li><code>ip ospf area 0.0.0.0</code> <ul><li>将该网卡配置为 OSPF 网卡，并设置 area 为 <code>0.0.0.0</code> </li><li>也可在 <code>router ospf</code> 下配置 <code>network 172.16.19.0/24 area 0.0.0.0</code>，但此配置会将所有该网段的网卡设置为 OSPF 网卡</li></ul></li><li><code>ip ospf dead-interval 20</code>、<code>ip ospf hello-interval 5</code><ul><li>设置 hello 和 dead 的时间间隔</li><li>需建邻的所有节点这两个配置需相同</li></ul></li><li><code>ip ospf priority 0</code><ul><li>此节点不竞选 DR/BDR</li></ul></li><li><code>ospf router-id 172.16.19.131</code><ul><li>area 内该 OSPF 节点的唯一标识，一般用网卡 IP 来表示</li></ul></li></ul><h2 id="Bird-配置-OSPF"><a href="#Bird-配置-OSPF" class="headerlink" title="Bird 配置 OSPF"></a>Bird 配置 OSPF</h2><p>使用 ens256 网卡作为 OSPF 网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protocol ospf v2 &#123;</span><br><span class="line">        area 0 &#123;</span><br><span class="line">                interface &quot;ens256&quot; &#123;</span><br><span class="line">                        priority 1;</span><br><span class="line">                        hello 10;</span><br><span class="line">                        dead 40;</span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>priority 1</code><ul><li>参与竞选，且优先级最高</li></ul></li></ul><h2 id="查看建邻"><a href="#查看建邻" class="headerlink" title="查看建邻"></a>查看建邻</h2><p>BIRD 节点作为 DR，查看其他的节点状态，均建邻成功（Full）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bird&gt; show ospf neighbors</span><br><span class="line">ospf1:</span><br><span class="line">Router ID       Pri          State      DTime   Interface  Router IP</span><br><span class="line">172.16.19.131     0     Full&#x2F;Other      17.621  ens256     172.16.19.131</span><br><span class="line">172.16.19.132     0     Full&#x2F;Other      19.486  ens256     172.16.19.132</span><br></pre></td></tr></table></figure><p>FRRouting 节点作为 Other，只需与 DR 节点建邻成功，Other 节点之间处于 2-Way 状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu2# show ip ospf neighbor</span><br><span class="line"></span><br><span class="line">Neighbor ID     Pri State           Up Time         Dead Time Address         Interface                        RXmtL RqstL DBsmL</span><br><span class="line">172.16.19.129     1 Full&#x2F;DR         3m18s             16.350s 172.16.19.130   ens160:172.16.19.131                 0     0     0</span><br><span class="line">172.16.19.132     0 2-Way&#x2F;DROther   3m49s             15.307s 172.16.19.132   ens160:172.16.19.131                 0     0     0</span><br></pre></td></tr></table></figure><h2 id="非默认路由网卡建邻问题"><a href="#非默认路由网卡建邻问题" class="headerlink" title="非默认路由网卡建邻问题"></a>非默认路由网卡建邻问题</h2><p>使用非默认路由网卡作为 OSPF 网卡时，如开启严格的反向路由检查，收到的组播 224.0.0.5 的 hello 包会被 rp_filter 过滤掉，导致 ospfd 进程无法收到 hello 包，也就无法建邻。</p><p>解决方法：关闭或使用 loose 的反向路由检查。详细参考：<a href="https://gy23333.github.io/2024/11/22/rp-filter反向路由过滤/">rp_filter反向路由过滤</a></p><h1 id="OSPF-多路径负载均衡"><a href="#OSPF-多路径负载均衡" class="headerlink" title="OSPF 多路径负载均衡"></a>OSPF 多路径负载均衡</h1><p>OSPF 支持多路径的负载均衡，如两台 DNS Server，使用同样的 VIP，通过 OSPF 路由可以实现流量的负载均衡。</p><h2 id="FRRouting-发布-VIP"><a href="#FRRouting-发布-VIP" class="headerlink" title="FRRouting 发布 VIP"></a>FRRouting 发布 VIP</h2><p>添加并开启虚拟网卡 vip_if0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ip link add vip_if0 type dummy</span><br><span class="line">sudo ip link set vip_if0 up</span><br></pre></td></tr></table></figure><p>FRR 配置 vip_if0 网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!</span><br><span class="line">interface vip_if0</span><br><span class="line"> ip address 10.0.0.10&#x2F;32</span><br><span class="line"> ip ospf area 0.0.0.0</span><br><span class="line">exit</span><br><span class="line">!</span><br></pre></td></tr></table></figure><ul><li><code>ip address 10.0.0.10/32</code><ul><li>添加 <code>10.0.0.10/32</code> 作为 VIP</li></ul></li><li><code>ip ospf area 0.0.0.0</code><ul><li>设置 vip_if0 为 OSPF 网卡，但此虚拟网卡实际无法建邻</li></ul></li></ul><h2 id="BIRD-添加路由"><a href="#BIRD-添加路由" class="headerlink" title="BIRD 添加路由"></a>BIRD 添加路由</h2><p>检查 BIRD 配置是否支持路由导出以及多路径路由</p><ol><li><p>确认 BIRD 开启将学到的路由导出到内核路由表，确认 <code>export all;</code> 开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protocol kernel &#123;</span><br><span class="line">        ipv4 &#123;                  # Connect protocol to IPv4 table by channel</span><br><span class="line">#             table master4;    # Default IPv4 table is master4</span><br><span class="line">#             import all;       # Import to table, default is import all</span><br><span class="line">              export all;       # Export to protocol. default is export none</span><br><span class="line">        &#125;;</span><br><span class="line">#       learn;                  # Learn alien routes from the kernel</span><br><span class="line">#       kernel table 10;        # Kernel table to synchronize with (default: main)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确认 OSPF 开启 ecmp，以支持 OSPF 多路径。ecmp 默认（不填写）为开启状态，limit 默认 16</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protocol ospf v2 &#123;</span><br><span class="line">        ecmp &lt;switch&gt; [limit &lt;num&gt;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>查看 BIRD 是否学习到 VIP 路由，可以看到已经学习到了该 VIP 的两条路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bird&gt; show route</span><br><span class="line">Table master4:</span><br><span class="line">10.0.0.10&#x2F;32         unicast [ospf1 05:38:47.681] * I (150&#x2F;20) [172.16.19.132]</span><br><span class="line">        via 172.16.19.131 on ens256 weight 1</span><br><span class="line">        via 172.16.19.132 on ens256 weight 1</span><br><span class="line">172.16.19.0&#x2F;24       unicast [ospf1 04:35:44.681] * I (150&#x2F;10) [172.16.19.129]</span><br><span class="line">        dev ens256</span><br></pre></td></tr></table></figure><p>查看是否导入到了 Linux 路由表</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:/home/guoyi/workplace<span class="comment"># ip route show</span></span><br><span class="line">...</span><br><span class="line"><span class="number">10.0</span>.<span class="number">0.10</span> proto bird metric <span class="number">32</span></span><br><span class="line">        nexthop via <span class="number">172.16</span>.<span class="number">19.131</span> dev ens256 weight <span class="number">1</span></span><br><span class="line">        nexthop via <span class="number">172.16</span>.<span class="number">19.132</span> dev ens256 weight <span class="number">1</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="配置并运行-Coredns"><a href="#配置并运行-Coredns" class="headerlink" title="配置并运行 Coredns"></a>配置并运行 Coredns</h2><ol><li><p>添加 Coredns 配置及域名解析</p><p>/etc/coredns/Corefile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">example.com &#123;</span><br><span class="line">    log</span><br><span class="line">    file &#x2F;etc&#x2F;coredns&#x2F;db.example.com</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/etc/coredns/db.example.com</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$TTL 3600</span><br><span class="line">@   IN  SOA ns.example.com. admin.example.com. (</span><br><span class="line">        1   ; Serial</span><br><span class="line">        3600    ; Refresh</span><br><span class="line">        1800    ; Retry</span><br><span class="line">        604800  ; Expire</span><br><span class="line">        86400 ) ; Minimum TTL</span><br><span class="line"></span><br><span class="line">@   IN  NS  ns.example.com.</span><br><span class="line">@   IN  A   192.168.1.10</span><br><span class="line">ns  IN  A   192.168.1.10</span><br></pre></td></tr></table></figure></li><li><p>停止 systemd-resolve</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop systemd-resolved</span><br></pre></td></tr></table></figure></li><li><p>运行 Coredns</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coredns -conf &#x2F;etc&#x2F;coredns&#x2F;Corefile</span><br></pre></td></tr></table></figure></li><li><p>检查 Coredns 是否正常</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">guoyi@ubuntu2:~<span class="variable">$</span> dig @<span class="number">127.0</span>.<span class="number">0.1</span> example.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG <span class="number">9.18</span>.<span class="number">28</span><span class="literal">-0ubuntu0</span>.<span class="number">24.04</span>.<span class="number">1</span><span class="literal">-Ubuntu</span> &lt;&lt;&gt;&gt; @<span class="number">127.0</span>.<span class="number">0.1</span> example.com</span><br><span class="line">; (<span class="number">1</span> server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: <span class="number">45115</span></span><br><span class="line">;; flags: qr aa rd; QUERY: <span class="number">1</span>, ANSWER: <span class="number">1</span>, AUTHORITY: <span class="number">1</span>, ADDITIONAL: <span class="number">1</span></span><br><span class="line">;; WARNING: recursion requested but not available</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: <span class="number">0</span>, flags:; udp: <span class="number">1232</span></span><br><span class="line">; COOKIE: a29f8e8fa133c213 (echoed)</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;example.com.                   <span class="keyword">IN</span>      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">example.com.            <span class="number">3600</span>    <span class="keyword">IN</span>      A       <span class="number">192.168</span>.<span class="number">1.10</span></span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">example.com.            <span class="number">3600</span>    <span class="keyword">IN</span>      NS      ns.example.com.</span><br><span class="line"></span><br><span class="line">;; Query time: <span class="number">0</span> msec</span><br><span class="line">;; SERVER: <span class="number">127.0</span>.<span class="number">0.1</span><span class="comment">#53(127.0.0.1) (UDP)</span></span><br><span class="line">;; WHEN: Mon Dec <span class="number">09</span> <span class="number">12</span>:<span class="number">50</span>:<span class="number">07</span> UTC <span class="number">2024</span></span><br><span class="line">;; MSG SIZE  rcvd: <span class="number">118</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="打流"><a href="#打流" class="headerlink" title="打流"></a>打流</h2><p>在 BIRD 节点通过 dig VIP 打流，查看两个 Coredns 服务器日志是否负载均衡承接流量。</p><ol><li><p>打流前先确认 BIRD 节点内核配置 <code>net.ipv4.fib_multipath_hash_policy</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl <span class="literal">-a</span> | grep net.ipv4.fib_multipath_hash_policy</span><br></pre></td></tr></table></figure><p>该配置设置了多路径路由哈希策略，相同元组的包在多路径下会选择同一路径</p><ul><li><code>net.ipv4.fib_multipath_hash_policy=0</code>：{src_ip,  dst_ip}</li><li><code>net.ipv4.fib_multipath_hash_policy=1</code>：{src_ip,  src_port , dst_ip, dst_port, proto}</li></ul><p>需将 <code>net.ipv4.fib_multipath_hash_policy</code> 设置为 1</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl <span class="literal">-w</span> net.ipv4.fib_multipath_hash_policy=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>在 BIRD 节点打流到 VIP</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">1000</span>&#125;; <span class="keyword">do</span> dig @<span class="number">10.0</span>.<span class="number">0.10</span> example.com; done</span><br></pre></td></tr></table></figure><p>查看两个 Coredns 节点日志，可以看到两节点平分了 VIP 的流量</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241209210934934.png" alt=""></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;基于 FRRouting/Bird 配置多虚拟机之间的 OSPF 组网（建邻、路由交换），并实现多路径负载均衡。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机网络" scheme="https://gy23333.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="FRRouting" scheme="https://gy23333.github.io/tags/FRRouting/"/>
    
    <category term="BIRD" scheme="https://gy23333.github.io/tags/BIRD/"/>
    
  </entry>
  
  <entry>
    <title>bird</title>
    <link href="https://gy23333.github.io/2024/12/03/bird/"/>
    <id>https://gy23333.github.io/2024/12/03/bird/</id>
    <published>2024-12-03T05:03:54.000Z</published>
    <updated>2024-12-09T13:14:57.909Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>bird</p><a id="more"></a><h1 id="安装-BIRD"><a href="#安装-BIRD" class="headerlink" title="安装 BIRD"></a>安装 BIRD</h1><p>Ubuntu 安装 bird</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bird2</span><br></pre></td></tr></table></figure><p>检查 bird 是否安装成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">guoyi@ubuntu2404:~<span class="variable">$</span> systemctl status bird</span><br><span class="line">● bird.service - BIRD Internet Routing Daemon</span><br><span class="line">     Loaded: loaded (/usr/lib/systemd/system/bird.service; enabled; preset: enabled)</span><br><span class="line">     Active: active (running) since Tue <span class="number">2024</span><span class="literal">-12</span><span class="literal">-03</span> <span class="number">05</span>:<span class="number">05</span>:<span class="number">57</span> UTC; <span class="number">5</span> days ago</span><br><span class="line">   Main PID: <span class="number">28186</span> (bird)</span><br><span class="line">      Tasks: <span class="number">1</span> (limit: <span class="number">4542</span>)</span><br><span class="line">     Memory: <span class="number">924.0</span>K (peak: <span class="number">1.9</span>M)</span><br><span class="line">        CPU: <span class="number">4.824</span>s</span><br><span class="line">     CGroup: /system.slice/bird.service</span><br><span class="line">             └─<span class="number">28186</span> /usr/sbin/bird <span class="operator">-f</span> <span class="literal">-u</span> bird <span class="literal">-g</span> bird</span><br><span class="line"></span><br><span class="line">Dec <span class="number">03</span> <span class="number">05</span>:<span class="number">05</span>:<span class="number">57</span> ubuntu2404 systemd[<span class="number">1</span>]: Starting bird.service - BIRD Internet Routing Daemon...</span><br><span class="line">Dec <span class="number">03</span> <span class="number">05</span>:<span class="number">05</span>:<span class="number">57</span> ubuntu2404 systemd[<span class="number">1</span>]: Started bird.service - BIRD Internet Routing Daemon.</span><br><span class="line">Dec <span class="number">03</span> <span class="number">05</span>:<span class="number">05</span>:<span class="number">57</span> ubuntu2404 (bird)[<span class="number">28186</span>]: bird.service: Referenced but unset environment variable evaluates to an emp&gt;</span><br><span class="line">Dec <span class="number">03</span> <span class="number">05</span>:<span class="number">05</span>:<span class="number">57</span> ubuntu2404 bird[<span class="number">28186</span>]: Chosen router ID <span class="number">172.16</span>.<span class="number">19.129</span> according to interface ens160</span><br><span class="line">Dec <span class="number">03</span> <span class="number">05</span>:<span class="number">05</span>:<span class="number">57</span> ubuntu2404 bird[<span class="number">28186</span>]: Started</span><br></pre></td></tr></table></figure><h1 id="birdc-命令"><a href="#birdc-命令" class="headerlink" title="birdc 命令"></a>birdc 命令</h1><p>通过 <code>birdc</code> 进入</p><ul><li><p>重新加载配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure</span><br></pre></td></tr></table></figure></li><li><p>查看路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show route</span><br></pre></td></tr></table></figure></li><li><p>查看 OSPF 邻居节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show ospf neighbors</span><br></pre></td></tr></table></figure></li></ul><h1 id="BIRD-配置"><a href="#BIRD-配置" class="headerlink" title="BIRD 配置"></a>BIRD 配置</h1><p>默认配置路径 <code>/etc/bird/bird.conf</code></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://bird.xmsl.dev" target="_blank" rel="noopener">BIRD 中文文档</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;bird&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>rp_filter反向路由过滤</title>
    <link href="https://gy23333.github.io/2024/11/22/rp-filter%E5%8F%8D%E5%90%91%E8%B7%AF%E7%94%B1%E8%BF%87%E6%BB%A4/"/>
    <id>https://gy23333.github.io/2024/11/22/rp-filter%E5%8F%8D%E5%90%91%E8%B7%AF%E7%94%B1%E8%BF%87%E6%BB%A4/</id>
    <published>2024-11-22T15:54:54.000Z</published>
    <updated>2024-11-24T18:37:03.879Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Reverse Path Filtering，Linux 内核对接收到的数据包的反向路由校验过滤，主要用于防止 IP 地址欺骗攻击。本文主要介绍该校验机制、系统配置方式以及过滤包查看方法。</p><a id="more"></a><h1 id="反向路由校验机制"><a href="#反向路由校验机制" class="headerlink" title="反向路由校验机制"></a>反向路由校验机制</h1><p>反向路由校验，即在网卡收到数据包后，校验该数据包的反向路由是否匹配，如不匹配，则丢弃该包。具体流程如下：</p><ol><li>对于网卡收到的数据包，Linux 内核会检查该数据包的源 IP</li><li>参照当前的路由表，判断如以该数据包的源 IP 作为目的 IP，返回路径的路由选择是否与当前接收接口一致</li><li>如不一致，则认为该数据包可能是伪造的，丢弃该数据包</li></ol><p>如下图，eth1 网卡开启了严格的 rp_filter 检查，此时 eth1 网卡收到源 IP 为 <code>172.16.19.24</code> 的包，rp_filter 检查如果以 <code>172.16.19.24</code> 为目的 IP，根据路由表，匹配的网卡应该为 eth0，而不是收到包的 eth1，因此判断该数据包可能伪造源 IP，丢弃该包。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241124140220970.png" alt="image-20241124140220970" style="zoom: 50%;" /></p><h1 id="Linux-内核参数"><a href="#Linux-内核参数" class="headerlink" title="Linux 内核参数"></a>Linux 内核参数</h1><h2 id="net-ipv4-conf-XXX-rp-filter"><a href="#net-ipv4-conf-XXX-rp-filter" class="headerlink" title="net.ipv4.conf.XXX.rp_filter"></a><code>net.ipv4.conf.XXX.rp_filter</code></h2><p><a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/networking/ip-sysctl.txt?h=v4.9#n1090" target="_blank" rel="noopener">Linux 内核参数详解</a></p><p>rp_filter 为 Linux 用于设置反向路由校验机制的内核参数，共有三种可配置值 0、1、2，</p><ul><li><code>rp_filter = 0</code>：关闭反向路由校验。</li><li><code>rp_filter = 1</code>：开启严格的反向路由校验。如果反向路由不是最佳路由，则丢弃该包。</li><li><code>rp_filter = 2</code>：开启松散的反向路由校验。对于收到的数据包，只检查其源 IP 是否可达，即反向路由是否可通（任意网卡均可），如果反向路径不通，则丢弃该包。</li></ul><p>rp_filter 分为三类：<code>all</code>、<code>default</code>、特定网卡。</p><ul><li><code>default</code> 用于生成网卡时设置默认的 rp_filter 值</li><li>每张网卡的 rp_filter 取 <code>conf/{all,interface}/rp_filter</code> 中的最大值</li></ul><p>如下面配置，eth0 的 rp_filter 为 1（取 all 和 eth0 中的最大值），eth1 的 rp_filter 为 2（取 all 和 eth1 中的最大值）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.conf.all.rp_filter = <span class="number">1</span></span><br><span class="line">net.ipv4.conf.eth0.rp_filter = <span class="number">0</span></span><br><span class="line">net.ipv4.conf.eth1.rp_filter = <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="查看-rp-filter"><a href="#查看-rp-filter" class="headerlink" title="查看 rp_filter"></a>查看 rp_filter</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:~<span class="comment"># sysctl -a | grep rp_filter</span></span><br><span class="line">net.ipv4.conf.all.rp_filter = <span class="number">2</span></span><br><span class="line">net.ipv4.conf.default.rp_filter = <span class="number">2</span></span><br><span class="line">net.ipv4.conf.ens160.rp_filter = <span class="number">2</span></span><br><span class="line">net.ipv4.conf.ens256.rp_filter = <span class="number">2</span></span><br><span class="line">net.ipv4.conf.lo.rp_filter = <span class="number">0</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="设置-rp-filter"><a href="#设置-rp-filter" class="headerlink" title="设置 rp_filter"></a>设置 rp_filter</h2><p>临时设置（重启后失效）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:~<span class="comment"># sysctl -w net.ipv4.conf.ens160.rp_filter=1</span></span><br><span class="line">net.ipv4.conf.ens160.rp_filter = <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="tcpdump-与-rp-filter"><a href="#tcpdump-与-rp-filter" class="headerlink" title="tcpdump 与 rp_filter"></a>tcpdump 与 rp_filter</h1><p><strong>tcpdump 依旧可以抓到被 rp_filter 过滤掉的包。</strong></p><p>下图的五层网络分层模型中，收包是从下到上，发包是从上到下。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241125012534947.png" alt="image-20241125012534947" style="zoom:50%;" /></p><p>tcpdump 运行在链路层的网络设备层，而 rp_filter 运行在协议栈的网络层，对于收包流程来说，tcpdump 先于 rp_filter 进行，所以即使数据包会被 rp_filter 过滤掉，依旧可以通过 tcpdump 抓到该数据包。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241125013945101.png" alt="image-20241125013945101" style="zoom:50%;" /></p><h1 id="rp-filter-日志"><a href="#rp-filter-日志" class="headerlink" title="rp_filter 日志"></a>rp_filter 日志</h1><p>默认情况下，内核并不会记录被 rp_filter 过滤掉的包，但可以通过 iptables 添加日志规则，模拟和预测哪些包会被 rp_filter 丢弃。</p><p>添加 iptables 日志规则（如需删除，则把其中的 <code>-A</code> 改成 <code>-D</code>）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables <span class="literal">-t</span> raw <span class="literal">-A</span> PREROUTING <span class="literal">-m</span> rpfilter -<span class="literal">-invert</span> <span class="literal">-j</span> LOG -<span class="literal">-log</span><span class="literal">-prefix</span> <span class="string">"RP_FILTER_DROP: "</span></span><br></pre></td></tr></table></figure><p>查看添加的 iptables 日志规则</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:~<span class="comment"># iptables -t raw -L PREROUTING -v</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT <span class="number">299</span> packets, <span class="number">20976</span> bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     source               destination</span><br><span class="line">  <span class="number">299</span> <span class="number">20976</span> LOG        all  --  any    any     anywhere             anywhere             rpfilter invert LOG level warn prefix <span class="string">"RP_FILTER_DROP: "</span></span><br></pre></td></tr></table></figure><p>查看内核日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg -T | grep &quot;RP_FILTER_DROP&quot;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:~<span class="comment"># dmesg -T | grep "RP_FILTER_DROP" | tail -20</span></span><br><span class="line">[<span class="type">Sun</span> <span class="type">Nov</span> <span class="number">24</span> <span class="number">18</span>:<span class="number">27</span>:<span class="number">49</span> <span class="number">2024</span>] RP_FILTER_DROP: <span class="keyword">IN</span>=ens256 OUT= MAC=<span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">48</span>:<span class="number">8</span>d:<span class="number">03</span>:ae:<span class="number">07</span>:<span class="number">75</span>:<span class="number">50</span>:<span class="number">39</span>:<span class="number">65</span>:<span class="number">08</span>:<span class="number">00</span> SRC=<span class="number">172.16</span>.<span class="number">19.1</span> DST=<span class="number">172.16</span>.<span class="number">19.129</span> LEN=<span class="number">88</span> TOS=<span class="number">0</span>x0A PREC=<span class="number">0</span>x40 TTL=<span class="number">64</span> ID=<span class="number">0</span> DF PROTO=TCP SPT=<span class="number">60402</span> DPT=<span class="number">22</span> WINDOW=<span class="number">2048</span> RES=<span class="number">0</span>x00 ACK PSH URGP=<span class="number">0</span></span><br><span class="line">[<span class="type">Sun</span> <span class="type">Nov</span> <span class="number">24</span> <span class="number">18</span>:<span class="number">27</span>:<span class="number">49</span> <span class="number">2024</span>] RP_FILTER_DROP: <span class="keyword">IN</span>=ens256 OUT= MAC=<span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">48</span>:<span class="number">8</span>d:<span class="number">03</span>:ae:<span class="number">07</span>:<span class="number">75</span>:<span class="number">50</span>:<span class="number">39</span>:<span class="number">65</span>:<span class="number">08</span>:<span class="number">00</span> SRC=<span class="number">172.16</span>.<span class="number">19.1</span> DST=<span class="number">172.16</span>.<span class="number">19.129</span> LEN=<span class="number">52</span> TOS=<span class="number">0</span>x08 PREC=<span class="number">0</span>x40 TTL=<span class="number">64</span> ID=<span class="number">0</span> DF PROTO=TCP SPT=<span class="number">60402</span> DPT=<span class="number">22</span> WINDOW=<span class="number">2047</span> RES=<span class="number">0</span>x00 ACK URGP=<span class="number">0</span></span><br><span class="line">[<span class="type">Sun</span> <span class="type">Nov</span> <span class="number">24</span> <span class="number">18</span>:<span class="number">27</span>:<span class="number">49</span> <span class="number">2024</span>] RP_FILTER_DROP: <span class="keyword">IN</span>=ens256 OUT= MAC=<span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">48</span>:<span class="number">8</span>d:<span class="number">03</span>:ae:<span class="number">07</span>:<span class="number">75</span>:<span class="number">50</span>:<span class="number">39</span>:<span class="number">65</span>:<span class="number">08</span>:<span class="number">00</span> SRC=<span class="number">172.16</span>.<span class="number">19.1</span> DST=<span class="number">172.16</span>.<span class="number">19.129</span> LEN=<span class="number">88</span> TOS=<span class="number">0</span>x0A PREC=<span class="number">0</span>x40 TTL=<span class="number">64</span> ID=<span class="number">0</span> DF PROTO=TCP SPT=<span class="number">60402</span> DPT=<span class="number">22</span> WINDOW=<span class="number">2048</span> RES=<span class="number">0</span>x00 ACK PSH URGP=<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Reverse Path Filtering，Linux 内核对接收到的数据包的反向路由校验过滤，主要用于防止 IP 地址欺骗攻击。本文主要介绍该校验机制、系统配置方式以及过滤包查看方法。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机网络" scheme="https://gy23333.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://gy23333.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="Linux" scheme="https://gy23333.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Go调试器:Delve</title>
    <link href="https://gy23333.github.io/2024/11/19/Go%E8%B0%83%E8%AF%95%E5%99%A8-Delve/"/>
    <id>https://gy23333.github.io/2024/11/19/Go%E8%B0%83%E8%AF%95%E5%99%A8-Delve/</id>
    <published>2024-11-18T17:06:33.000Z</published>
    <updated>2024-11-18T18:39:29.113Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Go调试器:Delve</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com&#x2F;go-delve&#x2F;delve&#x2F;cmd&#x2F;dlv@latest</span><br></pre></td></tr></table></figure><p>检查安装是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlv version</span><br></pre></td></tr></table></figure><h1 id="进入调试"><a href="#进入调试" class="headerlink" title="进入调试"></a>进入调试</h1><ul><li><p>调试源文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlv debug main.go</span><br></pre></td></tr></table></figure></li><li><p>调试可执行文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlv exec .&#x2F;main</span><br></pre></td></tr></table></figure></li><li><p>调试进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlv attach &lt;PROCESS_ID&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h1><p>可以通过 <code>help</code> 查看所有命令</p><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>call</code></td><td style="text-align:left">恢复进程，调用函数 (实验阶段)</td></tr><tr><td style="text-align:left"><code>continue</code>(<code>c</code>)</td><td style="text-align:left">继续运行程序，直到遇到断点或程序结束</td></tr><tr><td style="text-align:left"><code>next</code>(<code>n</code>)</td><td style="text-align:left">单步调试（跳过函数内部）</td></tr><tr><td style="text-align:left"><code>step</code>(<code>s</code>)</td><td style="text-align:left">单步调试（进入函数内部）</td></tr><tr><td style="text-align:left"><code>restart</code>(<code>r</code>)</td><td style="text-align:left">重新运行</td></tr><tr><td style="text-align:left"><code>stepout</code>(<code>so</code>)</td><td style="text-align:left">从当前函数跳出</td></tr></tbody></table></div><h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>break</code>(<code>b</code>)</td><td style="text-align:left">设置断点</td></tr><tr><td style="text-align:left"><code>breakpoints</code>(<code>bp</code>)</td><td style="text-align:left">打印所有断点</td></tr><tr><td style="text-align:left"><code>clear</code></td><td style="text-align:left">删除断点</td></tr><tr><td style="text-align:left"><code>clearall</code></td><td style="text-align:left">删除所有断点</td></tr><tr><td style="text-align:left"><code>condition</code></td><td style="text-align:left">设置条件断点</td></tr><tr><td style="text-align:left"><code>on</code></td><td style="text-align:left">设置一个断点触发时执行的命令</td></tr><tr><td style="text-align:left"><code>toggle</code></td><td style="text-align:left">打开/关闭 断点</td></tr></tbody></table></div><h2 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h2><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>args</code></td><td style="text-align:left">打印函数参数</td></tr><tr><td style="text-align:left"><code>display</code></td><td style="text-align:left">每次程序停止时打印表达式的值</td></tr><tr><td style="text-align:left"><code>examinemem</code></td><td style="text-align:left">解析给定地址的内存</td></tr><tr><td style="text-align:left"><code>locals</code></td><td style="text-align:left">打印本地变量</td></tr><tr><td style="text-align:left"><code>print</code>(<code>p</code>)</td><td style="text-align:left">解析一个表达式</td></tr><tr><td style="text-align:left"><code>regs</code></td><td style="text-align:left">打印寄存器信息</td></tr><tr><td style="text-align:left"><code>set</code></td><td style="text-align:left">设置变量的值</td></tr><tr><td style="text-align:left"><code>vars</code></td><td style="text-align:left">打印包内变量</td></tr><tr><td style="text-align:left"><code>whatis</code></td><td style="text-align:left">打印类型信息</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;Go调试器:Delve&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>算法题</title>
    <link href="https://gy23333.github.io/2024/11/17/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>https://gy23333.github.io/2024/11/17/%E7%AE%97%E6%B3%95%E9%A2%98/</id>
    <published>2024-11-17T14:58:09.000Z</published>
    <updated>2024-11-17T15:16:21.459Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>LeetCode Go 刷题记录</p><a id="more"></a><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://leetcode.cn/circle/discuss/E3yavq/" target="_blank" rel="noopener">[力扣刷题攻略] Re：从零开始的力扣刷题生活</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;LeetCode Go 刷题记录&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://gy23333.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://gy23333.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
