<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GuoYi的博客</title>
  
  
  <link href="https://gy23333.github.io/atom.xml" rel="self"/>
  
  <link href="https://gy23333.github.io/"/>
  <updated>2024-12-03T05:18:43.000Z</updated>
  <id>https://gy23333.github.io/</id>
  
  <author>
    <name>GuoYi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bird</title>
    <link href="https://gy23333.github.io/2024/12/03/bird/"/>
    <id>https://gy23333.github.io/2024/12/03/bird/</id>
    <published>2024-12-03T05:03:54.000Z</published>
    <updated>2024-12-03T05:18:43.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>bird</p><a id="more"></a><h1 id="安装-bird"><a href="#安装-bird" class="headerlink" title="安装 bird"></a>安装 bird</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bird2</span><br></pre></td></tr></table></figure><h1 id="OSPF-多路径负载均衡"><a href="#OSPF-多路径负载均衡" class="headerlink" title="OSPF 多路径负载均衡"></a>OSPF 多路径负载均衡</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protocol ospf MyOSPF &#123;</span><br><span class="line">    area 0.0.0.0 &#123;</span><br><span class="line">        interface &quot;eth0&quot;, &quot;eth1&quot; &#123;</span><br><span class="line">            cost 10;   # 为两个接口设置相同的 cost</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ecmp yes;   # 启用等价多路径</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;bird&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>rp_filter反向路由过滤</title>
    <link href="https://gy23333.github.io/2024/11/22/rp-filter%E5%8F%8D%E5%90%91%E8%B7%AF%E7%94%B1%E8%BF%87%E6%BB%A4/"/>
    <id>https://gy23333.github.io/2024/11/22/rp-filter%E5%8F%8D%E5%90%91%E8%B7%AF%E7%94%B1%E8%BF%87%E6%BB%A4/</id>
    <published>2024-11-22T15:54:54.000Z</published>
    <updated>2024-11-24T18:37:03.879Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Reverse Path Filtering，Linux 内核对接收到的数据包的反向路由校验过滤，主要用于防止 IP 地址欺骗攻击。本文主要介绍该校验机制、系统配置方式以及过滤包查看方法。</p><a id="more"></a><h1 id="反向路由校验机制"><a href="#反向路由校验机制" class="headerlink" title="反向路由校验机制"></a>反向路由校验机制</h1><p>反向路由校验，即在网卡收到数据包后，校验该数据包的反向路由是否匹配，如不匹配，则丢弃该包。具体流程如下：</p><ol><li>对于网卡收到的数据包，Linux 内核会检查该数据包的源 IP</li><li>参照当前的路由表，判断如以该数据包的源 IP 作为目的 IP，返回路径的路由选择是否与当前接收接口一致</li><li>如不一致，则认为该数据包可能是伪造的，丢弃该数据包</li></ol><p>如下图，eth1 网卡开启了严格的 rp_filter 检查，此时 eth1 网卡收到源 IP 为 <code>172.16.19.24</code> 的包，rp_filter 检查如果以 <code>172.16.19.24</code> 为目的 IP，根据路由表，匹配的网卡应该为 eth0，而不是收到包的 eth1，因此判断该数据包可能伪造源 IP，丢弃该包。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241124140220970.png" alt="image-20241124140220970" style="zoom: 50%;" /></p><h1 id="Linux-内核参数"><a href="#Linux-内核参数" class="headerlink" title="Linux 内核参数"></a>Linux 内核参数</h1><h2 id="net-ipv4-conf-XXX-rp-filter"><a href="#net-ipv4-conf-XXX-rp-filter" class="headerlink" title="net.ipv4.conf.XXX.rp_filter"></a><code>net.ipv4.conf.XXX.rp_filter</code></h2><p><a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/networking/ip-sysctl.txt?h=v4.9#n1090" target="_blank" rel="noopener">Linux 内核参数详解</a></p><p>rp_filter 为 Linux 用于设置反向路由校验机制的内核参数，共有三种可配置值 0、1、2，</p><ul><li><code>rp_filter = 0</code>：关闭反向路由校验。</li><li><code>rp_filter = 1</code>：开启严格的反向路由校验。如果反向路由不是最佳路由，则丢弃该包。</li><li><code>rp_filter = 2</code>：开启松散的反向路由校验。对于收到的数据包，只检查其源 IP 是否可达，即反向路由是否可通（任意网卡均可），如果反向路径不通，则丢弃该包。</li></ul><p>rp_filter 分为三类：<code>all</code>、<code>default</code>、特定网卡。</p><ul><li><code>default</code> 用于生成网卡时设置默认的 rp_filter 值</li><li>每张网卡的 rp_filter 取 <code>conf/{all,interface}/rp_filter</code> 中的最大值</li></ul><p>如下面配置，eth0 的 rp_filter 为 1（取 all 和 eth0 中的最大值），eth1 的 rp_filter 为 2（取 all 和 eth1 中的最大值）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.conf.all.rp_filter = <span class="number">1</span></span><br><span class="line">net.ipv4.conf.eth0.rp_filter = <span class="number">0</span></span><br><span class="line">net.ipv4.conf.eth1.rp_filter = <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="查看-rp-filter"><a href="#查看-rp-filter" class="headerlink" title="查看 rp_filter"></a>查看 rp_filter</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:~<span class="comment"># sysctl -a | grep rp_filter</span></span><br><span class="line">net.ipv4.conf.all.rp_filter = <span class="number">2</span></span><br><span class="line">net.ipv4.conf.default.rp_filter = <span class="number">2</span></span><br><span class="line">net.ipv4.conf.ens160.rp_filter = <span class="number">2</span></span><br><span class="line">net.ipv4.conf.ens256.rp_filter = <span class="number">2</span></span><br><span class="line">net.ipv4.conf.lo.rp_filter = <span class="number">0</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="设置-rp-filter"><a href="#设置-rp-filter" class="headerlink" title="设置 rp_filter"></a>设置 rp_filter</h2><p>临时设置（重启后失效）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:~<span class="comment"># sysctl -w net.ipv4.conf.ens160.rp_filter=1</span></span><br><span class="line">net.ipv4.conf.ens160.rp_filter = <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="tcpdump-与-rp-filter"><a href="#tcpdump-与-rp-filter" class="headerlink" title="tcpdump 与 rp_filter"></a>tcpdump 与 rp_filter</h1><p><strong>tcpdump 依旧可以抓到被 rp_filter 过滤掉的包。</strong></p><p>下图的五层网络分层模型中，收包是从下到上，发包是从上到下。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241125012534947.png" alt="image-20241125012534947" style="zoom:50%;" /></p><p>tcpdump 运行在链路层的网络设备层，而 rp_filter 运行在协议栈的网络层，对于收包流程来说，tcpdump 先于 rp_filter 进行，所以即使数据包会被 rp_filter 过滤掉，依旧可以通过 tcpdump 抓到该数据包。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241125013945101.png" alt="image-20241125013945101" style="zoom:50%;" /></p><h1 id="rp-filter-日志"><a href="#rp-filter-日志" class="headerlink" title="rp_filter 日志"></a>rp_filter 日志</h1><p>默认情况下，内核并不会记录被 rp_filter 过滤掉的包，但可以通过 iptables 添加日志规则，模拟和预测哪些包会被 rp_filter 丢弃。</p><p>添加 iptables 日志规则（如需删除，则把其中的 <code>-A</code> 改成 <code>-D</code>）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables <span class="literal">-t</span> raw <span class="literal">-A</span> PREROUTING <span class="literal">-m</span> rpfilter -<span class="literal">-invert</span> <span class="literal">-j</span> LOG -<span class="literal">-log</span><span class="literal">-prefix</span> <span class="string">"RP_FILTER_DROP: "</span></span><br></pre></td></tr></table></figure><p>查看添加的 iptables 日志规则</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:~<span class="comment"># iptables -t raw -L PREROUTING -v</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT <span class="number">299</span> packets, <span class="number">20976</span> bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     source               destination</span><br><span class="line">  <span class="number">299</span> <span class="number">20976</span> LOG        all  --  any    any     anywhere             anywhere             rpfilter invert LOG level warn prefix <span class="string">"RP_FILTER_DROP: "</span></span><br></pre></td></tr></table></figure><p>查看内核日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg -T | grep &quot;RP_FILTER_DROP&quot;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu2404:~<span class="comment"># dmesg -T | grep "RP_FILTER_DROP" | tail -20</span></span><br><span class="line">[<span class="type">Sun</span> <span class="type">Nov</span> <span class="number">24</span> <span class="number">18</span>:<span class="number">27</span>:<span class="number">49</span> <span class="number">2024</span>] RP_FILTER_DROP: <span class="keyword">IN</span>=ens256 OUT= MAC=<span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">48</span>:<span class="number">8</span>d:<span class="number">03</span>:ae:<span class="number">07</span>:<span class="number">75</span>:<span class="number">50</span>:<span class="number">39</span>:<span class="number">65</span>:<span class="number">08</span>:<span class="number">00</span> SRC=<span class="number">172.16</span>.<span class="number">19.1</span> DST=<span class="number">172.16</span>.<span class="number">19.129</span> LEN=<span class="number">88</span> TOS=<span class="number">0</span>x0A PREC=<span class="number">0</span>x40 TTL=<span class="number">64</span> ID=<span class="number">0</span> DF PROTO=TCP SPT=<span class="number">60402</span> DPT=<span class="number">22</span> WINDOW=<span class="number">2048</span> RES=<span class="number">0</span>x00 ACK PSH URGP=<span class="number">0</span></span><br><span class="line">[<span class="type">Sun</span> <span class="type">Nov</span> <span class="number">24</span> <span class="number">18</span>:<span class="number">27</span>:<span class="number">49</span> <span class="number">2024</span>] RP_FILTER_DROP: <span class="keyword">IN</span>=ens256 OUT= MAC=<span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">48</span>:<span class="number">8</span>d:<span class="number">03</span>:ae:<span class="number">07</span>:<span class="number">75</span>:<span class="number">50</span>:<span class="number">39</span>:<span class="number">65</span>:<span class="number">08</span>:<span class="number">00</span> SRC=<span class="number">172.16</span>.<span class="number">19.1</span> DST=<span class="number">172.16</span>.<span class="number">19.129</span> LEN=<span class="number">52</span> TOS=<span class="number">0</span>x08 PREC=<span class="number">0</span>x40 TTL=<span class="number">64</span> ID=<span class="number">0</span> DF PROTO=TCP SPT=<span class="number">60402</span> DPT=<span class="number">22</span> WINDOW=<span class="number">2047</span> RES=<span class="number">0</span>x00 ACK URGP=<span class="number">0</span></span><br><span class="line">[<span class="type">Sun</span> <span class="type">Nov</span> <span class="number">24</span> <span class="number">18</span>:<span class="number">27</span>:<span class="number">49</span> <span class="number">2024</span>] RP_FILTER_DROP: <span class="keyword">IN</span>=ens256 OUT= MAC=<span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">48</span>:<span class="number">8</span>d:<span class="number">03</span>:ae:<span class="number">07</span>:<span class="number">75</span>:<span class="number">50</span>:<span class="number">39</span>:<span class="number">65</span>:<span class="number">08</span>:<span class="number">00</span> SRC=<span class="number">172.16</span>.<span class="number">19.1</span> DST=<span class="number">172.16</span>.<span class="number">19.129</span> LEN=<span class="number">88</span> TOS=<span class="number">0</span>x0A PREC=<span class="number">0</span>x40 TTL=<span class="number">64</span> ID=<span class="number">0</span> DF PROTO=TCP SPT=<span class="number">60402</span> DPT=<span class="number">22</span> WINDOW=<span class="number">2048</span> RES=<span class="number">0</span>x00 ACK PSH URGP=<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Reverse Path Filtering，Linux 内核对接收到的数据包的反向路由校验过滤，主要用于防止 IP 地址欺骗攻击。本文主要介绍该校验机制、系统配置方式以及过滤包查看方法。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机网络" scheme="https://gy23333.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://gy23333.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="Linux" scheme="https://gy23333.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Go调试器:Delve</title>
    <link href="https://gy23333.github.io/2024/11/19/Go%E8%B0%83%E8%AF%95%E5%99%A8-Delve/"/>
    <id>https://gy23333.github.io/2024/11/19/Go%E8%B0%83%E8%AF%95%E5%99%A8-Delve/</id>
    <published>2024-11-18T17:06:33.000Z</published>
    <updated>2024-11-18T18:39:29.113Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Go调试器:Delve</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com&#x2F;go-delve&#x2F;delve&#x2F;cmd&#x2F;dlv@latest</span><br></pre></td></tr></table></figure><p>检查安装是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlv version</span><br></pre></td></tr></table></figure><h1 id="进入调试"><a href="#进入调试" class="headerlink" title="进入调试"></a>进入调试</h1><ul><li><p>调试源文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlv debug main.go</span><br></pre></td></tr></table></figure></li><li><p>调试可执行文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlv exec .&#x2F;main</span><br></pre></td></tr></table></figure></li><li><p>调试进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlv attach &lt;PROCESS_ID&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h1><p>可以通过 <code>help</code> 查看所有命令</p><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>call</code></td><td style="text-align:left">恢复进程，调用函数 (实验阶段)</td></tr><tr><td style="text-align:left"><code>continue</code>(<code>c</code>)</td><td style="text-align:left">继续运行程序，直到遇到断点或程序结束</td></tr><tr><td style="text-align:left"><code>next</code>(<code>n</code>)</td><td style="text-align:left">单步调试（跳过函数内部）</td></tr><tr><td style="text-align:left"><code>step</code>(<code>s</code>)</td><td style="text-align:left">单步调试（进入函数内部）</td></tr><tr><td style="text-align:left"><code>restart</code>(<code>r</code>)</td><td style="text-align:left">重新运行</td></tr><tr><td style="text-align:left"><code>stepout</code>(<code>so</code>)</td><td style="text-align:left">从当前函数跳出</td></tr></tbody></table></div><h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>break</code>(<code>b</code>)</td><td style="text-align:left">设置断点</td></tr><tr><td style="text-align:left"><code>breakpoints</code>(<code>bp</code>)</td><td style="text-align:left">打印所有断点</td></tr><tr><td style="text-align:left"><code>clear</code></td><td style="text-align:left">删除断点</td></tr><tr><td style="text-align:left"><code>clearall</code></td><td style="text-align:left">删除所有断点</td></tr><tr><td style="text-align:left"><code>condition</code></td><td style="text-align:left">设置条件断点</td></tr><tr><td style="text-align:left"><code>on</code></td><td style="text-align:left">设置一个断点触发时执行的命令</td></tr><tr><td style="text-align:left"><code>toggle</code></td><td style="text-align:left">打开/关闭 断点</td></tr></tbody></table></div><h2 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h2><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>args</code></td><td style="text-align:left">打印函数参数</td></tr><tr><td style="text-align:left"><code>display</code></td><td style="text-align:left">每次程序停止时打印表达式的值</td></tr><tr><td style="text-align:left"><code>examinemem</code></td><td style="text-align:left">解析给定地址的内存</td></tr><tr><td style="text-align:left"><code>locals</code></td><td style="text-align:left">打印本地变量</td></tr><tr><td style="text-align:left"><code>print</code>(<code>p</code>)</td><td style="text-align:left">解析一个表达式</td></tr><tr><td style="text-align:left"><code>regs</code></td><td style="text-align:left">打印寄存器信息</td></tr><tr><td style="text-align:left"><code>set</code></td><td style="text-align:left">设置变量的值</td></tr><tr><td style="text-align:left"><code>vars</code></td><td style="text-align:left">打印包内变量</td></tr><tr><td style="text-align:left"><code>whatis</code></td><td style="text-align:left">打印类型信息</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;Go调试器:Delve&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一致性哈希算法</title>
    <link href="https://gy23333.github.io/2024/11/07/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/"/>
    <id>https://gy23333.github.io/2024/11/07/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</id>
    <published>2024-11-06T16:09:44.000Z</published>
    <updated>2024-11-12T18:01:02.564Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>一致性哈希，Consistent Hashing，用于分布式系统的负载均衡，解决了传统哈希算法的节点扩缩容问题。</p><a id="more"></a><h1 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h1><p>在分布式系统中，集群由多台服务器组成，数据采用分布式缓存，期望将数据尽量均匀地分配缓存到各个服务器，每个服务器上有着不同的缓存，以分担压力。请求数据时，再到相应的服务器获取缓存。这部分工作由负载均衡层 LB 来完成。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241107021347734.png" alt="image-20241107021347734" style="zoom:50%;" /></p><p>分布式系统应满足下面要求：</p><ul><li>对于同一个数据的请求落在相同的服务器上</li><li>数据分配尽量均匀</li><li>当服务器数量增减时，尽量减小原有数据分配变化</li></ul><h1 id="传统哈希算法"><a href="#传统哈希算法" class="headerlink" title="传统哈希算法"></a>传统哈希算法</h1><h2 id="传统哈希算法-1"><a href="#传统哈希算法-1" class="headerlink" title="传统哈希算法"></a>传统哈希算法</h2><p>哈希算法采用取模运算，基于下面的公式，将 hash 值对机器数量取余，将数据的 key 映射到节点。</p><script type="math/tex; mode=display">hash(key) \% size</script><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241107131915573.png" alt="image-20241107131915573" style="zoom:50%;" /></p><h2 id="扩缩容问题"><a href="#扩缩容问题" class="headerlink" title="扩缩容问题"></a>扩缩容问题</h2><p>服务器集群会因为业务量变化需求而扩缩容，增加或减少节点数，此时映射关系发生大量变化，缓存失效，需要进行数据迁移，以保证请求正常。数据迁移规模 <code>O(M)</code>，迁移成本极大，导致服务器瞬时压力巨大。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241107132455997.png" alt="image-20241107132455997" style="zoom:50%;" /></p><h1 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a>一致性哈希算法</h1><h2 id="哈希环"><a href="#哈希环" class="headerlink" title="哈希环"></a>哈希环</h2><p>一致性哈希算法引入哈希环解决了扩缩容导致过多数据迁移问题。</p><p>一致性哈希算法同样采用了取模的方式，但与传统哈希不同，取模值固定为 $2^{32}$</p><script type="math/tex; mode=display">hash(key) \% 2^{32}</script><p>可以把取模结果当做一个圆环，由 $2^{32}$ 个点组成，先将服务器取模映射到哈希环上，再将数据同样取模映射到环上，选择顺时针找到的第一个服务器存入。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241107134652765.png" alt="image-20241107134652765" style="zoom:50%;" /></p><p>此时添加一个节点，仅有少量的数据需要重新分配映射，大部分位置分配保持不变。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241107135232078.png" alt="image-20241107135232078" style="zoom:50%;" /></p><h2 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h2><p>如果采用节点直接映射，可能存在节点分布不均匀问题，也就是 hash 偏斜。大部分的缓存落在少数几台服务器上，如果该台服务器发生故障，会导致瞬时大量数据迁移。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241113013903066.png" alt="image-20241113013903066" style="zoom:60%;" /></p><p>为了解决 hash 偏斜问题，引入虚拟节点。</p><p>将每个服务器映射为多个虚拟节点，数量足够多，以保证均匀分布。数据映射时先找到虚拟节点，再对应到相应的真实节点。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241113015419128.png" alt="image-20241113015419128" style="zoom:50%;" /></p><h1 id="Go-实现一致性哈希"><a href="#Go-实现一致性哈希" class="headerlink" title="Go 实现一致性哈希"></a>Go 实现一致性哈希</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;一致性哈希，Consistent Hashing，用于分布式系统的负载均衡，解决了传统哈希算法的节点扩缩容问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Load Balancing" scheme="https://gy23333.github.io/tags/Load-Balancing/"/>
    
  </entry>
  
  <entry>
    <title>BGP 路由协议</title>
    <link href="https://gy23333.github.io/2024/10/23/BGP-%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/"/>
    <id>https://gy23333.github.io/2024/10/23/BGP-%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/</id>
    <published>2024-10-22T18:38:51.000Z</published>
    <updated>2024-11-11T03:57:58.125Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>BGP 路由协议</p><a id="more"></a><h1 id="BGP-路由选择策略"><a href="#BGP-路由选择策略" class="headerlink" title="BGP 路由选择策略"></a>BGP 路由选择策略</h1><p>对于同一个目的地址，路由器会收到多个路径，BGP 对这些路径进行选择分类，决定最终的路由选择</p><ul><li>Available：可用路径<ul><li>所有合法的可用路径</li></ul></li><li>Best：最佳路径<ul><li>通过 BGP 最佳路由选择策略，选出来的唯一一个路由，作为最佳路由</li></ul></li><li>Select：选择路径<ul><li>在 BGP 最佳路由选择策略中，前 8 步都与 Best Path 属性相同的路径</li><li>这些 Select Path 将会加入路由表，实现 BGP 负载均衡</li></ul></li></ul><h2 id="BGP-最佳路由选择策略"><a href="#BGP-最佳路由选择策略" class="headerlink" title="BGP 最佳路由选择策略"></a>BGP 最佳路由选择策略</h2><p>当路由器收到到同一个目的地址的多个 Available Path，BGP 最佳路由选择策略从中选出一条 Best Path。</p><p>以下是 BGP 最佳路径选择策略，按比较顺序排列：</p><ol><li><strong>优选权重（Weight）最高的路径</strong></li><li><strong>优选本地优先级（Local Preference）最高的路径</strong></li><li><strong>优选起本地生成的路径</strong><ul><li>本地内部生成的路由优先级高于从外部学到的路由</li><li>本地生成的路由，即通过<code>network</code>命令或<code>aggregate</code>命令手动注入的路由</li></ul></li><li><strong>优选 AS Path 长度最短的路径</strong><ul><li>AS Path：一个路由经过的自治系统（AS）序列</li><li>优先级比较 AS Path 长度，而非 AS Path 本身<ul><li>路径 1 的 AS Path：<code>65005 65004 65003</code></li><li>路径 2 的 AS Path：<code>65006 65003</code></li><li>只比较两者的长度，路径 1 长度为 3，路径 2 长度为 2，优选路径 2</li></ul></li></ul></li><li><strong>优选 Origin Type 优先级最高的路径</strong><ul><li>Origin Type 用于表示路由来源类型，共有三种：<ul><li>IGP：内部网关协议，Internal Gateway Protocol</li><li>EGP：外部网关协议，Exterior Gateway Protocol</li><li>Incomplete：不确定来源</li></ul></li><li>优先级 IGP &gt; EGP &gt; Incomplete</li></ul></li><li><strong>优选 MED 最小的路径</strong><ul><li>MED，Multi-Exit Discriminator，多出口鉴别，只在两个 AS 之间交换，不会传到第三个 AS</li><li>两个 AS 之间可能有多条链路连接，MED 用于决定选择那条链路</li><li>MED 默认值：0</li></ul></li><li><strong>优选邻居路由器类型为 eBGP 先于 iBGP</strong><ul><li>eBGP，external BGP，外部 BGP，不同 AS 之间的 BGP</li><li>iBGP，internal BGP，内部 BGP，相同 AS 内部的 BGP</li><li>优选 eBGP 路由器，即优选跨 AZ 路径，到达这一步比较的路由，如同时有 eBGP 和 iBGP 路径，iBGP 路径是经过了内部转发再到 eBGP 路由器的绕行路径，所以优选直接到 eBGP 路由器的路径</li></ul></li><li><strong>优选到 BGP next hop 的 IGP 度量值最小的路径</strong><ul><li>IGP metric，内部路由度量值，在第七步中选择 iBGP 才需要比较步骤，否则跳过</li><li>IGP 越小，则去该下一跳的开销越小</li><li><strong>到该步如存在多个路径条件都相同，则 BGP 负载均衡</strong></li></ul></li><li><strong>优选来自 Route ID 最小的路由器的路径</strong></li><li><strong>优选 Cluster List 最短的路径</strong></li><li><strong>优选来自 IP 地址最小的 Neighbor 的路径</strong></li></ol><h2 id="BGP-负载均衡"><a href="#BGP-负载均衡" class="headerlink" title="BGP 负载均衡"></a>BGP 负载均衡</h2><p>BGP Multipath 允许给一个目的地址加载多个 BGP 路径到 IP 路由表，这些路由实现 BGP 负载均衡。这不影响上步中的 Best Path 的选择，依旧从多个路径中选择一条路径作为 Best Path。在此基础之上，可以选取多个路径作为 Select Path，一同加入路由表，实现多路径负载均衡。</p><ul><li>Select Path 在路由选择策略中的前 8 步必须与 Best Path 完全相同，即有相同的 Weight、Local Preference、AS Path length、Origin Type、MED、eBGP/iBGP、IGP Metric</li><li>Best Path 必然包含在 Select Path 中</li><li><code>maximum-paths</code> 设置 BGP 最多允许的 Select Path 数量，如果设置为 1，则 Select Path 只能有一个，也就是 Best Path</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.cisco.com/c/en/us/support/docs/ip/border-gateway-protocol-bgp/13753-25.html" target="_blank" rel="noopener">Select BGP Best Path Algorithm</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;BGP 路由协议&lt;/p&gt;</summary>
    
    
    
    <category term="计算机网络" scheme="https://gy23333.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://gy23333.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="路由协议" scheme="https://gy23333.github.io/tags/%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="BGP" scheme="https://gy23333.github.io/tags/BGP/"/>
    
  </entry>
  
  <entry>
    <title>systemd</title>
    <link href="https://gy23333.github.io/2024/10/05/systemd/"/>
    <id>https://gy23333.github.io/2024/10/05/systemd/</id>
    <published>2024-10-05T12:20:32.000Z</published>
    <updated>2024-11-11T03:57:58.130Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>systemd 是 Linux 的系统和服务管理器。作为系统启动的第一个进程，初始化系统并且管理其他用户服务。</p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>systemd 提供了一套完整的系统启动和管理的解决方案，其中的 <code>d</code> 为守护进程（daemon）的缩写，即系统的守护进程。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/bg2016030703.png" alt="systemd架构图"></p><p>查看 systemd 简介</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man systemd</span><br></pre></td></tr></table></figure><p>systemd 作为系统的第一个进程，PID = 1，其余所有进程都是 systemd 的子进程。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># pstree -p</span></span><br><span class="line">systemd(<span class="number">1</span>)─┬─ModemManager(<span class="number">855</span>)─┬─&#123;ModemManager&#125;(<span class="number">887</span>)</span><br><span class="line">           │                   └─&#123;ModemManager&#125;(<span class="number">894</span>)</span><br><span class="line">           ├─NetworkManager(<span class="number">777</span>)─┬─&#123;NetworkManager&#125;(<span class="number">854</span>)</span><br><span class="line">           │                     └─&#123;NetworkManager&#125;(<span class="number">859</span>)</span><br><span class="line">           ├─VGAuthService(<span class="number">747</span>)</span><br><span class="line">           ├─accounts<span class="literal">-daemon</span>(<span class="number">766</span>)─┬─&#123;accounts<span class="literal">-daemon</span>&#125;(<span class="number">778</span>)</span><br><span class="line">           │                      └─&#123;accounts<span class="literal">-daemon</span>&#125;(<span class="number">811</span>)</span><br><span class="line">           ├─acpid(<span class="number">767</span>)</span><br><span class="line">           ├─avahi<span class="literal">-daemon</span>(<span class="number">770</span>)───avahi<span class="literal">-daemon</span>(<span class="number">840</span>)</span><br><span class="line">           ├─bluetoothd(<span class="number">771</span>)</span><br><span class="line">           ├─colord(<span class="number">1484</span>)─┬─&#123;colord&#125;(<span class="number">1486</span>)</span><br><span class="line">           │              └─&#123;colord&#125;(<span class="number">1488</span>)</span><br><span class="line">           ├─cron(<span class="number">773</span>)</span><br><span class="line">        .....</span><br></pre></td></tr></table></figure><h1 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h1><p>systemd 可以管理所有系统资源，unit 为 systemd 的基本管理单元，用于描述系统服务、资源、设备和其他对象，根据不同资源分为了 12 种 Unit。</p><ul><li>Service unit：系统服务</li><li>Target unit：多个 Unit 构成的一个组</li><li>Device Unit：硬件设备</li><li>Mount Unit：文件系统的挂载点</li><li>Automount Unit：自动挂载点</li><li>Path Unit：文件或路径</li><li>Scope Unit：不是由 Systemd 启动的外部进程</li><li>Slice Unit：进程组</li><li>Snapshot Unit：Systemd 快照，可以切回某个快照</li><li>Socket Unit：进程间通信的 socket</li><li>Swap Unit：swap 文件</li><li>Timer Unit：定时器</li></ul><p>可通过 <code>man systemd.service</code> 查看各种 Unit 的简介。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>每个 Unit 需设置对应类型的配置文件。Unit 配置分为三个区块：Unit、Service\Timer\Socket、Install</p><h3 id="Unit-区块"><a href="#Unit-区块" class="headerlink" title="Unit 区块"></a>Unit 区块</h3><p>Unit 的元数据，定义了 unit 的基本信息、依赖关系和启动顺序。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=服务或单元的描述</span><br><span class="line"><span class="attr">Documentation</span>=man:your-man-page(<span class="number">1</span>)  <span class="comment"># 可选，文档链接</span></span><br><span class="line"><span class="attr">Requires</span>=其他-unit.service  <span class="comment"># 可选，定义强依赖</span></span><br><span class="line"><span class="attr">Wants</span>=其他-unit.service  <span class="comment"># 可选，定义弱依赖</span></span><br><span class="line"><span class="attr">After</span>=network.target  <span class="comment"># 可选，指定启动顺序</span></span><br><span class="line"><span class="attr">Before</span>=其他-unit.service  <span class="comment"># 可选，指定启动顺序</span></span><br></pre></td></tr></table></figure><ul><li><code>Description</code>：简短描述</li><li><code>Documentation</code>：文档地址，可以是手册页或 URL</li></ul><p><strong>依赖关系</strong></p><p>例如：unit-A Requires/BindsTo/Wants/PartOf=unit-B.service</p><ul><li><code>Requires</code>：<ul><li>强依赖</li><li>unit-A 启动时，自动启动被依赖 unit-B，如果被依赖 unit-B 启动失败，则该 unit-A 也会启动失败</li></ul></li><li><code>BindsTo</code>：<ul><li>强依赖</li><li>unit-A 启动时，自动启动被依赖 unit-B，如果被依赖 unit-B 启动失败，则该 unit-A 也会启动失败</li><li>unit-B 停止或者失败时，依赖 unit-B 的 unit-A 也会自动停止 </li></ul></li><li><code>Wants</code>：<ul><li>弱依赖</li><li>unit-A 启动时，自动启动被依赖 unit-B，但被依赖 unit-B 启动失败，也不会一些该 unit-A 启动</li></ul></li></ul><div class="table-container"><table><thead><tr><th>特性</th><th><code>Requires</code></th><th><code>BindsTo</code></th><th><code>Wants</code></th></tr></thead><tbody><tr><td>启动行为</td><td>必须成功启动被依赖的 unit</td><td>必须成功启动被依赖的 unit</td><td>建议启动被依赖的 unit</td></tr><tr><td>停止行为</td><td>不会自动停止依赖它的 unit</td><td>自动停止依赖它的 unit</td><td>不会自动停止依赖它的 unit</td></tr><tr><td>依赖关系类型</td><td>单向强依赖</td><td>双向强依赖</td><td>弱依赖</td></tr><tr><td>适用场景</td><td>功能密切相关但生命周期不必一致的服务</td><td>需要同时运行并在同一生命周期内运行的服务</td><td>可能相互关联但非必需的服务</td></tr></tbody></table></div><ul><li><code>Conflicts</code>：互斥关系，unit-A 和 unit-B 不能同时运行，当 unit-A 启动时，会自动停止 unit-B，反之亦然</li><li><code>PartOf</code>：unit-A 是目标服务 unit-B 的一部分，当目标服务 unit-B 停止或被重启时，作为其一部分的 unit-A 也会停止或重启</li></ul><p><strong>启动顺序</strong></p><p>例如：unit-A Before/After=unit-B.service</p><ul><li><code>Before</code>：当前 unit A 应该在指定的 unit B 之前启动（A -&gt; B）</li><li><code>After</code>：当前 unit A 应该在指定的 unit B 之后启动（B -&gt; A）</li></ul><p>顺序配置<code>Before</code>、<code>After</code> 只是设置一起启动时的顺序，A 服务启动时并不会自动启动 B 服务，如需设置自启动，需搭配依赖关系使用。</p><p><strong>其他关系</strong></p><ul><li><code>Condition...</code>：检查服务启动时的条件，如果条件不满足，服务将不会被启动，但不会导致启动失败<ul><li><code>ConditionPathExists=</code>：检查指定的文件或路径是否存在。如果路径存在，服务将启动</li><li><code>ConditionPathExistsGlob=</code>：使用通配符检查路径是否匹配</li><li><code>ConditionPathIsDirectory=</code>：检查指定路径是否是一个目录</li><li><code>ConditionPathIsSymbolicLink=</code>：检查指定路径是否是一个符号链接</li><li><code>ConditionKernelCommandLine=</code>：检查内核命令行参数是否包含指定的字符串</li><li><code>ConditionVirtualization=</code>：检查当前系统是否运行在虚拟化环境中（如 KVM、LXC 等）</li><li><code>ConditionHost=</code>：检查主机名是否与指定值匹配</li></ul></li><li><code>Assert...</code>：对服务启动的条件进行强制检查。与 <code>Condition</code> 不同，如果指定的条件未满足，服务将不会启动，且系统会报告错误<ul><li><code>AssertPathExists=</code>：检查指定路径是否存在</li><li><code>AssertPathIsDirectory=</code>：检查指定路径是否是目录</li><li><code>AssertPathIsSymbolicLink=</code>：检查指定路径是否是符号链接</li><li><code>AssertKernelCommandLine=</code>：检查内核命令行参数</li><li><code>AssertVirtualization=</code>：检查当前系统是否在虚拟化环境中</li></ul></li></ul><h3 id="类型区块"><a href="#类型区块" class="headerlink" title="类型区块"></a>类型区块</h3><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p><code>systemd.service</code> 是用于定义和管理系统服务的单位类型。</p><p>配置文件以 <code>.service</code> 结尾，主要用于描述如何启动、停止和管理服务。</p><p><code>.service</code> 配置中，通过 [Service] 区块定义服务的启动和运行参数。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=notify</span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/etc/default/ssh</span><br><span class="line"><span class="attr">ExecStartPre</span>=/usr/sbin/sshd -t</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/sbin/sshd -D <span class="variable">$SSHD_OPTS</span></span><br><span class="line"><span class="attr">ExecReload</span>=/usr/sbin/sshd -t</span><br><span class="line"><span class="attr">ExecReload</span>=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line"><span class="attr">KillMode</span>=process</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">RestartPreventExitStatus</span>=<span class="number">255</span></span><br><span class="line"><span class="attr">RuntimeDirectory</span>=sshd</span><br><span class="line"><span class="attr">RuntimeDirectoryMode</span>=<span class="number">0755</span></span><br></pre></td></tr></table></figure><p><strong>启动类型</strong></p><ul><li><code>Type</code>：配置服务如何通知systemd服务启动完成<ul><li><code>simple</code>（默认值）：systemd 调用完 <code>ExecStart</code> 后即认为服务启动成功，即使 <code>ExecStart</code> 运行失败，服务也启动成功</li><li><code>notify</code>：启动时，服务通过 <code>sd_notify()</code> 发送一个 “READY=1” 信号，systemd 收到这个信号后才认为服务启动成功，再启动之后的 unit</li><li><code>dbus</code>：需设置 <code>BusName=</code>（如设置，自动为 dbus 类型），当 systemd 确认 <code>BusName=</code> 的 dbus 存在后，则认为服务启动成功</li><li>等等</li></ul></li></ul><p><strong>启动命令</strong></p><ul><li><p><code>EnvironmentFile</code>：启动时会加载这个配置的环境变量文件</p></li><li><p><code>ExecStartPre</code>：启动服务之前执行的命令</p><ul><li><p>如果 <code>ExecStartPre</code> 执行失败，则服务启动失败，不会执行 <code>ExecStart</code></p></li><li><p>如果希望 <code>ExecStartPre</code> 执行失败也能继续执行 <code>ExecStart</code>，需在 <code>ExecStartPre</code> 加前缀 <code>-</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ExecStartPre</span>=-/usr/bin/check_dependencies</span><br></pre></td></tr></table></figure></li><li><p>支持多个 <code>ExecStartPre</code>，按顺序执行</p></li></ul></li><li><p><code>ExecStart</code>（必选）：启动服务执行的命令</p></li><li><p><code>ExecStartPost</code>：启动服务成功之后执行的命令</p><ul><li>如果 <code>Type</code> 规定的启动没成功，则不会执行 <code>ExecStartPost</code></li></ul></li></ul><p><strong>终止类型</strong></p><ul><li><code>KillMode</code>：停止服务时如何处理进程<ul><li><code>control-group</code>（默认值）：停止服务时，所有属于该服务 cgroup 的所有进程都会被杀死</li><li><code>process</code>：停止服务时，只杀主进程，主进程产生的子进程不会被杀死</li><li><code>mixed</code>：停止服务时，向主进程发送 SIGTERM 信号，接着向子进程发送 SIGKILL 信号</li><li><code>none</code>：没有进程会被杀掉，只是执行服务的 <code>ExecStop</code> 命令</li></ul></li></ul><blockquote><p>杀进程过程：</p><ol><li>向进程发送<code>KillSignal=</code> 信号（默认为 <code>SIGTERM</code>）</li><li>等待进程被杀死</li><li>若等候 <code>TimeoutStopSec=</code> 时间（默认 90s）后，进程仍然未被杀死，向进程发送 <code>FinalKillSignal=</code> 信号（默认为 <code>SIGKILL</code>）强制杀死进程</li></ol></blockquote><p><strong>终止命令</strong></p><ul><li><code>ExecStop</code>字段：停止服务时执行的命令</li><li><code>ExecStopPost</code>字段：停止服务之后执行的命令</li></ul><p><strong>重启类型</strong></p><p>有时候，服务需要保持运行状态，如有意外奔溃，能自动拉起，可通过下面配置设置自拉起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Restart&#x3D;always</span><br><span class="line">RestartSec&#x3D;5</span><br><span class="line">StartLimitInterval&#x3D;0</span><br></pre></td></tr></table></figure><ul><li><code>Restart</code>：重启机制，什么情况下会自动触发重启服务（systemctl stop/restart 触发的停止服务，不会被这里设置的重启机制拉起）<ul><li>no（默认值）：退出后不会重启</li><li>always：所有情况触发自动重启</li><li>on-success：只有正常退出时触发自动重启</li><li>on-failure：异常退出时触发自动重启</li><li>on-abnormal：只有被信号终止和超时，才会重启</li><li>on-abort：只有在收到没有捕捉到的信号终止时，才会重启</li><li>on-watchdog：超时退出，才会重启</li></ul></li></ul><div class="table-container"><table><thead><tr><th>退出原因</th><th>no</th><th>always</th><th>on-success</th><th>on-failure</th><th>on-abnormal</th><th>on-abort</th><th>on-watchdog</th></tr></thead><tbody><tr><td>systemctl stop</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>正常退出</td><td></td><td>restart</td><td>restart</td><td></td><td></td><td></td><td></td></tr><tr><td>退出码不为“0”</td><td></td><td>restart</td><td></td><td>restart</td><td></td><td></td><td></td></tr><tr><td>进程被强制杀死</td><td></td><td>restart</td><td></td><td>restart</td><td>restart</td><td>restart</td><td></td></tr><tr><td>systemd操作超时</td><td></td><td>restart</td><td></td><td>restart</td><td>restart</td><td></td><td></td></tr><tr><td>看门狗超时</td><td></td><td>restart</td><td></td><td>restart</td><td>restart</td><td></td><td>restart</td></tr></tbody></table></div><blockquote><ul><li>正常退出：退出码为”0”， 或者进程收到 <code>SIGHUP</code>, <code>SIGINT</code>, <code>SIGTERM</code>, <code>SIGPIPE</code> 信号之一，并且退出码符合 <code>SuccessExitStatus=</code> 的设置</li><li>异常退出：包括退出码不为“0”、进程被强制杀死、systemd操作超时、看门狗超时</li></ul></blockquote><ul><li><code>RestartSec</code>：配合 <code>Restart</code> 使用，重新启动服务之前的睡眠时间，设置如异常退出后，等待多少秒再次启动，默认 100ms</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">                     |----RestartSec------|</span><br><span class="line">---------|-----------|--------------------|------------|----------</span><br><span class="line"> running    stopping    stopped             starting     running</span><br></pre></td></tr></table></figure><ul><li><code>StartLimitInterval</code>、<code>StartLimitBurst</code>：重启限制次数，在 <code>StartLimitBurst=</code> 时间内尝试重启超过 <code>StartLimitInterval=</code> 次则不再重启，默认为 10s 内 5 次，如需无限制，则设置 <code>StartLimitInterval=0</code></li></ul><p><strong>重启命令</strong></p><ul><li><code>ExecReload</code>字段：重启服务时执行的命令</li></ul><h3 id="Install-区块"><a href="#Install-区块" class="headerlink" title="Install 区块"></a>Install 区块</h3><p>定义服务单元的安装和启用选项，指定如何将服务单元与目标（如启动目标或其他服务）关联。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><ul><li><p><code>WantedBy</code>：定义服务应该被哪些目标“需要”，这意味着在这些目标启动时，该服务也会被自动启动</p><ul><li><p>示例说明服务所在 target 是 multi-user.target，这个设置很通用且重要</p></li><li><p>在 enable 这个服务后，在 <code>/etc/systemd/system/multi-user.target.wants/</code> 的指定目录中创建了一个指向 <code>/usr/lib/systemd/system/XXX.service</code> 的符号链接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># systemctl enable nginx</span></span><br><span class="line">Created symlink /etc/systemd/system/multi<span class="literal">-user</span>.target.wants/nginx.service → /usr/lib/systemd/system/nginx.service.</span><br></pre></td></tr></table></figure></li><li><p>相当于为 <code>multi-user.target</code> 添加了 <code>Wants=nginx</code> 配置</p></li><li><p>当系统启动时, <code>multi-user.target</code> 启动，<code>nginx.service</code> 单元也会被启动</p></li></ul></li><li><p><code>RequiredBy</code>：类似于 <code>WantedBy</code>，但表示更强的依赖关系，如果目标启动失败，相关服务也不会启动</p></li><li><p><code>Alias</code>：当前 Unit 的别名</p></li><li><p><code>Also</code>：当前 Unit 启用（enable）或禁用（disable）时，会被同时（enable）或禁用（disable）的其他 Unit</p></li></ul><h2 id="配置路径"><a href="#配置路径" class="headerlink" title="配置路径"></a>配置路径</h2><p>配置文件存放在下面地址：</p><ul><li>系统级目录：<code>/lib/systemd/system/</code><ul><li>Linux 系统提供的默认 unit 配置文件的存放位置</li></ul></li><li>用户级目录：<code>~/.config/systemd/user/</code><ul><li>用户级的 unit 配置文件，允许普通用户定义和管理自己的服务和任务。</li></ul></li><li>本地配置目录：<code>/etc/systemd/system/</code><ul><li>本地的 unit 配置文件，用户可以在这里创建或修改 unit 文件。</li></ul></li></ul><p>优先级顺序：</p><ol><li><code>/etc/systemd/system/</code>（本地配置目录，最高优先级）</li><li><code>/run/systemd/system/</code>（临时配置，通常在运行时创建）</li><li><code>/lib/systemd/system/</code>（默认系统提供的配置）</li></ol><p>优先级从高到低，如在高低优先级的目录下有同名 unit，则采用高优先级中的配置。</p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>systemd 由一组系统命令组成，用来控制系统的方方面面。</p><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>参考链接：<a href="https://manpages.ubuntu.com/manpages/focal/zh_CN/man1/systemctl.1.html" target="_blank" rel="noopener">manpages</a>、<code>man systemctl</code></p><p><code>systemctl</code> 是 systemd 的主命令，用于控制 systemd 系统与服务。</p><ul><li>命令格式：<code>systemctl [OPTIONS...] COMMAND [UNIT...]</code></li></ul><h3 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出 systemd 所有单位</span></span><br><span class="line">systemctl list<span class="literal">-units</span></span><br><span class="line"><span class="comment"># 通过 --type= 筛选出 unit 类型</span></span><br><span class="line">systemctl list<span class="literal">-units</span> -<span class="literal">-type</span>=service</span><br><span class="line"><span class="comment"># 通过 --state= 筛选出 unit 类型</span></span><br><span class="line">systemctl list<span class="literal">-units</span> -<span class="literal">-state</span>=running</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出 systemd 所有单元和状态</span></span><br><span class="line">systemctl list<span class="literal">-unit</span><span class="literal">-files</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已加载的套接字(socket)单元</span></span><br><span class="line">systemctl list<span class="literal">-sockets</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已加载的定时器(timer)单元</span></span><br><span class="line">systemctl list<span class="literal">-timers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载服务配置</span></span><br><span class="line">systemctl daemon<span class="literal">-reload</span></span><br></pre></td></tr></table></figure><h3 id="单-Unit-命令"><a href="#单-Unit-命令" class="headerlink" title="单 Unit 命令"></a>单 Unit 命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">systemctl status [<span class="type">SERVICE</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl start [<span class="type">SERVICE</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop [<span class="type">SERVICE</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart [<span class="type">SERVICE</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启动服务</span></span><br><span class="line">systemctl enable [<span class="type">SERVICE</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机不自启动服务</span></span><br><span class="line">systemctl disable [<span class="type">SERVICE</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示服务信息</span></span><br><span class="line">systemctl show [<span class="type">SERVICE</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读服务配置文件，等同于 cat 配置文件地址</span></span><br><span class="line">systemctl cat [<span class="type">SERVICE</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑服务配置文件，相比直接 vim，编辑后可自动检查格式</span></span><br><span class="line">systemctl edit [<span class="type">SERVICE</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定 unit 的依赖关系</span></span><br><span class="line">systemctl list<span class="literal">-dependencies</span> [<span class="type">UNIT</span>]</span><br></pre></td></tr></table></figure><h2 id="journalctl"><a href="#journalctl" class="headerlink" title="journalctl"></a>journalctl</h2><p>参考链接：<a href="https://manpages.ubuntu.com/manpages/oracular/zh_CN/man1/journalctl.1.html" target="_blank" rel="noopener">manpages</a>、<code>man journalctl</code></p><p><code>journalctl</code> 用来查看 systemd 日志，包括系统日志还有各 unit 日志。</p><ul><li>服务：systemd-journald.service</li><li>命令格式：<code>journalctl [OPTIONS...] [MATCHES...]</code></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</span></span><br><span class="line">journalctl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示尾部指定行数的日志</span></span><br><span class="line">journalctl <span class="literal">-n</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时滚动显示最新日志</span></span><br><span class="line">journalctl <span class="operator">-f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核日志（不显示应用日志）</span></span><br><span class="line">journalctl <span class="literal">-k</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统本次启动的日志</span></span><br><span class="line">journalctl <span class="literal">-b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看上一次启动的日志</span></span><br><span class="line">journalctl <span class="literal">-b</span> <span class="literal">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定时间的日志</span></span><br><span class="line">journalctl -<span class="literal">-since</span>=<span class="string">"2012-10-30 18:17:16"</span></span><br><span class="line">journalctl -<span class="literal">-since</span> <span class="string">"20 min ago"</span></span><br><span class="line">journalctl -<span class="literal">-since</span> yesterday</span><br><span class="line">journalctl -<span class="literal">-since</span> <span class="string">"2015-01-10"</span> -<span class="literal">-until</span> <span class="string">"2015-01-11 03:00"</span></span><br><span class="line">journalctl -<span class="literal">-since</span> <span class="number">09</span>:<span class="number">00</span> -<span class="literal">-until</span> <span class="string">"1 hour ago"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定服务的日志</span></span><br><span class="line">journalctl /usr/lib/systemd/systemd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个 Unit 的日志</span></span><br><span class="line">journalctl <span class="literal">-u</span> nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并显示多个 Unit 的日志</span></span><br><span class="line">journalctl <span class="literal">-u</span> nginx.service <span class="literal">-u</span> php<span class="literal">-fpm</span>.service -<span class="literal">-since</span> today</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定进程的日志</span></span><br><span class="line">journalctl _PID=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个路径的脚本的日志</span></span><br><span class="line">journalctl /usr/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定用户的日志</span></span><br><span class="line">journalctl _UID=<span class="number">33</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定优先级（及其以上级别）的日志，共有8级</span></span><br><span class="line"><span class="comment"># 0: emerg</span></span><br><span class="line"><span class="comment"># 1: alert</span></span><br><span class="line"><span class="comment"># 2: crit</span></span><br><span class="line"><span class="comment"># 3: err</span></span><br><span class="line"><span class="comment"># 4: warning</span></span><br><span class="line"><span class="comment"># 5: notice</span></span><br><span class="line"><span class="comment"># 6: info</span></span><br><span class="line"><span class="comment"># 7: debug</span></span><br><span class="line">journalctl <span class="literal">-p</span> err <span class="literal">-b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志默认分页输出，--no-pager 改为正常的标准输出</span></span><br><span class="line">journalctl -<span class="literal">-no</span><span class="literal">-pager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 JSON 格式（单行）输出</span></span><br><span class="line">journalctl <span class="literal">-b</span> <span class="literal">-u</span> nginx.service <span class="literal">-o</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 JSON 格式（多行）输出，可读性更好</span></span><br><span class="line">journalctl <span class="literal">-b</span> <span class="literal">-u</span> nginx.service <span class="literal">-o</span> json<span class="literal">-pretty</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示日志占据的硬盘空间</span></span><br><span class="line">journalctl -<span class="literal">-disk</span><span class="literal">-usage</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志文件占据的最大空间</span></span><br><span class="line">journalctl -<span class="literal">-vacuum</span><span class="literal">-size</span>=<span class="number">1</span>G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志文件保存多久</span></span><br><span class="line">journalctl -<span class="literal">-vacuum</span><span class="literal">-time</span>=<span class="number">1</span>years</span><br></pre></td></tr></table></figure><h2 id="loginctl"><a href="#loginctl" class="headerlink" title="loginctl"></a>loginctl</h2><p>参考链接：<a href="https://manpages.ubuntu.com/manpages/focal/zh_CN/man1/loginctl.1.html" target="_blank" rel="noopener">manpages</a>、<code>man loginctl</code></p><p><code>loginctl</code>命令用来控制 systemd 登录管理器（systemd-logind.service）。</p><ul><li>服务：systemd-logind.service</li><li>命令格式：<code>loginctl [OPTIONS...] {COMMAND} [NAME...]</code></li></ul><p>COMMAND 分为三种类型：用户、会话和席位</p><blockquote><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>用户是操作系统中进行交互和操作的实体。在Linux中，每个用户都有一个唯一的用户名和用户ID（UID）。用户可以是普通用户、超级用户（root）等，拥有不同的权限。</p><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>会话是用户与系统之间的交互过程。当用户登录到Linux系统时，会创建一个会话。会话包含用户的环境设置、运行的程序、打开的文件等。一个用户可以同时拥有多个会话，例如在不同的终端或远程登录时。</p><h3 id="席位"><a href="#席位" class="headerlink" title="席位"></a>席位</h3><p>席位（TTY或终端）是用户与系统之间交互的接口。在Linux中，每个物理或虚拟终端都被称为一个席位。用户可以通过这些席位输入命令并接收输出。现代Linux系统通常支持多个席位，例如通过虚拟终端（tty）或图形界面（X Window System）。</p></blockquote><ul><li><p><strong>用户命令</strong></p><ul><li><p>列出当前登录用户 <code>list-users</code></p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># loginctl list-users</span></span><br><span class="line"> UID USER</span><br><span class="line">   <span class="number">0</span> root</span><br><span class="line"><span class="number">1000</span> guoyi</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> users listed.</span><br></pre></td></tr></table></figure></li><li><p>显示用户状态<code>user-status [USER...]</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># loginctl user-status root</span></span><br><span class="line">root (<span class="number">0</span>)</span><br><span class="line">           Since: Sat <span class="number">2024</span><span class="literal">-10</span><span class="literal">-05</span> <span class="number">01</span>:<span class="number">40</span>:<span class="number">47</span> PDT; <span class="number">9</span>h ago</span><br><span class="line">           State: active</span><br><span class="line">        Sessions: <span class="number">321</span> *<span class="number">304</span></span><br><span class="line">          Linger: no</span><br><span class="line">            Unit: user<span class="literal">-0</span>.slice</span><br><span class="line">                  ├─session<span class="literal">-304</span>.scope</span><br><span class="line">                  │ ├─<span class="number">57001</span> sshd: root@pts/<span class="number">1</span></span><br><span class="line">                  │ ├─<span class="number">57094</span> <span class="literal">-bash</span></span><br><span class="line">                  │ ├─<span class="number">58718</span> loginctl user<span class="literal">-status</span> root</span><br><span class="line">                  │ └─<span class="number">58719</span> pager</span><br><span class="line">                  ├─session<span class="literal">-321</span>.scope</span><br><span class="line">                  │ ├─<span class="number">58486</span> sshd: root@pts/<span class="number">2</span></span><br><span class="line">                  │ └─<span class="number">58572</span> <span class="literal">-bash</span></span><br><span class="line">                  └─user@<span class="number">0</span>.service</span><br><span class="line">                    └─init.scope</span><br><span class="line">                      ├─<span class="number">57004</span> /lib/systemd/systemd -<span class="literal">-user</span></span><br><span class="line">                      └─<span class="number">57005</span> (sd<span class="literal">-pam</span>)</span><br><span class="line"></span><br><span class="line">Oct <span class="number">05</span> <span class="number">01</span>:<span class="number">40</span>:<span class="number">48</span> ubuntu systemd[<span class="number">57004</span>]: Condition check resulted <span class="keyword">in</span> Sound System being sk&gt;</span><br><span class="line">Oct <span class="number">05</span> <span class="number">01</span>:<span class="number">40</span>:<span class="number">48</span> ubuntu systemd[<span class="number">57004</span>]: Listening on REST API socket <span class="keyword">for</span> snapd user sessi&gt;</span><br><span class="line">Oct <span class="number">05</span> <span class="number">01</span>:<span class="number">40</span>:<span class="number">48</span> ubuntu systemd[<span class="number">57004</span>]: Listening on D<span class="literal">-Bus</span> User Message Bus Socket.</span><br><span class="line">Oct <span class="number">05</span> <span class="number">01</span>:<span class="number">40</span>:<span class="number">48</span> ubuntu systemd[<span class="number">57004</span>]: Reached target Sockets.</span><br><span class="line">Oct <span class="number">05</span> <span class="number">01</span>:<span class="number">40</span>:<span class="number">48</span> ubuntu systemd[<span class="number">57004</span>]: Reached target Basic System.</span><br><span class="line">Oct <span class="number">05</span> <span class="number">01</span>:<span class="number">40</span>:<span class="number">48</span> ubuntu systemd[<span class="number">57004</span>]: Condition check resulted <span class="keyword">in</span> Sound Service being s</span><br></pre></td></tr></table></figure></li><li><p>显示用户各属性<code>show-user [USER...]</code>，可以用 <code>--all</code> 选项查看缺省空置，使用 <code>--property=</code> 查看特定属性</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># loginctl show-user root</span></span><br><span class="line">UID=<span class="number">0</span></span><br><span class="line">GID=<span class="number">0</span></span><br><span class="line">Name=root</span><br><span class="line">Timestamp=Sat <span class="number">2024</span><span class="literal">-10</span><span class="literal">-05</span> <span class="number">01</span>:<span class="number">40</span>:<span class="number">47</span> PDT</span><br><span class="line">TimestampMonotonic=<span class="number">574471117888</span></span><br><span class="line">RuntimePath=/run/user/<span class="number">0</span></span><br><span class="line">Service=user@<span class="number">0</span>.service</span><br><span class="line">Slice=user<span class="literal">-0</span>.slice</span><br><span class="line">Display=<span class="number">304</span></span><br><span class="line">State=active</span><br><span class="line">Sessions=<span class="number">321</span> <span class="number">304</span></span><br><span class="line">IdleHint=no</span><br><span class="line">IdleSinceHint=<span class="number">0</span></span><br><span class="line">IdleSinceHintMonotonic=<span class="number">0</span></span><br><span class="line">Linger=no</span><br></pre></td></tr></table></figure></li><li><p>等等</p></li></ul></li><li><p><strong>会话命令</strong></p><ul><li><p>列出当前所有会话 <code>list-sessions</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># loginctl list-sessions</span></span><br><span class="line">SESSION  UID USER  SEAT  TTY</span><br><span class="line">      <span class="number">2</span> <span class="number">1000</span> guoyi seat0 tty2</span><br><span class="line">    <span class="number">304</span>    <span class="number">0</span> root</span><br><span class="line">    <span class="number">321</span>    <span class="number">0</span> root</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> sessions listed.</span><br></pre></td></tr></table></figure></li><li><p>显示简洁的会话状态信息<code>session-status [ID...]</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># loginctl session-status 304</span></span><br><span class="line"><span class="number">304</span> - root (<span class="number">0</span>)</span><br><span class="line">           Since: Sat <span class="number">2024</span><span class="literal">-10</span><span class="literal">-05</span> <span class="number">01</span>:<span class="number">40</span>:<span class="number">47</span> PDT; <span class="number">9</span>h ago</span><br><span class="line">          Leader: <span class="number">57001</span> (sshd)</span><br><span class="line">          Remote: <span class="number">192.168</span>.<span class="number">45.1</span></span><br><span class="line">         Service: sshd; type tty; <span class="class"><span class="keyword">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class">           <span class="title">State</span>: <span class="title">active</span></span></span><br><span class="line"><span class="class">            <span class="title">Unit</span>: <span class="title">session</span>-304.<span class="title">scope</span></span></span><br><span class="line"><span class="class">                  ├─57001 <span class="title">sshd</span>: <span class="title">root</span>@<span class="title">pts</span>/1</span></span><br><span class="line"><span class="class">                  ├─57094 -<span class="title">bash</span></span></span><br><span class="line"><span class="class">                  ├─58744 <span class="title">loginctl</span> <span class="title">session</span>-<span class="title">status</span> 304</span></span><br><span class="line"><span class="class">                  └─58745 <span class="title">pager</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Oct</span> 05 01:40:48 <span class="title">ubuntu</span> <span class="title">systemd</span>[1]: <span class="title">Started</span> <span class="title">Session</span> 304 <span class="title">of</span> <span class="title">user</span> <span class="title">root</span>.</span></span><br></pre></td></tr></table></figure></li><li><p>显示会话的各项属性值<code>show-session [ID...]</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># loginctl show-session 321</span></span><br><span class="line">Id=<span class="number">321</span></span><br><span class="line">User=<span class="number">0</span></span><br><span class="line">Name=root</span><br><span class="line">Timestamp=Sat <span class="number">2024</span><span class="literal">-10</span><span class="literal">-05</span> <span class="number">10</span>:<span class="number">31</span>:<span class="number">06</span> PDT</span><br><span class="line">TimestampMonotonic=<span class="number">606290337700</span></span><br><span class="line">VTNr=<span class="number">0</span></span><br><span class="line">Remote=yes</span><br><span class="line">RemoteHost=<span class="number">192.168</span>.<span class="number">45.1</span></span><br><span class="line">Service=sshd</span><br><span class="line">Scope=session<span class="literal">-321</span>.scope</span><br><span class="line">Leader=<span class="number">58486</span></span><br><span class="line">Audit=<span class="number">321</span></span><br><span class="line">Type=tty</span><br><span class="line"><span class="class"><span class="keyword">Class</span>=<span class="title">user</span></span></span><br><span class="line"><span class="class"><span class="title">Active</span>=<span class="title">yes</span></span></span><br><span class="line"><span class="class"><span class="title">State</span>=<span class="title">active</span></span></span><br><span class="line"><span class="class"><span class="title">IdleHint</span>=<span class="title">no</span></span></span><br><span class="line"><span class="class"><span class="title">IdleSinceHint</span>=0</span></span><br><span class="line"><span class="class"><span class="title">IdleSinceHintMonotonic</span>=0</span></span><br><span class="line"><span class="class"><span class="title">LockedHint</span>=<span class="title">no</span></span></span><br></pre></td></tr></table></figure></li><li><p>等等</p></li></ul></li><li><p><strong>席位命令</strong></p><ul><li><p>显示所有可用席位<code>list-seats</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># loginctl list-seats</span></span><br><span class="line">SEAT</span><br><span class="line">seat0</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> seats listed.</span><br></pre></td></tr></table></figure></li><li><p>等等</p></li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://systemd.io" target="_blank" rel="noopener">官方文档</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;systemd 是 Linux 的系统和服务管理器。作为系统启动的第一个进程，初始化系统并且管理其他用户服务。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://gy23333.github.io/categories/Linux/"/>
    
    
    <category term="systemd" scheme="https://gy23333.github.io/tags/systemd/"/>
    
    <category term="Linux" scheme="https://gy23333.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://gy23333.github.io/2024/09/19/Docker/"/>
    <id>https://gy23333.github.io/2024/09/19/Docker/</id>
    <published>2024-09-19T05:48:28.000Z</published>
    <updated>2024-11-11T03:57:58.129Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>基于 Go 的开源应用容器引擎 Docker</p><a id="more"></a><h1 id="快速了解-Docker"><a href="#快速了解-Docker" class="headerlink" title="快速了解 Docker"></a>快速了解 Docker</h1><p>快速了解 docker 的小视频</p><p>【docker是什么？和kubernetes(k8s)是什么关系？-哔哩哔哩】 </p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1102796777&bvid=BV1aA4m1w7Ew&cid=1501859959&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><ul><li>Docker 是一款能将程序和环境一起打包并运行的工具软件。Docker 作为中间层，使得应用和机器基础架构分离，从而实现不同架构下的快速交付部署。</li><li>程序和环境打包构建成一个容器镜像文件，根据 Dockerfile 构建出容器镜像，Dockerfile 中设置包括指定环境的基础镜像（如 ubuntu/centos、python/go 等等）以及后续需执行的命令（比如安装依赖、运行服务等）。</li><li>部署环境部署容器镜像，就会在 Linux 上以一个进程的形式运行该 docker 容器，利用操作系统的用户空间构建出应用所需的环境，运行相应服务。</li><li>Docker Registy：相当于 docker 镜像的代码仓，也就是镜像仓，可以将 docker 镜像推到 Registy，部署环境再从 Registy 拉取镜像。</li><li>Docker Compose：一整套服务经常包含多个 docker 镜像部署到单节点，这时候就可以使用 Docker Compose 来部署，通过 yaml 文件呢规定各个 docker 镜像间的部署顺序与其他部署配置信息。</li><li>Docker Swarm：解决一整套服务在多个节点间的部署问题，如迁移、扩缩容。</li><li>k8s：与 Docker Swarm 类似，也是解决一整套服务在多个节点间的部署问题，如迁移、扩缩容。</li></ul><h1 id="虚拟化过程"><a href="#虚拟化过程" class="headerlink" title="虚拟化过程"></a>虚拟化过程</h1><h2 id="物理机"><a href="#物理机" class="headerlink" title="物理机"></a>物理机</h2><p>物理机存在的痛点：</p><ul><li>各个应用会共享依赖库，所以有可能存在不同应用依赖有冲突的问题，比如需要同一个依赖的不同版本</li><li>低使用率，可能仅有几个应用在运行，却得占用一整台物理机</li><li>爆炸半径大，比如改变一个应用的依赖，可以会导致另一应用变得不可用</li><li>开关机慢</li><li>创建和搭建物理机慢</li></ul><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241013193557973.png" alt="image-20241013193557973" style="zoom:40%;" /></p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>物理机上的 Hypervisor 会从物理机分离出独立的资源池，在这个资源池中生成虚拟化硬件以及与物理机相同的上方结构。</p><p>Hypervisor 分为两类：</p><ul><li>Type 1：不依赖物理机上的 OS，比如 VMware、Hyper-V</li><li>Type 2：依赖物理机上的 OS，比如 Virtual Box</li></ul><p>虚拟机一定程度上缓解了物理机的问题。</p><ul><li>应用运行在不同的虚拟机上，实现相互隔离，解决了依赖冲突问题</li><li>可以根据需要分配相应的规格，提高使用率</li><li>减小了爆炸半径</li><li>开关机变为分钟级</li><li>最大的好处：可以快速构建虚拟机</li></ul><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241014005509938.png" alt="image-20241014005509938" style="zoom:40%;" /></p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器的载体可以是物理机也可以是虚拟机，和虚拟机的 Hypervisor 相对，容器通过 Container Runtime 控制。</p><p>容器与虚拟机的最大不同点：</p><ul><li>虚拟机复制了一份 Linux 内核</li><li>容器并不存在内核，而是与载体的 OS 共用一个内核</li></ul><p>容器的好处：</p><ul><li>无依赖冲突问题</li><li>进一步提高了资源利用率。虚拟机还需要构造一套 OS，而容器可以直接依赖于宿主机的 OS</li><li>进一步减小了爆炸半径。每个容器所占的资源相对更少了，爆炸半径也就相对减小。不过其实隔离性是不如虚拟机的</li><li>开关容器时间短（秒级）</li><li>极快速部署</li></ul><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241014015955548.png" alt="image-20241014015955548" style="zoom:40%;" /></p><h2 id="日常结构"><a href="#日常结构" class="headerlink" title="日常结构"></a>日常结构</h2><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241015021636441.png" alt="image-20241015021636441" style="zoom:60%;" /></p><h1 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h1><p>Docker 采用 client-server 架构，由 Docker Client 发出指令，命令 Docker daemon 构建、运行、分发 Docker containers。Docker Client 和 Docker daemon 可以运行在同一个节点，也可以用 Docker Client 控制远程的 Docker daemon。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/docker-architecture.webp" alt=""></p><h2 id="镜像-Image"><a href="#镜像-Image" class="headerlink" title="镜像 Image"></a>镜像 Image</h2><p>容器镜像是一个由程序和环境构建出的标准包，包括了用来运行容器所需的文件、二进制文件、库以及配置。</p><h2 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器 Container"></a>容器 Container</h2><h1 id="Docker-从构建到部署"><a href="#Docker-从构建到部署" class="headerlink" title="Docker 从构建到部署"></a>Docker 从构建到部署</h1><h2 id="Docker-镜像构建"><a href="#Docker-镜像构建" class="headerlink" title="Docker 镜像构建"></a>Docker 镜像构建</h2><h2 id="Docker-镜像仓"><a href="#Docker-镜像仓" class="headerlink" title="Docker 镜像仓"></a>Docker 镜像仓</h2><h2 id="Docker-容器部署"><a href="#Docker-容器部署" class="headerlink" title="Docker 容器部署"></a>Docker 容器部署</h2><h1 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h1><p>查看正在运行的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看所有容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>开启容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><p>停止容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;CONTAINER ID&gt; &lt;CLI&gt;</span><br></pre></td></tr></table></figure><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h1 id="Docker-Swarm-与-k8s"><a href="#Docker-Swarm-与-k8s" class="headerlink" title="Docker Swarm 与 k8s"></a>Docker Swarm 与 k8s</h1><h1 id="Ubuntu-中安装-Docker-Engine"><a href="#Ubuntu-中安装-Docker-Engine" class="headerlink" title="Ubuntu 中安装 Docker Engine"></a>Ubuntu 中安装 Docker Engine</h1><p><a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/ubuntu/</a></p><ol><li><p>卸载老版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pkg <span class="keyword">in</span> docker.io docker<span class="literal">-doc</span> docker<span class="literal">-compose</span> docker<span class="literal">-compose</span><span class="literal">-v2</span> podman<span class="literal">-docker</span> containerd runc; <span class="keyword">do</span> sudo apt<span class="literal">-get</span> remove <span class="variable">$pkg</span>; done</span><br></pre></td></tr></table></figure></li><li><p>更新 Ubuntu 源列表</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt<span class="literal">-get</span> update</span><br></pre></td></tr></table></figure></li><li><p>安装 docker 依赖包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt<span class="literal">-get</span> install ca<span class="literal">-certificates</span> curl</span><br></pre></td></tr></table></figure></li><li><p>添加 docker 官方 GPG 密钥</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install <span class="literal">-m</span> <span class="number">0755</span> <span class="literal">-d</span> /etc/apt/keyrings</span><br><span class="line">curl <span class="literal">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="literal">-o</span> /etc/apt/keyrings/docker.asc</span><br><span class="line">chmod a+r /etc/apt/keyrings/docker.asc</span><br></pre></td></tr></table></figure></li><li><p>添加 docker 官方库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo \</span><br><span class="line">  <span class="string">"deb [arch=<span class="variable">$</span>(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="variable">$</span>(. /etc/os-release &amp;&amp; echo "</span><span class="variable">$VERSION_CODENAME</span><span class="string">") stable"</span> | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure></li><li><p>更新 Ubuntu 源列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure></li><li><p>查看 docker 服务运行状态</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.docker.com" target="_blank" rel="noopener">docker 官网</a></li><li><a href="https://www.youtube.com/watch?v=RqTEHSBrYFw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=RqTEHSBrYFw</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;基于 Go 的开源应用容器引擎 Docker&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://gy23333.github.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://gy23333.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>FRRouting</title>
    <link href="https://gy23333.github.io/2024/09/19/FRRouting/"/>
    <id>https://gy23333.github.io/2024/09/19/FRRouting/</id>
    <published>2024-09-19T05:48:11.000Z</published>
    <updated>2024-11-11T03:57:58.128Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>FRRouting（FRR）是一款提供 IP 路由服务的开源套件，支持 BGP、OSPF、RIP、IS-IS 等等路由协议。FRR 可以在网络栈中与其他路由器交换路由信息，做出路由策略决策，并将决策通知给其他层。</p><a id="more"></a><h1 id="FRR-安装"><a href="#FRR-安装" class="headerlink" title="FRR 安装"></a>FRR 安装</h1><p>Ubuntu 20.04 LTS 安装 FRR，且以 root 权限运行</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install \</span><br><span class="line">   git autoconf automake libtool make libreadline-dev texinfo \</span><br><span class="line">   pkg-config libpam0g-dev libjson-c-dev bison flex \</span><br><span class="line">   libc-ares-dev python3-dev python3-sphinx \</span><br><span class="line">   install-info build-essential libsnmp-dev perl \</span><br><span class="line">   protobuf-c-compiler libprotobuf-c-dev \</span><br><span class="line">   libcap-dev libelf-dev libunwind-dev</span><br><span class="line">apt-get install cmake libpcre2-dev</span><br></pre></td></tr></table></figure><h2 id="安装-libyang"><a href="#安装-libyang" class="headerlink" title="安装 libyang"></a>安装 libyang</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;CESNET&#x2F;libyang.git</span><br><span class="line">cd libyang</span><br><span class="line">git checkout v2.1.128</span><br><span class="line">mkdir build; cd build</span><br><span class="line">cmake --install-prefix &#x2F;usr \</span><br><span class="line">      -D CMAKE_BUILD_TYPE:String&#x3D;&quot;Release&quot; ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="安装-FRR"><a href="#安装-FRR" class="headerlink" title="安装 FRR"></a>安装 FRR</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;frrouting&#x2F;frr.git frr</span><br><span class="line">cd frr</span><br><span class="line">.&#x2F;bootstrap.sh</span><br><span class="line">.&#x2F;configure \</span><br><span class="line">    --prefix&#x3D;&#x2F;usr \</span><br><span class="line">    --includedir&#x3D;\$&#123;prefix&#125;&#x2F;include \</span><br><span class="line">    --bindir&#x3D;\$&#123;prefix&#125;&#x2F;bin \</span><br><span class="line">    --sbindir&#x3D;\$&#123;prefix&#125;&#x2F;lib&#x2F;frr \</span><br><span class="line">    --libdir&#x3D;\$&#123;prefix&#125;&#x2F;lib&#x2F;frr \</span><br><span class="line">    --libexecdir&#x3D;\$&#123;prefix&#125;&#x2F;lib&#x2F;frr \</span><br><span class="line">    --sysconfdir&#x3D;&#x2F;etc \</span><br><span class="line">    --localstatedir&#x3D;&#x2F;var \</span><br><span class="line">    --with-moduledir&#x3D;\$&#123;prefix&#125;&#x2F;lib&#x2F;frr&#x2F;modules \</span><br><span class="line">    --enable-configfile-mask&#x3D;0640 \</span><br><span class="line">    --enable-logfile-mask&#x3D;0640 \</span><br><span class="line">    --enable-snmp&#x3D;agentx \</span><br><span class="line">    --enable-multipath&#x3D;64 \</span><br><span class="line">    --enable-user&#x3D;root \</span><br><span class="line">    --enable-group&#x3D;root \</span><br><span class="line">    --enable-vty-group&#x3D;root \</span><br><span class="line">    --with-pkg-git-version \</span><br><span class="line">    --with-pkg-extra-version&#x3D;-MyOwnFRRVersion</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="生成配置"><a href="#生成配置" class="headerlink" title="生成配置"></a>生成配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo install -m 775 -o root -g root -d &#x2F;var&#x2F;log&#x2F;frr</span><br><span class="line">sudo install -m 775 -o root -g root -d &#x2F;etc&#x2F;frr</span><br><span class="line">sudo install -m 640 -o root -g root tools&#x2F;etc&#x2F;frr&#x2F;vtysh.conf &#x2F;etc&#x2F;frr&#x2F;vtysh.conf</span><br><span class="line">sudo install -m 640 -o root -g root tools&#x2F;etc&#x2F;frr&#x2F;frr.conf &#x2F;etc&#x2F;frr&#x2F;frr.conf</span><br><span class="line">sudo install -m 640 -o root -g root tools&#x2F;etc&#x2F;frr&#x2F;daemons.conf &#x2F;etc&#x2F;frr&#x2F;daemons.conf</span><br><span class="line">sudo install -m 640 -o root -g root tools&#x2F;etc&#x2F;frr&#x2F;daemons &#x2F;etc&#x2F;frr&#x2F;daemons</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo install -m 644 tools&#x2F;frr.service &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;frr.service</span><br><span class="line">sudo systemctl enable frr</span><br></pre></td></tr></table></figure><p>查看安装完成的 FRR</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/home/guoyi/frr/frr<span class="comment"># systemctl status frr</span></span><br><span class="line">● frr.service - FRRouting</span><br><span class="line">     Loaded: loaded (/etc/systemd/system/frr.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Wed <span class="number">2024</span><span class="literal">-10</span><span class="literal">-16</span> <span class="number">05</span>:<span class="number">46</span>:<span class="number">16</span> PDT; <span class="number">1</span>s ago</span><br><span class="line">       Docs: https://frrouting.readthedocs.io/en/latest/setup.html</span><br><span class="line">    <span class="keyword">Process</span>: <span class="number">55748</span> ExecStart=/usr/lib/frr/frrinit.sh start (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line">   Main PID: <span class="number">55760</span> (watchfrr)</span><br><span class="line">     Status: <span class="string">"FRR Operational"</span></span><br><span class="line">      Tasks: <span class="number">8</span> (limit: <span class="number">4540</span>)</span><br><span class="line">     Memory: <span class="number">14.5</span>M</span><br><span class="line">     CGroup: /system.slice/frr.service</span><br><span class="line">             ├─<span class="number">55760</span> /usr/lib/frr/watchfrr <span class="literal">-d</span> <span class="operator">-F</span> traditional zebra mgmtd staticd</span><br><span class="line">             ├─<span class="number">55771</span> /usr/lib/frr/zebra <span class="literal">-d</span> <span class="operator">-F</span> traditional <span class="literal">-A</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="literal">-s</span> <span class="number">90000000</span></span><br><span class="line">             ├─<span class="number">55776</span> /usr/lib/frr/mgmtd <span class="literal">-d</span> <span class="operator">-F</span> traditional <span class="literal">-A</span> <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">             └─<span class="number">55778</span> /usr/lib/frr/staticd <span class="literal">-d</span> <span class="operator">-F</span> traditional <span class="literal">-A</span> <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">Oct <span class="number">16</span> <span class="number">05</span>:<span class="number">46</span>:<span class="number">16</span> ubuntu zebra[<span class="number">55771</span>]: [<span class="type">VTVCM</span>-<span class="type">Y2NW3</span>] Configuration Read <span class="keyword">in</span> Took: <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Oct <span class="number">16</span> <span class="number">05</span>:<span class="number">46</span>:<span class="number">16</span> ubuntu mgmtd[<span class="number">55776</span>]: [<span class="type">VTVCM</span>-<span class="type">Y2NW3</span>] Configuration Read <span class="keyword">in</span> Took: <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Oct <span class="number">16</span> <span class="number">05</span>:<span class="number">46</span>:<span class="number">16</span> ubuntu watchfrr[<span class="number">55760</span>]: [<span class="type">VTVCM</span>-<span class="type">Y2NW3</span>] Configuration Read <span class="keyword">in</span> Took: <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Oct <span class="number">16</span> <span class="number">05</span>:<span class="number">46</span>:<span class="number">16</span> ubuntu staticd[<span class="number">55778</span>]: [<span class="type">VTVCM</span>-<span class="type">Y2NW3</span>] Configuration Read <span class="keyword">in</span> Took: <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Oct <span class="number">16</span> <span class="number">05</span>:<span class="number">46</span>:<span class="number">16</span> ubuntu watchfrr[<span class="number">55760</span>]: [<span class="type">QDG3Y</span>-<span class="type">BY5TN</span>] zebra state -&gt; up : connect succeeded</span><br><span class="line">Oct <span class="number">16</span> <span class="number">05</span>:<span class="number">46</span>:<span class="number">16</span> ubuntu watchfrr[<span class="number">55760</span>]: [<span class="type">QDG3Y</span>-<span class="type">BY5TN</span>] mgmtd state -&gt; up : connect succeeded</span><br><span class="line">Oct <span class="number">16</span> <span class="number">05</span>:<span class="number">46</span>:<span class="number">16</span> ubuntu watchfrr[<span class="number">55760</span>]: [<span class="type">QDG3Y</span>-<span class="type">BY5TN</span>] staticd state -&gt; up : connect succeeded</span><br><span class="line">Oct <span class="number">16</span> <span class="number">05</span>:<span class="number">46</span>:<span class="number">16</span> ubuntu watchfrr[<span class="number">55760</span>]: [<span class="type">KWE5Q</span>-<span class="type">QNGFC</span>] all daemons up, doing startup<span class="literal">-complete</span> notify</span><br><span class="line">Oct <span class="number">16</span> <span class="number">05</span>:<span class="number">46</span>:<span class="number">16</span> ubuntu frrinit.sh[<span class="number">55748</span>]:  * Started watchfrr</span><br><span class="line">Oct <span class="number">16</span> <span class="number">05</span>:<span class="number">46</span>:<span class="number">16</span> ubuntu systemd[<span class="number">1</span>]: Started FRRouting.</span><br></pre></td></tr></table></figure><h2 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h2><p>启动 frr 时报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Oct 15 09:02:45 ubuntu systemd[1]: Starting FRRouting...</span><br><span class="line">Oct 15 09:02:45 ubuntu frrinit.sh[28693]:  * Starting watchfrr with command: &#39;  &#x2F;usr&#x2F;lib&#x2F;frr&#x2F;watchfrr  -d  -F traditional   zebra mgmtd staticd&#39;</span><br><span class="line">Oct 15 09:02:45 ubuntu frrinit.sh[28703]: &#x2F;usr&#x2F;lib&#x2F;frr&#x2F;watchfrr: error while loading shared libraries: libyang.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">Oct 15 09:02:45 ubuntu frrinit.sh[28693]:  * Failed to start watchfrr!</span><br></pre></td></tr></table></figure><p>查到 libyang 已安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~&#x2F;frr&#x2F;libyang# ll &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libyang.so</span><br><span class="line">lrwxrwxrwx 1 root root 12 Oct 15 08:22 &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libyang.so -&gt; libyang.so.2</span><br></pre></td></tr></table></figure><p>但 watchfrr 无法链接到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~&#x2F;frr&#x2F;libyang# ldd &#x2F;usr&#x2F;lib&#x2F;frr&#x2F;watchfrr</span><br><span class="line">linux-vdso.so.1 (0x00007fff64d68000)</span><br><span class="line">libfrr.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;frr&#x2F;libfrr.so.0 (0x00007f749a134000)</span><br><span class="line">libpthread.so.0 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpthread.so.0 (0x00007f749a0f8000)</span><br><span class="line">libc.so.6 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 (0x00007f7499f06000)</span><br><span class="line">libcap.so.2 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libcap.so.2 (0x00007f7499efd000)</span><br><span class="line">libunwind.so.8 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libunwind.so.8 (0x00007f7499ee0000)</span><br><span class="line">libcrypt.so.1 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libcrypt.so.1 (0x00007f7499ea5000)</span><br><span class="line">libdl.so.2 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libdl.so.2 (0x00007f7499e9d000)</span><br><span class="line">libm.so.6 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libm.so.6 (0x00007f7499d4e000)</span><br><span class="line">libprotobuf-c.so.1 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libprotobuf-c.so.1 (0x00007f7499d43000)</span><br><span class="line">libyang.so.2 &#x3D;&gt; not found</span><br><span class="line">libjson-c.so.4 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjson-c.so.4 (0x00007f7499d31000)</span><br><span class="line">&#x2F;lib64&#x2F;ld-linux-x86-64.so.2 (0x00007f749a387000)</span><br><span class="line">liblzma.so.5 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;liblzma.so.5 (0x00007f7499d08000)</span><br></pre></td></tr></table></figure><p>更新动态链接库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldconfig</span><br></pre></td></tr></table></figure><h1 id="FRR-基础"><a href="#FRR-基础" class="headerlink" title="FRR 基础"></a>FRR 基础</h1><h2 id="Daemons-配置文件"><a href="#Daemons-配置文件" class="headerlink" title="Daemons 配置文件"></a>Daemons 配置文件</h2><p>Daemons 配置文件用来设置 FRR 的哪些 daemon 需要在 FRR 启动时被激活，并且设置 daemon 启动时的参数。</p><p>通常放在 <code>/etc/frr/daemons</code>，如果修改了里面的内容，需要重启 FRR 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"># This file tells the frr package which daemons to start.</span><br><span class="line">#</span><br><span class="line"># Sample configurations for these daemons can be found in</span><br><span class="line"># &#x2F;usr&#x2F;share&#x2F;doc&#x2F;frr&#x2F;examples&#x2F;.</span><br><span class="line">#</span><br><span class="line"># ATTENTION:</span><br><span class="line">#</span><br><span class="line"># When activating a daemon for the first time, a config file, even if it is</span><br><span class="line"># empty, has to be present *and* be owned by the user and group &quot;frr&quot;, else</span><br><span class="line"># the daemon will not be started by &#x2F;etc&#x2F;init.d&#x2F;frr. The permissions should</span><br><span class="line"># be u&#x3D;rw,g&#x3D;r,o&#x3D;.</span><br><span class="line"># When using &quot;vtysh&quot; such a config file is also needed. It should be owned by</span><br><span class="line"># group &quot;frrvty&quot; and set to ug&#x3D;rw,o&#x3D; though. Check &#x2F;etc&#x2F;pam.d&#x2F;frr, too.</span><br><span class="line">#</span><br><span class="line"># The watchfrr, zebra and staticd daemons are always started.</span><br><span class="line">#</span><br><span class="line">bgpd&#x3D;no</span><br><span class="line">ospfd&#x3D;yes</span><br><span class="line">ospf6d&#x3D;no</span><br><span class="line">ripd&#x3D;no</span><br><span class="line">ripngd&#x3D;no</span><br><span class="line">isisd&#x3D;no</span><br><span class="line">pimd&#x3D;no</span><br><span class="line">pim6d&#x3D;no</span><br><span class="line">ldpd&#x3D;no</span><br><span class="line">nhrpd&#x3D;no</span><br><span class="line">eigrpd&#x3D;no</span><br><span class="line">babeld&#x3D;no</span><br><span class="line">sharpd&#x3D;no</span><br><span class="line">pbrd&#x3D;no</span><br><span class="line">bfdd&#x3D;no</span><br><span class="line">fabricd&#x3D;no</span><br><span class="line">vrrpd&#x3D;no</span><br><span class="line">pathd&#x3D;no</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># If this option is set the &#x2F;etc&#x2F;init.d&#x2F;frr script automatically loads</span><br><span class="line"># the config via &quot;vtysh -b&quot; when the servers are started.</span><br><span class="line"># Check &#x2F;etc&#x2F;pam.d&#x2F;frr if you intend to use &quot;vtysh&quot;!</span><br><span class="line">#</span><br><span class="line">vtysh_enable&#x3D;yes</span><br><span class="line">zebra_options&#x3D;&quot;  -A 127.0.0.1 -s 90000000&quot;</span><br><span class="line">mgmtd_options&#x3D;&quot;  -A 127.0.0.1&quot;</span><br><span class="line">bgpd_options&#x3D;&quot;   -A 127.0.0.1&quot;</span><br><span class="line">ospfd_options&#x3D;&quot;  -A 127.0.0.1&quot;</span><br><span class="line">ospf6d_options&#x3D;&quot; -A ::1&quot;</span><br><span class="line">ripd_options&#x3D;&quot;   -A 127.0.0.1&quot;</span><br><span class="line">ripngd_options&#x3D;&quot; -A ::1&quot;</span><br><span class="line">isisd_options&#x3D;&quot;  -A 127.0.0.1&quot;</span><br><span class="line">pimd_options&#x3D;&quot;   -A 127.0.0.1&quot;</span><br><span class="line">pim6d_options&#x3D;&quot;  -A ::1&quot;</span><br><span class="line">ldpd_options&#x3D;&quot;   -A 127.0.0.1&quot;</span><br><span class="line">nhrpd_options&#x3D;&quot;  -A 127.0.0.1&quot;</span><br><span class="line">eigrpd_options&#x3D;&quot; -A 127.0.0.1&quot;</span><br><span class="line">babeld_options&#x3D;&quot; -A 127.0.0.1&quot;</span><br><span class="line">sharpd_options&#x3D;&quot; -A 127.0.0.1&quot;</span><br><span class="line">pbrd_options&#x3D;&quot;   -A 127.0.0.1&quot;</span><br><span class="line">staticd_options&#x3D;&quot;-A 127.0.0.1&quot;</span><br><span class="line">bfdd_options&#x3D;&quot;   -A 127.0.0.1&quot;</span><br><span class="line">fabricd_options&#x3D;&quot;-A 127.0.0.1&quot;</span><br><span class="line">vrrpd_options&#x3D;&quot;  -A 127.0.0.1&quot;</span><br><span class="line">pathd_options&#x3D;&quot;  -A 127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># If you want to pass a common option to all daemons, you can use the</span><br><span class="line"># &quot;frr_global_options&quot; variable.</span><br><span class="line">#</span><br><span class="line">#frr_global_options&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># The list of daemons to watch is automatically generated by the init script.</span><br><span class="line"># This variable can be used to pass options to watchfrr that will be passed</span><br><span class="line"># prior to the daemon list.</span><br><span class="line">#</span><br><span class="line"># To make watchfrr create&#x2F;join the specified netns, add the the &quot;--netns&quot;</span><br><span class="line"># option here. It will only have an effect in &#x2F;etc&#x2F;frr&#x2F;&lt;somename&gt;&#x2F;daemons, and</span><br><span class="line"># you need to start FRR with &quot;&#x2F;usr&#x2F;lib&#x2F;frr&#x2F;frrinit.sh start &lt;somename&gt;&quot;.</span><br><span class="line">#</span><br><span class="line">#watchfrr_options&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># configuration profile</span><br><span class="line">#</span><br><span class="line">#frr_profile&#x3D;&quot;traditional&quot;</span><br><span class="line">#frr_profile&#x3D;&quot;datacenter&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># This is the maximum number of FD&#39;s that will be available.  Upon startup this</span><br><span class="line"># is read by the control files and ulimit is called.  Uncomment and use a</span><br><span class="line"># reasonable value for your setup if you are expecting a large number of peers</span><br><span class="line"># in say BGP.</span><br><span class="line">#</span><br><span class="line">#MAX_FDS&#x3D;1024</span><br><span class="line"></span><br><span class="line"># Uncomment this option if you want to run FRR as a non-root user. Note that</span><br><span class="line"># you should know what you are doing since most of the daemons need root</span><br><span class="line"># to work. This could be useful if you want to run FRR in a container</span><br><span class="line"># for instance.</span><br><span class="line"># FRR_NO_ROOT&#x3D;&quot;yes&quot;</span><br><span class="line"></span><br><span class="line"># For any daemon, you can specify a &quot;wrap&quot; command to start instead of starting</span><br><span class="line"># the daemon directly. This will simply be prepended to the daemon invocation.</span><br><span class="line"># These variables have the form daemon_wrap, where &#39;daemon&#39; is the name of the</span><br><span class="line"># daemon (the same pattern as the daemon_options variables).</span><br><span class="line">#</span><br><span class="line"># Note that when daemons are started, they are told to daemonize with the &#96;-d&#96;</span><br><span class="line"># option. This has several implications. For one, the init script expects that</span><br><span class="line"># when it invokes a daemon, the invocation returns immediately. If you add a</span><br><span class="line"># wrap command here, it must comply with this expectation and daemonize as</span><br><span class="line"># well, or the init script will never return. Furthermore, because daemons are</span><br><span class="line"># themselves daemonized with -d, you must ensure that your wrapper command is</span><br><span class="line"># capable of following child processes after a fork() if you need it to do so.</span><br><span class="line">#</span><br><span class="line"># If your desired wrapper does not support daemonization, you can wrap it with</span><br><span class="line"># a utility program that daemonizes programs, such as &#39;daemonize&#39;. An example</span><br><span class="line"># of this might look like:</span><br><span class="line">#</span><br><span class="line"># bgpd_wrap&#x3D;&quot;&#x2F;usr&#x2F;bin&#x2F;daemonize &#x2F;usr&#x2F;bin&#x2F;mywrapper&quot;</span><br><span class="line">#</span><br><span class="line"># This is particularly useful for programs which record processes but lack</span><br><span class="line"># daemonization options, such as perf and rr.</span><br><span class="line">#</span><br><span class="line"># If you wish to wrap all daemons in the same way, you may set the &quot;all_wrap&quot;</span><br><span class="line"># variable.</span><br><span class="line">#</span><br><span class="line">#all_wrap&#x3D;&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="crash-日志"><a href="#crash-日志" class="headerlink" title="crash 日志"></a>crash 日志</h2><p>FRR 各个 daemon 的 crash 日志储存在固定位置，即 <code>/var/tmp/frr/&lt;daemon&gt;[-&lt;instance&gt;].&lt;pid&gt;/crashlog</code></p><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><p>在 frr.conf 中可以配置日志文件输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log file &#x2F;var&#x2F;log&#x2F;frr&#x2F;frr.log [logging_level]</span><br></pre></td></tr></table></figure><h1 id="vtysh"><a href="#vtysh" class="headerlink" title="vtysh"></a>vtysh</h1><p>root 权限或者 frrvty 权限可以使用 <code>vtysh</code> 命令进入交互模式</p><h2 id="show-命令"><a href="#show-命令" class="headerlink" title="show 命令"></a>show 命令</h2><ul><li><code>show ip ospf neighbor</code> 查看 OSPF 邻居，其中<ul><li>Neighbor ID：邻居的 Router ID</li><li>Pri：邻居的 Priority</li><li>State：邻居状态</li></ul></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">568</span>ade633bf9<span class="comment"># show ip ospf neighbor</span></span><br><span class="line"></span><br><span class="line">Neighbor ID     Pri State           Up Time         Dead Time Address         Interface                        RXmtL RqstL DBsmL</span><br><span class="line"><span class="number">12.12</span>.<span class="number">0.2</span>         <span class="number">1</span> Full/Backup     <span class="number">22</span>h48m43s         <span class="number">37.418</span>s <span class="number">11.11</span>.<span class="number">0.3</span>       eth1:<span class="number">11.11</span>.<span class="number">0.2</span>                       <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br></pre></td></tr></table></figure><p>FRR 和其他路由器交换路由信息、</p><p>支持北向grpc接口 或 vtysh 命令</p><p>进入配置模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure terminal</span><br></pre></td></tr></table></figure><p>配置网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface ens38</span><br></pre></td></tr></table></figure><p>VIP是<code>192.168.1.1/24</code>，你要发布到OSPF区域0，且设置成本为10</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vtysh</span><br><span class="line">configure terminal</span><br><span class="line">interface eth0</span><br><span class="line"> ip address 192.168.1.1&#x2F;24</span><br><span class="line">!</span><br><span class="line">router ospf</span><br><span class="line"> </span><br><span class="line"> network 192.168.1.0&#x2F;24 area 0</span><br><span class="line">!</span><br><span class="line">interface eth0</span><br><span class="line"> ip ospf cost 10</span><br><span class="line"> </span><br><span class="line">end</span><br><span class="line">write memory</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vtysh</span><br><span class="line">configure terminal</span><br><span class="line">interface eth0</span><br><span class="line"> no ip address 192.168.1.1&#x2F;24</span><br><span class="line">!</span><br><span class="line">router ospf 1</span><br><span class="line"> no network 192.168.1.0&#x2F;24 area 0</span><br><span class="line">!</span><br><span class="line">interface eth0</span><br><span class="line"> ip ospf cost 10</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show ip route ospf</span><br></pre></td></tr></table></figure><p>查看 DR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show ip ospf neighbor</span><br></pre></td></tr></table></figure><p> 查看 ospf 路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show ip ospf route</span><br></pre></td></tr></table></figure><h1 id="FRR-配置"><a href="#FRR-配置" class="headerlink" title="FRR 配置"></a>FRR 配置</h1><h2 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h2><ul><li><p>查看当前配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show running-config</span><br></pre></td></tr></table></figure></li><li><p>进入配置模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure terminal</span><br></pre></td></tr></table></figure></li></ul><h2 id="prefix-list-配置"><a href="#prefix-list-配置" class="headerlink" title="prefix-list 配置"></a>prefix-list 配置</h2><p>prefix-list（前缀列表）用于匹配和过滤 IP 地址</p><h3 id="定义-prefix-list"><a href="#定义-prefix-list" class="headerlink" title="定义 prefix-list"></a>定义 prefix-list</h3><p>下面只是定义一条前缀列表规则，如未设置应用，不会起任何作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip prefix-list NAME [seq NUMBER] (permit|deny) PREFIX [le LEN] [ge LEN]</span><br></pre></td></tr></table></figure><ul><li><code>NAME</code>：定义的该前缀列表的名字，用于唯一标识该 prefix-list</li><li><code>seq</code>：规则序号，匹配的优先级，序号越小越先匹配，可自动设置，自动设置以 5 为增量</li><li><code>permit|deny</code>：匹配到的前缀将被允许通过/被过滤掉</li><li><code>PREFIX</code>：匹配的网络地址和前缀长度</li><li><code>le</code>：匹配的最长子网掩码长度</li><li><code>ge</code>：匹配的最短子网掩码长度</li></ul><p>配置示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义一个命名为 PLIST-1 的 prefix-list，拒绝所有前缀</span><br><span class="line">ip prefix-list PLIST-1 seq 5 deny 0.0.0.0&#x2F;0 le 32</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义一个命名为 PLIST-2 的 prefix-list，接受前缀 IP 为 1.1.1.1 和 2.2.2.2 的前缀</span><br><span class="line">ip prefix-list PLIST-2 seq 5 permit 1.1.1.1&#x2F;32</span><br><span class="line">ip prefix-list PLIST-2 seq 10 permit 2.2.2.2&#x2F;32</span><br></pre></td></tr></table></figure><h3 id="前缀匹配规则"><a href="#前缀匹配规则" class="headerlink" title="前缀匹配规则"></a>前缀匹配规则</h3><ol><li>优先匹配 seq 小的规则，逐条检查匹配，如果匹配上，则后续条目无需再检查</li><li>如果未设置任何 prefix-list，则视为所有 prefix 都 permit</li><li>默认拒绝：如果设置有 prefix-list，但未匹配到任何一条规则，则默认拒绝该 prefix</li><li>匹配规则：<ol><li>检查 prefix IP 是否匹配 <code>network/prefix-length</code></li><li>如果有设置 <code>ge</code> 或 <code>le</code>，则检查 prefix 长度是否在 <code>&gt;=ge</code> 以及 <code>&lt;=le</code> 范围内</li><li>比如 <code>192.168.1.0/24 ge 25 le 30</code><ul><li>IP 匹配范围 <code>192.168.1.0</code> ~ <code>192.168.1.255</code></li><li>前缀长度在 25 ~ 30</li><li><code>192.168.1.0/24</code> 不匹配（前缀长度不匹配）、<code>192.168.1.0/25</code> 匹配、<code>192.168.1.30/28</code> 匹配</li></ul></li></ol></li></ol><h3 id="查看-prefix-list"><a href="#查看-prefix-list" class="headerlink" title="查看 prefix-list"></a>查看 prefix-list</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show ip prefix-list</span><br></pre></td></tr></table></figure><h2 id="route-map-配置"><a href="#route-map-配置" class="headerlink" title="route-map 配置"></a>route-map 配置</h2><p>用于匹配和过滤路由</p><h3 id="定义-route-map"><a href="#定义-route-map" class="headerlink" title="定义 route-map"></a>定义 route-map</h3><p>下面只是定义一条路由匹配规则，如未设置应用，不会起任何作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">route-map ROUTE-MAP-NAME (permit|deny) ORDER</span><br><span class="line">  match &lt;conditions&gt;</span><br><span class="line">  set &lt;actions&gt;</span><br></pre></td></tr></table></figure><ul><li><code>ROUTE-MAP-NAME</code>：定义的该 route-map 的名字，用于唯一标识该 route-map</li><li><code>permit|deny</code> ：是否允许匹配的路由通过</li><li><code>ORDER</code>：规则序号，匹配的优先级，序号越小越先匹配，可自动设置，自动设置以 10 为增量</li><li><code>match</code>：匹配条件</li><li><code>set</code>：设置动作，如果 <code>match</code> 匹配上了，则给该条路由执行设置动作</li></ul><p>配置示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">route-map EXAMPLE permit 10</span><br><span class="line">  match ip address prefix-list LIST-1</span><br><span class="line">  set local-preference 200</span><br><span class="line"></span><br><span class="line">route-map EXAMPLE permit 20</span><br><span class="line">  match ip address prefix-list LIST-2</span><br><span class="line">  set local-preference 100</span><br></pre></td></tr></table></figure><h3 id="match-匹配条件"><a href="#match-匹配条件" class="headerlink" title="match 匹配条件"></a>match 匹配条件</h3><p>路由匹配条件，只有全部满足才算匹配</p><ul><li><code>match ip address prefix-list PREFIX_LIST</code><ul><li>IP 地址被 prefix-list  PREFIX_LIST 匹配并允许通过的路由则匹配</li></ul></li></ul><h3 id="set-设置动作"><a href="#set-设置动作" class="headerlink" title="set 设置动作"></a>set 设置动作</h3><h3 id="路由匹配规则"><a href="#路由匹配规则" class="headerlink" title="路由匹配规则"></a>路由匹配规则</h3><ol><li>优先匹配 order 小的 route map，逐条检查匹配，如果匹配上，则后续条目无需再检查</li><li>默认拒绝：如果所有的 route map 都没匹配上，则默认拒绝该路由</li><li>匹配规则：<ol><li>检查是否匹配上 <code>match</code> 的匹配规则，如果是匹配 prefix-list，需要被 prefix-list permit 才算匹配上该 <code>match</code></li><li></li></ol></li></ol><h2 id="route-map-应用"><a href="#route-map-应用" class="headerlink" title="route-map 应用"></a>route-map 应用</h2><h1 id="OSPF-组网"><a href="#OSPF-组网" class="headerlink" title="OSPF 组网"></a>OSPF 组网</h1><p>搭建下面一个网络，使用 Docker 模拟出三台 FRR 路由器，并给其配网，其中有两个网段：Router 1 的 eth1 和 Router 2 的 eth1、Router 3 的 eth1 和 Router 2 的 eth2，使用 FRR 让 Router 1 和 Router 3 学习到到对方的路由。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241029023145100.png" alt="OSPF实验拓扑" style="zoom:50%;" /></p><h2 id="1-Docker-模拟-FRR-路由器"><a href="#1-Docker-模拟-FRR-路由器" class="headerlink" title="1. Docker 模拟 FRR 路由器"></a>1. Docker 模拟 FRR 路由器</h2><p>模拟 3 台 FRR 路由器 Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged --net&#x3D;none --name frr-01 quay.io&#x2F;frrouting&#x2F;frr:10.0.0</span><br><span class="line">docker run -d --privileged --net&#x3D;none --name frr-02 quay.io&#x2F;frrouting&#x2F;frr:10.0.0</span><br><span class="line">docker run -d --privileged --net&#x3D;none --name frr-03 quay.io&#x2F;frrouting&#x2F;frr:10.0.0</span><br></pre></td></tr></table></figure><p>查看 docker 进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                          COMMAND                  CREATED         STATUS         PORTS     NAMES</span><br><span class="line"><span class="number">6185</span>c04f06d1   quay.io/frrouting/frr:<span class="number">10.0</span>.<span class="number">0</span>   <span class="string">"/sbin/tini -- /usr/…"</span>   <span class="number">2</span> minutes ago   Up <span class="number">2</span> minutes             frr<span class="literal">-03</span></span><br><span class="line"><span class="number">1681</span>fd9bd374   quay.io/frrouting/frr:<span class="number">10.0</span>.<span class="number">0</span>   <span class="string">"/sbin/tini -- /usr/…"</span>   <span class="number">3</span> minutes ago   Up <span class="number">3</span> minutes             frr<span class="literal">-02</span></span><br><span class="line"><span class="number">568</span>ade633bf9   quay.io/frrouting/frr:<span class="number">10.0</span>.<span class="number">0</span>   <span class="string">"/sbin/tini -- /usr/…"</span>   <span class="number">24</span> hours ago    Up <span class="number">24</span> hours              frr<span class="literal">-01</span></span><br></pre></td></tr></table></figure><h2 id="2-OvS-配网"><a href="#2-OvS-配网" class="headerlink" title="2. OvS 配网"></a>2. OvS 配网</h2><p>由于安装 docker 容器时使用 <code>--net=none</code> 无网络，需根据拓扑对容器配网</p><p>查看各个路由器的网卡，当前各 docker 容器无网卡</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># docker exec -it frr-01 ifconfig</span></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          inet6 addr: ::<span class="number">1</span>/<span class="number">128</span> Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># docker exec -it frr-02 ifconfig</span></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          inet6 addr: ::<span class="number">1</span>/<span class="number">128</span> Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># docker exec -it frr-03 ifconfig</span></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          inet6 addr: ::<span class="number">1</span>/<span class="number">128</span> Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br></pre></td></tr></table></figure><p>安装 OvS 虚拟交换机用来搭建容器网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install openvswitch-switch</span><br></pre></td></tr></table></figure><p>创建一个网桥交换机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl add-br brConn</span><br></pre></td></tr></table></figure><p>如需删除，使用 <code>ovs-vsctl del-br brConn</code></p><p>查看创建好的网桥</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ovs-vsctl show</span></span><br><span class="line">cb63c817<span class="literal">-8d63</span><span class="literal">-4d1f</span><span class="literal">-b599</span><span class="literal">-9950b0aeb2eb</span></span><br><span class="line">    Bridge brConn</span><br><span class="line">        Port brConn</span><br><span class="line">            Interface brConn</span><br><span class="line">                type: internal</span><br><span class="line">    ovs_version: <span class="string">"2.13.8"</span></span><br></pre></td></tr></table></figure><p>让三台 docker 路由器都连接到这个交换机，并配置 IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ovs-docker add-port brConn eth1 frr-01 --ipaddress&#x3D;11.11.0.2&#x2F;24</span><br><span class="line">ovs-docker add-port brConn eth1 frr-02 --ipaddress&#x3D;11.11.0.3&#x2F;24</span><br><span class="line">ovs-docker add-port brConn eth2 frr-02 --ipaddress&#x3D;12.12.0.2&#x2F;24</span><br><span class="line">ovs-docker add-port brConn eth1 frr-03 --ipaddress&#x3D;12.12.0.3&#x2F;24</span><br></pre></td></tr></table></figure><p>再次查看网桥</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ovs-vsctl show</span></span><br><span class="line">cb63c817<span class="literal">-8d63</span><span class="literal">-4d1f</span><span class="literal">-b599</span><span class="literal">-9950b0aeb2eb</span></span><br><span class="line">    Bridge brConn</span><br><span class="line">        Port brConn</span><br><span class="line">            Interface brConn</span><br><span class="line">                type: internal</span><br><span class="line">        Port <span class="string">"0021a5f25d344_l"</span></span><br><span class="line">            Interface <span class="string">"0021a5f25d344_l"</span></span><br><span class="line">        Port <span class="string">"1529171a9a294_l"</span></span><br><span class="line">            Interface <span class="string">"1529171a9a294_l"</span></span><br><span class="line">        Port df2bf7ec96bd4_l</span><br><span class="line">            Interface df2bf7ec96bd4_l</span><br><span class="line">        Port a67433ae00b04_l</span><br><span class="line">            Interface a67433ae00b04_l</span><br><span class="line">    ovs_version: <span class="string">"2.13.8"</span></span><br></pre></td></tr></table></figure><p>此时上各个 Docker 可以看到已配好的网卡</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># docker exec -it frr-01 ifconfig</span></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr <span class="number">1</span>A:CF:B4:C0:<span class="number">93</span>:<span class="number">4</span>B</span><br><span class="line">          inet addr:<span class="number">11.11</span>.<span class="number">0.2</span>  Bcast:<span class="number">0.0</span>.<span class="number">0.0</span>  Mask:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          inet6 addr: fe80::<span class="number">18</span>cf:b4ff:fec0:<span class="number">934</span>b/<span class="number">64</span> Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">165</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">42</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">13826</span> (<span class="number">13.5</span> KiB)  TX bytes:<span class="number">3036</span> (<span class="number">2.9</span> KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          inet6 addr: ::<span class="number">1</span>/<span class="number">128</span> Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># docker exec -it frr-02 ifconfig</span></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr DE:<span class="number">38</span>:AD:<span class="number">91</span>:D8:<span class="number">24</span></span><br><span class="line">          inet addr:<span class="number">11.11</span>.<span class="number">0.3</span>  Bcast:<span class="number">0.0</span>.<span class="number">0.0</span>  Mask:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          inet6 addr: fe80::dc38:adff:fe91:d824/<span class="number">64</span> Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">200</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">42</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">16592</span> (<span class="number">16.2</span> KiB)  TX bytes:<span class="number">3036</span> (<span class="number">2.9</span> KiB)</span><br><span class="line"></span><br><span class="line">eth2      Link encap:Ethernet  HWaddr E2:<span class="number">4</span>D:<span class="number">1</span>E:<span class="number">69</span>:<span class="number">47</span>:D2</span><br><span class="line">          inet addr:<span class="number">12.12</span>.<span class="number">0.2</span>  Bcast:<span class="number">0.0</span>.<span class="number">0.0</span>  Mask:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          inet6 addr: fe80::e04d:<span class="number">1</span>eff:fe69:<span class="number">47</span>d2/<span class="number">64</span> Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">190</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">39</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">15768</span> (<span class="number">15.3</span> KiB)  TX bytes:<span class="number">2798</span> (<span class="number">2.7</span> KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          inet6 addr: ::<span class="number">1</span>/<span class="number">128</span> Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># docker exec -it frr-03 ifconfig</span></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr <span class="number">16</span>:<span class="number">47</span>:A2:B7:F5:<span class="number">4</span>F</span><br><span class="line">          inet addr:<span class="number">12.12</span>.<span class="number">0.3</span>  Bcast:<span class="number">0.0</span>.<span class="number">0.0</span>  Mask:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          inet6 addr: fe80::<span class="number">1447</span>:a2ff:feb7:f54f/<span class="number">64</span> Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">182</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">38</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">15112</span> (<span class="number">14.7</span> KiB)  TX bytes:<span class="number">2756</span> (<span class="number">2.6</span> KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          inet6 addr: ::<span class="number">1</span>/<span class="number">128</span> Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">0</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)  TX bytes:<span class="number">0</span> (<span class="number">0.0</span> B)</span><br></pre></td></tr></table></figure><h2 id="3-FRR-组网"><a href="#3-FRR-组网" class="headerlink" title="3. FRR 组网"></a>3. FRR 组网</h2><p>由于 Router 1 eth1 和 Router 3 eth1 属于不同网段，在组网前两者间无路由，ping 不通</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># docker exec -it frr-01 bash</span></span><br><span class="line"><span class="number">568</span>ade633bf9:/<span class="comment"># ping 12.12.0.3</span></span><br><span class="line">PING <span class="number">12.12</span>.<span class="number">0.3</span> (<span class="number">12.12</span>.<span class="number">0.3</span>): <span class="number">56</span> <span class="keyword">data</span> bytes</span><br><span class="line">ping: sendto: Network unreachable</span><br><span class="line"><span class="number">568</span>ade633bf9:/<span class="comment"># route -ne</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line"><span class="number">11.11</span>.<span class="number">0.0</span>       <span class="number">0.0</span>.<span class="number">0.0</span>         <span class="number">255.255</span>.<span class="number">255.0</span>   U         <span class="number">0</span> <span class="number">0</span>          <span class="number">0</span> eth1</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># docker exec -it frr-03 bash</span></span><br><span class="line"><span class="number">6185</span>c04f06d1:/<span class="comment"># ping 11.11.0.2</span></span><br><span class="line">PING <span class="number">11.11</span>.<span class="number">0.2</span> (<span class="number">11.11</span>.<span class="number">0.2</span>): <span class="number">56</span> <span class="keyword">data</span> bytes</span><br><span class="line">ping: sendto: Network unreachable</span><br><span class="line"><span class="number">6185</span>c04f06d1:/<span class="comment"># route -ne</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line"><span class="number">12.12</span>.<span class="number">0.0</span>       <span class="number">0.0</span>.<span class="number">0.0</span>         <span class="number">255.255</span>.<span class="number">255.0</span>   U         <span class="number">0</span> <span class="number">0</span>          <span class="number">0</span> eth1</span><br></pre></td></tr></table></figure><p>通过配置 FRR 使得两个网段学习到对方的路由，实现 OSPF 组网</p><p>FRR 开启 OSPF 进程</p><ol><li><p>编辑 <code>/etc/frr/daemons</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ospfd&#x3D;yes</span><br></pre></td></tr></table></figure></li><li><p>重启 FRR 服务</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;frr restart</span><br></pre></td></tr></table></figure><p>vtysh 配置 FRR OSPF</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--- frr<span class="literal">-01</span> ---</span><br><span class="line"><span class="number">568</span>ade633bf9<span class="comment"># configure</span></span><br><span class="line"><span class="number">568</span>ade633bf9(config)<span class="comment"># router ospf</span></span><br><span class="line"><span class="number">568</span>ade633bf9(config<span class="literal">-router</span>)<span class="comment"># network 11.11.0.2/24 area 0</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--- frr<span class="literal">-02</span> ---</span><br><span class="line"><span class="number">1681</span>fd9bd374<span class="comment"># configure</span></span><br><span class="line"><span class="number">1681</span>fd9bd374(config)<span class="comment"># router ospf</span></span><br><span class="line"><span class="number">1681</span>fd9bd374(config<span class="literal">-router</span>)<span class="comment"># network 11.11.0.3/24 area 0</span></span><br><span class="line"><span class="number">1681</span>fd9bd374(config<span class="literal">-router</span>)<span class="comment"># network 12.12.0.2/24 area 0</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--- frr<span class="literal">-03</span> ---</span><br><span class="line"><span class="number">6185</span>c04f06d1<span class="comment"># configure</span></span><br><span class="line"><span class="number">6185</span>c04f06d1(config)<span class="comment"># router ospf</span></span><br><span class="line"><span class="number">6185</span>c04f06d1(config<span class="literal">-router</span>)<span class="comment"># network 12.12.0.3/24 area 0</span></span><br></pre></td></tr></table></figure><p>配置完毕后，frr-01 和 frr-03 的 OSPF 便能学习到对方的路由，互相能 ping 通</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--- frr<span class="literal">-01</span> ---</span><br><span class="line"><span class="number">568</span>ade633bf9<span class="comment"># show ip ospf route</span></span><br><span class="line">============ OSPF network routing table ============</span><br><span class="line">N    <span class="number">11.11</span>.<span class="number">0.0</span>/<span class="number">24</span>          [<span class="number">10</span>] area: <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">                           directly attached to eth1</span><br><span class="line">N    <span class="number">12.12</span>.<span class="number">0.0</span>/<span class="number">24</span>          [<span class="number">20</span>] area: <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">                           via <span class="number">11.11</span>.<span class="number">0.3</span>, eth1</span><br><span class="line"></span><br><span class="line">============ OSPF router routing table =============</span><br><span class="line"></span><br><span class="line">============ OSPF external routing table ===========</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--- frr<span class="literal">-01</span> ---</span><br><span class="line"><span class="number">568</span>ade633bf9:/<span class="comment"># ping 12.12.0.3</span></span><br><span class="line">PING <span class="number">12.12</span>.<span class="number">0.3</span> (<span class="number">12.12</span>.<span class="number">0.3</span>): <span class="number">56</span> <span class="keyword">data</span> bytes</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">12.12</span>.<span class="number">0.3</span>: seq=<span class="number">0</span> ttl=<span class="number">63</span> time=<span class="number">0.725</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">12.12</span>.<span class="number">0.3</span>: seq=<span class="number">1</span> ttl=<span class="number">63</span> time=<span class="number">0.225</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">12.12</span>.<span class="number">0.3</span>: seq=<span class="number">2</span> ttl=<span class="number">63</span> time=<span class="number">0.128</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">12.12</span>.<span class="number">0.3</span>: seq=<span class="number">3</span> ttl=<span class="number">63</span> time=<span class="number">0.205</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">12.12</span>.<span class="number">0.3</span> ping statistics ---</span><br><span class="line"><span class="number">4</span> packets transmitted, <span class="number">4</span> packets received, <span class="number">0</span>% packet loss</span><br><span class="line">round<span class="literal">-trip</span> min/avg/max = <span class="number">0.128</span>/<span class="number">0.320</span>/<span class="number">0.725</span> ms</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--- frr<span class="literal">-03</span> ---</span><br><span class="line"><span class="number">6185</span>c04f06d1<span class="comment"># show ip ospf route</span></span><br><span class="line">============ OSPF network routing table ============</span><br><span class="line">N    <span class="number">11.11</span>.<span class="number">0.0</span>/<span class="number">24</span>          [<span class="number">20</span>] area: <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">                           via <span class="number">12.12</span>.<span class="number">0.2</span>, eth1</span><br><span class="line">N    <span class="number">12.12</span>.<span class="number">0.0</span>/<span class="number">24</span>          [<span class="number">10</span>] area: <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">                           directly attached to eth1</span><br><span class="line"></span><br><span class="line">============ OSPF router routing table =============</span><br><span class="line"></span><br><span class="line">============ OSPF external routing table ===========</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--- frr<span class="literal">-03</span> ---</span><br><span class="line"><span class="number">6185</span>c04f06d1:/<span class="comment"># ping 11.11.0.2</span></span><br><span class="line">PING <span class="number">11.11</span>.<span class="number">0.2</span> (<span class="number">11.11</span>.<span class="number">0.2</span>): <span class="number">56</span> <span class="keyword">data</span> bytes</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">11.11</span>.<span class="number">0.2</span>: seq=<span class="number">0</span> ttl=<span class="number">63</span> time=<span class="number">1.871</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">11.11</span>.<span class="number">0.2</span>: seq=<span class="number">1</span> ttl=<span class="number">63</span> time=<span class="number">0.236</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">11.11</span>.<span class="number">0.2</span>: seq=<span class="number">2</span> ttl=<span class="number">63</span> time=<span class="number">0.161</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">11.11</span>.<span class="number">0.2</span>: seq=<span class="number">3</span> ttl=<span class="number">63</span> time=<span class="number">0.151</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">11.11</span>.<span class="number">0.2</span> ping statistics ---</span><br><span class="line"><span class="number">4</span> packets transmitted, <span class="number">4</span> packets received, <span class="number">0</span>% packet loss</span><br><span class="line">round<span class="literal">-trip</span> min/avg/max = <span class="number">0.151</span>/<span class="number">0.604</span>/<span class="number">1.871</span> ms</span><br></pre></td></tr></table></figure><h1 id="DR-竞选"><a href="#DR-竞选" class="headerlink" title="DR 竞选"></a>DR 竞选</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://frrouting.org" target="_blank" rel="noopener">FRRouting 官网</a></li><li><a href="https://blog.csdn.net/puhaiyang/article/details/140189690" target="_blank" rel="noopener">Frrouting快速入门——OSPF组网（一）</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;FRRouting（FRR）是一款提供 IP 路由服务的开源套件，支持 BGP、OSPF、RIP、IS-IS 等等路由协议。FRR 可以在网络栈中与其他路由器交换路由信息，做出路由策略决策，并将决策通知给其他层。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>OSPF 路由协议</title>
    <link href="https://gy23333.github.io/2024/09/19/OSPF%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/"/>
    <id>https://gy23333.github.io/2024/09/19/OSPF%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/</id>
    <published>2024-09-18T17:38:42.000Z</published>
    <updated>2024-11-11T03:57:58.109Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>OSPF 路由协议</p><a id="more"></a><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=414959575&bvid=BV1YV41127U5&cid=245923181&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><h1 id="RIP-协议缺陷"><a href="#RIP-协议缺陷" class="headerlink" title="RIP 协议缺陷"></a>RIP 协议缺陷</h1><h2 id="缺陷一：以跳数评估的路由并非最优路径"><a href="#缺陷一：以跳数评估的路由并非最优路径" class="headerlink" title="缺陷一：以跳数评估的路由并非最优路径"></a>缺陷一：以跳数评估的路由并非最优路径</h2><p>RIP 路由协议选择跳数最短的路由，在下图中会选择 RTA —&gt; RTB 的路径。</p><p>但虽然 RTA —&gt; RTB 的路径跳数最短，但由于带宽的区别，对于大数据流走 RTA —&gt; RTC —&gt; RTD —&gt; RTB 反而快于跳数更短的 RTA —&gt; RTB 路径。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241018132129111.png" alt=""></p><h2 id="缺陷二：最大跳数15限制网络规模"><a href="#缺陷二：最大跳数15限制网络规模" class="headerlink" title="缺陷二：最大跳数15限制网络规模"></a>缺陷二：最大跳数15限制网络规模</h2><p>RIP 允许的跳数最大只有15条，如果跳数大于等于16跳，则会被视为不可达，无法学习到16跳网段的路由，从而限制了网络规模的大小。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241018132904557.png" alt="image-20241018132904557"></p><h2 id="缺陷三：更新路由发送全量路由信息，浪费网络资源"><a href="#缺陷三：更新路由发送全量路由信息，浪费网络资源" class="headerlink" title="缺陷三：更新路由发送全量路由信息，浪费网络资源"></a>缺陷三：更新路由发送全量路由信息，浪费网络资源</h2><p>RIP 每隔一段时间，都会向所有邻居发送全量的路由信息，十分消耗网络资源。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241018133241441.png" alt="image-20241018133241441"></p><h2 id="缺陷四：收敛速度慢"><a href="#缺陷四：收敛速度慢" class="headerlink" title="缺陷四：收敛速度慢"></a>缺陷四：收敛速度慢</h2><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241018133454733.png" alt="image-20241018133454733"></p><h1 id="OSPF-链路状态路由协议"><a href="#OSPF-链路状态路由协议" class="headerlink" title="OSPF 链路状态路由协议"></a>OSPF 链路状态路由协议</h1><ul><li>工作在 IP 层，IP 协议号 89</li><li>以组播地址 224.0.0.5 发送协议包</li><li>每个路由器将已知的链路状态信息发送给邻居，收敛后，每个路由器对全网链路状态的认识相同，并独立计算自己的路由</li></ul><h2 id="OSPF-工作过程"><a href="#OSPF-工作过程" class="headerlink" title="OSPF 工作过程"></a>OSPF 工作过程</h2><h3 id="1-发现邻居"><a href="#1-发现邻居" class="headerlink" title="1. 发现邻居"></a>1. 发现邻居</h3><p>在广播域中组播 hello 包，收到互相的 hello 包，确认是自己的邻居，则加入邻居表中</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241018135312193.png" alt="image-20241018135312193" style="zoom:50%;" /></p><h3 id="2-建立邻接关系"><a href="#2-建立邻接关系" class="headerlink" title="2. 建立邻接关系"></a>2. 建立邻接关系</h3><ul><li>并不是所有邻居都会建立邻接关系</li><li>网段的广播域中会选取 DR 和 BDR（副 DR，用于容灾），剩下的节点都是 DR_Others，该广播域中的所有路由器都只与 DR 和 BDR 建立邻接关系</li><li>只有和建立了邻接关系的邻居才会交换链路状态信息</li><li>只有在广播型网络中才会使用 DR 和 BDR，点到点（PPP，即一对一）不使用  DR 和 BDR</li></ul><p>如此，可以减少交换信息的次数，路由更新更高效</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241020191232401.png" alt="image-20241020191232401"></p><h3 id="3-传递链路状态信息"><a href="#3-传递链路状态信息" class="headerlink" title="3. 传递链路状态信息"></a>3. 传递链路状态信息</h3><ul><li>每个节点都有一个 LSDB（链路状态数据库），里面的每一条是一个 LSA（链路状态公告）</li><li>每条 LSA 描述了网络中的一个路由器的编号、直连网段、cost 等信息</li></ul><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241020191829391.png" alt="image-20241020191829391" style="zoom:30%;" /></p><p><strong>更新机制</strong></p><ul><li>触发更新或者每隔 30 分钟更新一次<ul><li>触发更新：网络发生变化时，则无需等到 30 分钟周期，立即向邻接节点发送信息</li></ul></li><li>增量更新，只发送邻居需要的 LSA</li><li>收敛后，网段内的所有路由器都有相同的 LSDB</li></ul><p><strong>路由信息交换过程</strong></p><p>下面是 RTA 触发更新后，向 RTB 交换路由信息的过程</p><ol><li>发送 RTA 所有 LSA 的摘要信息</li><li>RTB 比较收到的 LSA 摘要与自己本地的 LSA，发送请求，希望获得自己没有的 LSA 的详细信息</li><li>RTA 将要求的 LSA 发送给 RTB</li><li>RTB 向 RTA 回复收到</li></ol><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241020192600552.png" alt="image-20241020192600552" style="zoom:50%;" /></p><h3 id="4-路由计算"><a href="#4-路由计算" class="headerlink" title="4. 路由计算"></a>4. 路由计算</h3><p>每台路由器根据 LSDB 算出每台路由器到自己的最短路径</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241020193001364.png" alt="image-20241020193001364" style="zoom:50%;" /></p><h2 id="OSPF-分区域管理"><a href="#OSPF-分区域管理" class="headerlink" title="OSPF 分区域管理"></a>OSPF 分区域管理</h2><p>LSDB 记录网络所有路由器的 LSA，所以当网络规模变大时，会导致每台路由器上都要消耗大量资源储存 LSDB，且 LSDB 信息收敛也会变得很慢，因此需要分区域管理。</p><ul><li>每个区域内部的路由器的 LSDB 只需知道区域内的路由器的 LSA</li><li>不同区域之间通过 ASR（区域边界路由器）相连，同时有两边的 LSDB</li></ul><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241020193546945.png" alt="image-20241020193546945"></p><p>非骨干区域之间不能直接通信，需要通过骨干区域（区域 0）进行转发。</p><p>如上图中有三个区域：区域 0、区域 1、区域 10.0.0.1，其中区域 1、区域 10.0.0.1 这样的非骨干区域不能直接通信，需要先发送给区域 0，再由区域 0 转发。</p><h2 id="Hello-包"><a href="#Hello-包" class="headerlink" title="Hello 包"></a>Hello 包</h2><h3 id="Hello-包组成"><a href="#Hello-包组成" class="headerlink" title="Hello 包组成"></a>Hello 包组成</h3><ul><li>功能：Hello 包用于发现邻居路由器，交换 OSPF 配置信息，并确认邻接状态。</li><li>内容：包括 Route ID、Priority、Hello 间隔、Dead 间隔等</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/etc/frr<span class="comment"># tcpdump -i vip0 proto ospf -vvv</span></span><br><span class="line">tcpdump: listening on vip0, link<span class="literal">-type</span> EN10MB (Ethernet), capture size <span class="number">262144</span> bytes</span><br><span class="line"><span class="number">11</span>:<span class="number">15</span>:<span class="number">29.874116</span> IP (tos <span class="number">0</span>xc0, ttl <span class="number">1</span>, id <span class="number">22009</span>, offset <span class="number">0</span>, flags [<span class="type">none</span>], proto OSPF (<span class="number">89</span>), length <span class="number">64</span>)</span><br><span class="line">    ubuntu &gt; ospf<span class="literal">-all</span>.mcast.net: OSPFv2, Hello, length <span class="number">44</span></span><br><span class="line">Router<span class="literal">-ID</span> ubuntu, Backbone Area, Authentication Type: none (<span class="number">0</span>)</span><br><span class="line">Options [<span class="type">External</span>]</span><br><span class="line">  Hello Timer <span class="number">10</span>s, Dead Timer <span class="number">40</span>s, Mask <span class="number">255.255</span>.<span class="number">255.255</span>, Priority <span class="number">1</span></span><br><span class="line">  Designated Router ubuntu</span><br></pre></td></tr></table></figure><h3 id="组播地址-ospf-all-mcast-net"><a href="#组播地址-ospf-all-mcast-net" class="headerlink" title="组播地址 ospf-all.mcast.net"></a>组播地址 <code>ospf-all.mcast.net</code></h3><p>OSPF 以组播地址的方式发送 Hello 包，将 Hello 包发往组播地址 <code>ospf-all.mcast.net</code>（224.0.0.5），所有 OSPF 路由器都会监听该地址，如此即可确保域内所有 OSPF 路由器都收到。</p><h3 id="Hello-包发送过程"><a href="#Hello-包发送过程" class="headerlink" title="Hello 包发送过程"></a>Hello 包发送过程</h3><ol><li><strong>定时发送</strong>：每个 OSPF 路由器按照配置的 Hello 间隔定期发送 Hello 包</li><li><strong>包的构造</strong>：路由器构造 Hello 包，将其发送到多播地址 <code>224.0.0.5</code></li><li><strong>邻居发现</strong>：接收到 Hello 包的其他 OSPF 路由器会解析包中的信息，加入邻居表中</li><li><strong>邻接关系维护</strong>：通过定期发送 Hello 包，OSPF 路由器可以维护与邻居的关系。如果在规定的 Dead 间隔内未收到某个邻居的 Hello 包，路由器将认为该邻居失效</li></ol><h2 id="DR-竞选"><a href="#DR-竞选" class="headerlink" title="DR 竞选"></a>DR 竞选</h2><p>广播型网络中需选出该广播域的 DR（指定路由） 和 BDR（备份指定路由，负责在 DR 失效时接管其功能）</p><h3 id="DR-竞选规则"><a href="#DR-竞选规则" class="headerlink" title="DR 竞选规则"></a>DR 竞选规则</h3><ol><li><strong>Priority 大者优先</strong>：优先选择 Priority 较大的路由为 DR，如果 Priority 设置为 0，则不参与 DR 竞选</li><li><strong>Route ID 大者优先</strong>：如果有多个 Priority 最大且相同的路由器，则选择其中 Route ID 最大的（Route ID 为路由器的唯一标识，通常是 IP，不可能相同）</li></ol><p>示例：下面三个路由器中，A 的 Priority 最大，为 DR；B、C 的 Priority 相同，但 B 的 Route ID 大于 C，所以 B 为 BDR</p><ul><li>A 的优先级为 2，Router ID 为 1.1.1.1（DR）</li><li>B 的优先级为 1，Router ID 为 2.2.2.2（BDR）</li><li>C 的优先级为 1，Router ID 为 3.3.3.3</li></ul><h3 id="DR-竞选过程"><a href="#DR-竞选过程" class="headerlink" title="DR 竞选过程"></a>DR 竞选过程</h3><ol><li>Hello 消息：所有路由器定期组播 Hello 消息，其中包含本路由的 Priority、Route ID 等信息</li><li>优先级比较：根据竞选规则比较各个路由器，优先级最高的为 DR，次高的为 BDR</li><li>选举后，DR 和 BDR 会向所有的路由器广播 LSA，其他所有路由器将与 DR 和 BDR 建立邻接关系</li></ol><h1 id="邻居状态机"><a href="#邻居状态机" class="headerlink" title="邻居状态机"></a>邻居状态机</h1><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/download.png" alt="OSPF邻居状态机"></p><h1 id="RIP-和-OSPF-比较"><a href="#RIP-和-OSPF-比较" class="headerlink" title="RIP 和 OSPF 比较"></a>RIP 和 OSPF 比较</h1><div class="table-container"><table><thead><tr><th></th><th>RIP（距离矢量路由协议）</th><th>OSPF（链路状态路由协议）</th></tr></thead><tbody><tr><td>最优路径选择</td><td>跳数</td><td>链路开销</td></tr><tr><td>更新触发</td><td>每 30s</td><td>触发更新或每隔30分钟</td></tr><tr><td>发送对象</td><td>广播到所有邻居</td><td>发到邻接路由器</td></tr><tr><td>发送信息</td><td>全量 RIP 路由表</td><td>链路状态信息摘要</td></tr></tbody></table></div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100075308/57629336" target="_blank" rel="noopener">HUAWEI OSPF 配置</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;OSPF 路由协议&lt;/p&gt;</summary>
    
    
    
    <category term="计算机网络" scheme="https://gy23333.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://gy23333.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="路由协议" scheme="https://gy23333.github.io/tags/%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="OSPF" scheme="https://gy23333.github.io/tags/OSPF/"/>
    
  </entry>
  
  <entry>
    <title>Go并发编程</title>
    <link href="https://gy23333.github.io/2024/09/05/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://gy23333.github.io/2024/09/05/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</id>
    <published>2024-09-04T16:58:16.000Z</published>
    <updated>2024-11-11T03:57:58.107Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Go 并发编程</p><a id="more"></a><h1 id="并发基本概念"><a href="#并发基本概念" class="headerlink" title="并发基本概念"></a>并发基本概念</h1><h2 id="进程-Process-与线程-Thread"><a href="#进程-Process-与线程-Thread" class="headerlink" title="进程 Process 与线程 Thread"></a>进程 Process 与线程 Thread</h2><ul><li>进程是系统进行资源分配和调度的一个基本单位，程序在操作系统中的一次执行过程</li><li>线程是进程的执行单位，是CPU调度和分派的基本单位</li><li>一个进程可以创建和撤销多个线程;同一个进程中的多个线程之间可以并发执行</li></ul><h2 id="并行-Concurrent-与并发-Paralled"><a href="#并行-Concurrent-与并发-Paralled" class="headerlink" title="并行 Concurrent 与并发 Paralled"></a>并行 Concurrent 与并发 Paralled</h2><ul><li><p>并行：多个线程同时操作多个资源类</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20240905132345930.png" alt="并行"></p></li><li><p>并发：多个线程交替操作同一资源类</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20240905132404280.png" alt="并发"></p></li></ul><h2 id="进程-process-与线程-thread-与协程-coroutine"><a href="#进程-process-与线程-thread-与协程-coroutine" class="headerlink" title="进程 process 与线程 thread 与协程 coroutine"></a>进程 process 与线程 thread 与协程 coroutine</h2><ul><li>一个进程上可以跑多个线程，一个线程上可以跑多个协程</li><li>多个线程可以利用多个 CPU 并行，但一个线程内的多个协程是串行的，同一时刻只能有一个在运行，无法利用 CPU 多核，但不同线程内的协程之间可以并行</li></ul><div class="table-container"><table><thead><tr><th></th><th>进程 process</th><th>线程 thread</th><th>协程 coroutine</th></tr></thead><tbody><tr><td>切换者</td><td>操作系统</td><td>操作系统</td><td>用户</td></tr><tr><td>切换内容</td><td>页全局目录、内核栈、硬件上下文</td><td>内核栈、硬件上下文</td><td>硬件上下文</td></tr><tr><td>切换内容保存位置</td><td>内存</td><td>内核栈</td><td>用户栈或堆（变量）</td></tr><tr><td>状态切换</td><td>用户态 —&gt; 内核态 —&gt; 用户态</td><td>用户态 —&gt; 内核态 —&gt; 用户态</td><td>用户态</td></tr><tr><td>切换效率</td><td>低</td><td>中</td><td>高</td></tr></tbody></table></div><ul><li>进程、线程的切换者是操作系统，操作系统决定切换时刻，用户无感</li><li>协程的切换者是用户，由用户程序决定切换时间</li><li>进程切换内容：页全局目录、内核栈、硬件上下文，切换的内容保存在内存中，采用 用户态 —&gt; 内核态 —&gt; 用户态</li><li>线程切换内容：内核栈、硬件上下文，切换的内容保存在内核栈中，采用 用户态 —&gt; 内核态 —&gt; 用户态</li><li>协程切换内容：硬件上下文，切换的内容保存在用户栈或堆（变量）中，切换过程始终处于用户态</li></ul><h1 id="协程-Goroutine"><a href="#协程-Goroutine" class="headerlink" title="协程 Goroutine"></a>协程 Goroutine</h1><p>Go 不需要自己编写进程、线程、协程，直接使用 goroutine，在语言中内置了调度和上下文切换机制，可轻松开启上万 goroutine。</p><p>goroutine 协程概念上类似于线程，Go 程序可以智能地将 goroutine 分配给不同的 CPU，由Go的运行时（runtime）调度和管理的。</p><h2 id="使用-goroutine"><a href="#使用-goroutine" class="headerlink" title="使用 goroutine"></a>使用 goroutine</h2><p>goroutine 使用时将任务包装成函数，通过 <code>go</code> 关键字开启</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>如果 goroutine 没有执行完，但主线程已经结束，goroutine 也会跟着结束。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>每两秒输出一次 go routine，每秒输出一次 hello，输出 10 次 hello 后结束</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runtime</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"go routine"</span>)</span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> runtime()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="协程调度"><a href="#协程调度" class="headerlink" title="协程调度"></a>协程调度</h1><h2 id="GPM-模型"><a href="#GPM-模型" class="headerlink" title="GPM 模型"></a>GPM 模型</h2><p>goroutine 调度系统为 GPM 运行时（runtime）调度器，包括了 3 个部分—— goroutine G、处理器 P、线程 M</p><ul><li>G：goroutine<ul><li>存放本 goroutine 的一些信息，以及与 P 绑定等信息</li></ul></li><li>P：Processor，处理器<ul><li>P 对 goroutine 队列进行调度</li><li>goroutine 与线程的中间层，管理着一组 goroutine 队列，储存所管 goroutine 运行的上下文</li><li>P 的数量决定了最大可并行数量，个数由 <code>runtime.GOMAXPROCS</code> 设置，最大 256，默认为 CPU 数</li></ul></li><li>M：Machine，线程<ul><li>Go 运行时对操作内核线程的虚拟，与内核线程一一对应</li></ul></li></ul><p>P 管理着一群 G，调度在 M 上运行。一般比例为 G : P : M = n : 1 : 1</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20240912012030653.png" alt="GPM调度" style="zoom:50%;" /></p><p>调度机制：</p><ul><li>把占用 CPU 时间过长的 goroutine 暂停，去运行后续的 goroutine</li><li>当自己队列的消费光了，则去取全局队列中的 goroutine</li><li>如全局队列也消费光了，则去抢其他 P 的 goroutine</li><li>如果一个 G 长时间占据着 M，runtime 就会新建一个 M，管理阻塞 G 的 P 会将其他的 G 都挂到新建的 M 上。当旧的 M 上的 G 运行完或者被判定为死掉时，就会回收旧有的 M。</li></ul><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/view.png" alt="GPM调度机制"></p><p>由此可以看出，从调度角度看，goroutine 相较于线程的优势：</p><ul><li>goroutine 的调度由 runtime 调度器调度，全程在用户态</li><li>线程需要内核进行调度，需要内核态和用户态之间频繁切换</li></ul><h2 id="runtime-包"><a href="#runtime-包" class="headerlink" title="runtime 包"></a>runtime 包</h2><p>runtime 运行时用来调度和管理 goroutine，可通过 runtime 包程序控制 goroutine 以及获取环境信息。</p><h3 id="runtime-Gosched"><a href="#runtime-Gosched" class="headerlink" title="runtime.Gosched()"></a>runtime.Gosched()</h3><p>释放当前 goroutine 的 CPU 时间片给其他 goroutine 执行，当前 goroutine 等待未来的时间片再执行。</p><p><strong>示例</strong></p><p>下面代码，运行后有两种可能：</p><ul><li>一段数字 + 两个 hello<ul><li>CPU 时间片先给数字协程，再分配给 hello 主协程</li></ul></li><li>两个 hello<ul><li>CPU 时间片先给 hello 主协程，主协程结束后程序直接结束，不输出数字，再分配数字协程</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 主协程</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时在主协程运行输出 <code>hello</code> 前，添加 <code>runtime.Gosched()</code>，会切到其他 goroutine 输出多次数字，等数字协程的时间片用完时，切回主协程输出 <code>hello</code> ，再切回数字协程输出数字，最后主协程输出 <code>hello</code> 后结束程序。</p><p>即输出：一段数字 + hello + 一段数字 + hello</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 主协程</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 切到其他进程先执行</span></span><br><span class="line">runtime.Gosched()</span><br><span class="line">fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="runtime-Goexit"><a href="#runtime-Goexit" class="headerlink" title="runtime.Goexit()"></a>runtime.Goexit()</h3><p>退出当前 goroutine，不过退出前还是会正常执行 defer 语句。</p><p><strong>示例</strong></p><p>下面代码，主协程休眠一秒，数字协程输出一段数字之后，主协程苏醒输出 <code>hello</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">      <span class="comment">// runtime.Goexit()</span></span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 <code>runtime.Goexit()</code> 后，直接结束协程，不会输出数字，只输出 <code>hello</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">runtime.Goexit()</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="runtime-GOMAXPROCS"><a href="#runtime-GOMAXPROCS" class="headerlink" title="runtime.GOMAXPROCS()"></a>runtime.GOMAXPROCS()</h3><p>设置可同时使用最大 CPU 核数，并返回之前的设置。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runtime</span>.<span class="title">GOMAXPROCS</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure><h3 id="其他运行时信息"><a href="#其他运行时信息" class="headerlink" title="其他运行时信息"></a>其他运行时信息</h3><ul><li><p>获取 CPU 核数量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runtime.NumCPU()</span><br></pre></td></tr></table></figure></li><li><p>获取 GOROOT 路径</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runtime.GOROOT()</span><br></pre></td></tr></table></figure></li><li><p>获取操作系统</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runtime.GOOS</span><br></pre></td></tr></table></figure></li></ul><h1 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h1><h2 id="临界资源"><a href="#临界资源" class="headerlink" title="临界资源"></a>临界资源</h2><p>临界资源：并发环境中多个进程/线程/协程共享的资源。</p><p>多个 goroutine 访问同一资源时，多个写 goroutine，会造成临界资源安全问题。</p><p>下面示例中，4 个售票员并发卖 10 张票，原本是希望卖到无票时所有售票员停止卖票，但同时读写就可能导致资源安全问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numTicket = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saleTicket</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> numTicket &gt; <span class="number">0</span> &#123;</span><br><span class="line">time.Sleep(time.Duration(rand.Intn(<span class="number">1000</span>)) * time.Millisecond)</span><br><span class="line">numTicket--</span><br><span class="line">fmt.Printf(<span class="string">"Saler %d sales one ticket, left %d tickets.\n"</span>, i, numTicket)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Saler %d detects no ticket.\n"</span>, i)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numSaler := <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numSaler; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> saleTicket(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如这次跑的结果，最后三个售票员检查时还有余票，但卖时已经无票了，导致票成负数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Saler 3 sales one ticket, left 9 tickets.</span><br><span class="line">Saler 0 sales one ticket, left 8 tickets.</span><br><span class="line">Saler 0 sales one ticket, left 7 tickets.</span><br><span class="line">Saler 2 sales one ticket, left 6 tickets.</span><br><span class="line">Saler 1 sales one ticket, left 5 tickets.</span><br><span class="line">Saler 3 sales one ticket, left 4 tickets.</span><br><span class="line">Saler 1 sales one ticket, left 3 tickets.</span><br><span class="line">Saler 0 sales one ticket, left 2 tickets.</span><br><span class="line">Saler 2 sales one ticket, left 1 tickets.</span><br><span class="line">Saler 3 sales one ticket, left 0 tickets.</span><br><span class="line">Saler 3 detects no ticket.</span><br><span class="line">Saler 2 sales one ticket, left -1 tickets.</span><br><span class="line">Saler 2 detects no ticket.</span><br><span class="line">Saler 1 sales one ticket, left -2 tickets.</span><br><span class="line">Saler 1 detects no ticket.</span><br><span class="line">Saler 0 sales one ticket, left -3 tickets.</span><br><span class="line">Saler 0 detects no ticket.</span><br></pre></td></tr></table></figure><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><h3 id="互斥锁-sync-Mutex"><a href="#互斥锁-sync-Mutex" class="headerlink" title="互斥锁 sync.Mutex"></a>互斥锁 sync.Mutex</h3><p>多个 goroutine 同时操作同一个资源（临界区）会导致竞态问题，需要通过对资源上锁，确保同一时刻只有一个 goroutine 访问该共享资源。</p><ul><li><p>声明一个互斥锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mutex sync.Mutex</span><br></pre></td></tr></table></figure></li><li><p>在使用资源前加锁，防止其他 goroutine 同时使用该资源</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutex.Lock()</span><br></pre></td></tr></table></figure></li><li><p>在使用完资源后解锁，释放该资源给其他 goroutine 使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutex.Unlock()</span><br></pre></td></tr></table></figure></li></ul><p>上面的用例，在查看票数前加锁，再售票和退出前解锁，如此就不会出现多卖出票的情况。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mutex sync.Mutex</span><br><span class="line"><span class="keyword">var</span> numTicket = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saleTicket</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">mutex.Lock()</span><br><span class="line"><span class="keyword">if</span> numTicket &gt; <span class="number">0</span> &#123;</span><br><span class="line">time.Sleep(time.Duration(rand.Intn(<span class="number">1000</span>)) * time.Millisecond)</span><br><span class="line">numTicket--</span><br><span class="line">fmt.Printf(<span class="string">"Saler %d sales one ticket, left %d tickets.\n"</span>, i, numTicket)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//解锁</span></span><br><span class="line">mutex.Unlock()</span><br><span class="line">fmt.Printf(<span class="string">"Saler %d detects no ticket.\n"</span>, i)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//解锁</span></span><br><span class="line">mutex.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numSaler := <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numSaler; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> saleTicket(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读写互斥锁-sync-RWMutex"><a href="#读写互斥锁-sync-RWMutex" class="headerlink" title="读写互斥锁 sync.RWMutex"></a>读写互斥锁 sync.RWMutex</h3><p>互斥锁是完全互斥的，无关是读还是写。但其实并发读并不会出现资源竞争的问题，所以引入读写锁，不限制并发读，但限制并发读写、写写。</p><div class="table-container"><table><thead><tr><th></th><th>读</th><th>写</th></tr></thead><tbody><tr><td>读</td><td>Y</td><td>N</td></tr><tr><td>写</td><td>N</td><td>N</td></tr></tbody></table></div><ul><li><p>声明一个读写互斥锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mutex sync.RWMutex</span><br></pre></td></tr></table></figure></li><li><p>在写资源前加写锁，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutex.Lock()</span><br></pre></td></tr></table></figure></li><li><p>在写完资源后解写锁，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutex.Unlock()</span><br></pre></td></tr></table></figure></li><li><p>在读资源前加读锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutex.RLock()</span><br></pre></td></tr></table></figure></li><li><p>在读完资源后解读锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutex.RUnlock()</span><br></pre></td></tr></table></figure></li></ul><p>示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">x      <span class="keyword">int64</span></span><br><span class="line">wg     sync.WaitGroup</span><br><span class="line">lock   sync.Mutex</span><br><span class="line">rwlock sync.RWMutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">()</span></span> &#123;</span><br><span class="line">rwlock.Lock() <span class="comment">// 加写锁</span></span><br><span class="line">x = x + <span class="number">1</span></span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Millisecond) <span class="comment">// 假设读操作耗时10毫秒</span></span><br><span class="line">rwlock.Unlock()                   <span class="comment">// 解写锁</span></span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line">rwlock.RLock()               <span class="comment">// 加读锁</span></span><br><span class="line">time.Sleep(time.Millisecond) <span class="comment">// 假设读操作耗时1毫秒</span></span><br><span class="line">rwlock.RUnlock()             <span class="comment">// 解读锁</span></span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> write()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> read()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">end := time.Now()</span><br><span class="line">fmt.Println(end.Sub(start))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原子操作-atomic"><a href="#原子操作-atomic" class="headerlink" title="原子操作 atomic"></a>原子操作 atomic</h2><blockquote><p>原子操作即不能被中断的操作，对资源进行原子操作时，CPU 不会再对该资源进行其他操作。原子操作无锁，通过 CPU 指令直接实现。</p></blockquote><p>通过互斥锁操作会涉及内核态的上下文切换，Go 可以调用 atomic 包在用户态完成原子操作来保证并发安全。</p><ul><li>原子操作支持的类型：<code>int32</code>、<code>int64</code>、<code>uint32</code>、<code>uint64</code>、<code>uintptr</code>、<code>unsafe.Pointer</code>，即整数和指针</li></ul><p>以 <code>int64</code> 为例，取变量地址用于操作</p><ul><li><p>读取</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">atomic</span>.<span class="title">LoadInt64</span><span class="params">(addr *<span class="keyword">int64</span>)</span> <span class="params">(val <span class="keyword">int64</span>)</span></span></span><br></pre></td></tr></table></figure></li><li><p>写入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">atomic</span>.<span class="title">StoreInt64</span><span class="params">(addr *<span class="keyword">int64</span>, val <span class="keyword">int64</span>)</span></span></span><br></pre></td></tr></table></figure></li><li><p>修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">atomic</span>.<span class="title">AddInt64</span><span class="params">(addr *<span class="keyword">int64</span>, delta <span class="keyword">int64</span>)</span> <span class="params">(<span class="built_in">new</span> <span class="keyword">int64</span>)</span></span></span><br></pre></td></tr></table></figure></li><li><p>交换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">atomic</span>.<span class="title">SwapInt64</span><span class="params">(addr *<span class="keyword">int64</span>, <span class="built_in">new</span> <span class="keyword">int64</span>)</span> <span class="params">(old <span class="keyword">int64</span>)</span></span></span><br></pre></td></tr></table></figure></li><li><p>比较交换，交换前先检查当前值是否是 old，如是则交换成 new，如不是则不交换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">atomic</span>.<span class="title">CompareAndSwapInt64</span><span class="params">(addr *<span class="keyword">int64</span>, old <span class="keyword">int64</span>, <span class="built_in">new</span> <span class="keyword">int64</span>)</span> <span class="params">(swapped <span class="keyword">bool</span>)</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="管道-Channel"><a href="#管道-Channel" class="headerlink" title="管道 Channel"></a>管道 Channel</h2><p>Go 的并发模型是 CSP，Communicating Sequential Process，提倡使用通信共享内存，而不是通过共享内存方式进行通信。</p><p>Go 可以通过共享内存来实现数据共享，使用锁来防止竞态，但这不可避免的加大了性能问题。由此引入了管道 Channel 的概念，用于 goroutine 之间通信。</p><h3 id="创建-Channel"><a href="#创建-Channel" class="headerlink" title="创建 Channel"></a>创建 Channel</h3><p>Channel 是引用类型，每个 Channel 都需要定义其允许传输的数据类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> 数据类型  <span class="comment">//零值为nil</span></span><br></pre></td></tr></table></figure><p>通道的零值为 <code>nil</code>，因此需要使用 <code>make</code> 来定义（缓冲区大小可缺省）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> 数据类型 [, 缓冲区大小])</span><br></pre></td></tr></table></figure><h3 id="Channel-操作"><a href="#Channel-操作" class="headerlink" title="Channel 操作"></a>Channel 操作</h3><p>在定义了 Channel 后，可对其进行下面操作，以 <code>int</code> 类型为例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>发送</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch &lt;- <span class="number">10</span></span><br></pre></td></tr></table></figure><ol><li>当存在等待的接收者时，直接将数据发送给阻塞的接收者</li><li>当不存在等待的接收者，但缓冲区存在空余空间时，将数据写入缓冲区</li><li>当不存在等待的接收者，且不存在缓冲区或者缓冲区已满时，阻塞等待其他 goroutine 从 Channel 中接收数据</li></ol></li><li><p><strong>接收</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;-ch <span class="comment">//丢弃通道值</span></span><br><span class="line">data := &lt;-ch <span class="comment">//接收通道值到data</span></span><br><span class="line">data, ok := &lt;-ch <span class="comment">//接收通道值到data，ok接收通道是否关闭（false，则通道已关闭）</span></span><br></pre></td></tr></table></figure><ol><li>当存在等待的发送者时，从阻塞的发送者或者缓冲区中获取数据</li><li>当不存在等待的发送者，但缓冲区存在数据时，从缓冲区接收数据</li><li>当不存在等待的发送者，且不存在缓冲区或者缓冲区不存在数据时，阻塞等待其他 goroutine 向 Channel 中发送数据</li></ol></li><li><p><strong>关闭</strong>，如果不再需要往通道发送值，则可以关闭通道，关闭通道不是必须的，可以自动通过垃圾回收机制回收</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">close</span>(ch)</span><br></pre></td></tr></table></figure><p>关闭后的通道：</p><ol><li>对关闭后的通道发送值会导致 panic</li><li>对关闭后的通道接收会一直获取到值，知道通道空</li><li>对关闭后且已经空的通道接收会得到对应数据类型的零值</li><li>关闭已经关闭的通道会导致 panic</li></ol></li></ul><div class="table-container"><table><thead><tr><th>Channel缓冲区</th><th>nil</th><th>非空</th><th>空</th><th>满</th><th>非空非满</th></tr></thead><tbody><tr><td>发送</td><td>阻塞</td><td>发送值</td><td>发送值</td><td>阻塞</td><td>发送值</td></tr><tr><td>接收</td><td>阻塞</td><td>接收值</td><td>阻塞</td><td>接收值</td><td>接收值</td></tr><tr><td>关闭</td><td>panic</td><td>关闭成功，读取所有数据后，返回零值</td><td>关闭成功，返回零值</td><td>关闭成功，读取所有数据后，返回零值</td><td>关闭成功，读取所有数据后，返回零值</td></tr></tbody></table></div><h3 id="无缓冲的通道"><a href="#无缓冲的通道" class="headerlink" title="无缓冲的通道"></a>无缓冲的通道</h3><p>无缓冲通道，又称阻塞通道、同步通道，定义 Channel 时不设置缓冲区大小即为无缓冲通道。</p><p>此类 Channel 发送和接收都无缓冲，所以无接收时发送会被阻塞，直到其他 goroutine 从该通道读取数据；同理，无发送时接收会被阻塞，直到其他 goroutine 发送到该通道。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/3.png" alt="无缓冲Channel"></p><p>下面错误用例，发送数据到 Channel，无接收，阻塞，无法运行到接收步骤，于是发生死锁报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">ch &lt;- <span class="number">10</span> <span class="comment">//无接收发送，死锁</span></span><br><span class="line">data := &lt;-ch</span><br><span class="line">fmt.Println(data)</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要启动另一个 goroutine 接收，解开死锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recvFromChannel</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">data := &lt;-ch</span><br><span class="line">fmt.Println(data)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> recvFromChannel(ch)</span><br><span class="line">ch &lt;- <span class="number">10</span></span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有缓冲的通道"><a href="#有缓冲的通道" class="headerlink" title="有缓冲的通道"></a>有缓冲的通道</h3><p>定义 Channel 时设置缓冲区大小即可设置为有缓冲通道，在缓冲区有剩余时，即使无接收者，也不阻塞发送。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/4.png" alt="有缓冲Channel"></p><p>上述死锁用例，加上缓冲区，即可正常运行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>) <span class="comment">//创建容量为1的缓冲区的通道</span></span><br><span class="line">ch &lt;- <span class="number">10</span></span><br><span class="line">data := &lt;-ch</span><br><span class="line">fmt.Println(data)</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h3><p>有些 goroutine 函数调用 Channel 仅需发送或者接收，则可以使用单向通道进行限制。</p><ul><li><p>只能发送的通道</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">int</span></span><br></pre></td></tr></table></figure></li><li><p>只能接收的通道</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;-<span class="keyword">chan</span> <span class="keyword">int</span></span><br></pre></td></tr></table></figure></li></ul><p>下面例子，两个函数一个仅需要发送，一个仅需要接收，即可传入单向通道</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recvFromChannel</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123; <span class="comment">//仅接收通道</span></span><br><span class="line">data := &lt;-ch</span><br><span class="line">fmt.Println(data)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendToChannel</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123; <span class="comment">//仅发送通道</span></span><br><span class="line">ch &lt;- <span class="number">10</span></span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> recvFromChannel(ch)</span><br><span class="line"><span class="keyword">go</span> sendToChannel(ch)</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通道的遍历"><a href="#通道的遍历" class="headerlink" title="通道的遍历"></a>通道的遍历</h3><p>循环从通道取值的方法</p><p>方法一：使用 <code>for</code> 持续循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendToChannel</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">ch &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> sendToChannel(ch)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">data, ok := &lt;-ch</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(data)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：<code>for...range</code>，既可以循环取值，并且在通道关闭后退出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendToChannel</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">ch &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> sendToChannel(ch)</span><br><span class="line"><span class="keyword">for</span> data := <span class="keyword">range</span> ch &#123;</span><br><span class="line">fmt.Println(data)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通道的调度"><a href="#通道的调度" class="headerlink" title="通道的调度"></a>通道的调度</h3><p>通过 <code>select</code> 随机运行一个接收到的 Channel 的 case</p><ol><li>如果有可接收的 Channel，则随机运行其中一个 case</li><li>如果没有可接收的 Channel，则运行 <code>default</code> case</li><li>如果没有可接收的 Channel，且没有 <code>default</code> case，则会阻塞直到有接收到 Channel</li></ol><p>使用无限 <code>for</code> 循环包裹 <code>select</code>，则可实现持续监听多个通道，触发相应操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> data1, ok := &lt;-ch1:</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">      fmt.Println(<span class="string">"ch1 closed."</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ch1处理</span></span><br><span class="line">  <span class="keyword">case</span> &lt;-ch2:</span><br><span class="line"><span class="comment">// ch2处理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sync-包"><a href="#sync-包" class="headerlink" title="sync 包"></a>sync 包</h1><h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><p>在多线程并发过程中，如果主协程结束，其他 goroutine 也会跟着结束，所以经常需要让主协程等待其他 goroutine 结束。使用 <code>time.Sleep</code> 过于生硬，不合适。于是引入了 <code>sync.WaitGroup</code> 处理该问题 。</p><ul><li><code>(wg * WaitGroup) Add(delta int)</code>：计数器 + delta</li><li><code>(wg *WaitGroup) Done()</code>：计数器 -1</li><li><code>(wg *WaitGroup) Wait()</code>：阻塞直到计数器变为 0</li></ul><p>每开一个并发 goroutine 就让计数器 +1，并发 goroutine 结束时则让计数器 -1，主协程调用 <code>Wait()</code> 阻塞直到所有 goroutine 结束，计数器清零。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup <span class="comment">//声明一个WaitGroup</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcA</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Done() <span class="comment">//一个goroutine结束，计数器-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numGoroutine := <span class="number">4</span></span><br><span class="line">wg.Add(numGoroutine) <span class="comment">//计数器+并发goroutine数</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numGoroutine; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> funcA()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait() <span class="comment">//主协程阻塞直到所有goroutine跑完</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><p><code>sync.Once</code> 提供函数只执行一次的方法，如初始化配置、数据库连接此类并发只需要调用一次的函数，可用此方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">Do</span><span class="params">(f <span class="keyword">func</span>()</span>)</span></span><br></pre></td></tr></table></figure><p>下面示例，<code>funcA</code> 和 <code>funcB</code> 都需要调用 <code>InitConfig</code> 函数，使用 <code>sync.Once</code>，可使得该函数只被调用一次。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">wg   sync.WaitGroup</span><br><span class="line">once sync.Once <span class="comment">//声明once</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Init Configuration"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcA</span><span class="params">()</span></span> &#123;</span><br><span class="line">once.Do(InitConfig) <span class="comment">//并发只调用一次</span></span><br><span class="line">fmt.Println(<span class="string">"function A"</span>)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcB</span><span class="params">()</span></span> &#123;</span><br><span class="line">once.Do(InitConfig) <span class="comment">//并发只调用一次</span></span><br><span class="line">fmt.Println(<span class="string">"function B"</span>)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> funcA()</span><br><span class="line"><span class="keyword">go</span> funcB()</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Init Configuration</span><br><span class="line">function B</span><br><span class="line">function A</span><br></pre></td></tr></table></figure><h2 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h2><p>Go 原生的 map 并不是并发安全的，需要额外加锁。sync 包提供 <code>sync.Map</code> 则是一种并发安全的 map，无需加锁。内置了诸如Store、Load、LoadOrStore、Delete、Range等操作方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">wg   sync.WaitGroup</span><br><span class="line">once sync.Once</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := sync.Map&#123;&#125; <span class="comment">//定义map</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">key := strconv.Itoa(n)</span><br><span class="line">m.Store(key, n) <span class="comment">//存值</span></span><br><span class="line">value, _ := m.Load(key) <span class="comment">//取值</span></span><br><span class="line">fmt.Printf(<span class="string">"key: %v, value: %v\n"</span>, key, value)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="周期性定时器-ticker"><a href="#周期性定时器-ticker" class="headerlink" title="周期性定时器 ticker"></a>周期性定时器 ticker</h2><p>ticker 是周期性定时器，除非主动停止，就会一直循环计时下去。如果希望每隔一段时间执行一次，推荐使用 <code>ticker</code></p><div class="table-container"><table><thead><tr><th>用法</th><th>作用</th></tr></thead><tbody><tr><td><code>func time.NewTicker(d time.Duration) *time.Ticker</code></td><td>定义一个定时器 ticker，每隔一个间隔时间就会向 <code>.C</code> 通道发送当前时间</td></tr><tr><td><code>func (t *time.Ticker) Stop()</code></td><td>回收资源，否则会产生内存泄漏</td></tr><tr><td><code>&lt;-t.C</code></td><td>每隔一个设置的时间就会从通道接收到当前时间</td></tr></tbody></table></div><p>以下示例，每隔 5s 输出当前时间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ticker := time.NewTicker(<span class="number">5</span> * time.Second) <span class="comment">//定义5s一次的定时器</span></span><br><span class="line"><span class="keyword">defer</span> ticker.Stop() <span class="comment">//回收资源</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(t *time.Ticker)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Time: "</span>, time.Now().Format(<span class="string">"2006-01-02 15:04:05"</span>))</span><br><span class="line">&lt;-t.C <span class="comment">//每隔5s触发一次</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;(ticker)</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">15</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一次性定时器-timer"><a href="#一次性定时器-timer" class="headerlink" title="一次性定时器 timer"></a>一次性定时器 timer</h2><p>timer 是一次性定时器，只计时一次，重新开始计时需要重置。如果希望只执行一次，或者需要重新设置间隔时间的，推荐使用 <code>timer</code></p><div class="table-container"><table><thead><tr><th>用法</th><th>作用</th></tr></thead><tbody><tr><td><code>func time.NewTimer(d time.Duration) *time.Timer</code></td><td>定义一个定时器 timer，过一个间隔时间后会向 <code>.C</code> 通道发送当前时间</td></tr><tr><td><code>&lt;-t.C</code></td><td>过一个设置的时间从通道接收到当前时间</td></tr><tr><td><code>func (t *time.Timer) Stop() bool</code></td><td>停止当前计时，如果当前在计时，则返回 true，并不会再发送到通道；如果不在计时中，则返回 fasle</td></tr><tr><td><code>func (t *time.Timer) Reset(d time.Duration) bool</code></td><td>重置计时器，如果现在正在计时，则停止当前计时，重新计时（返回同 <code>Stop</code>）</td></tr></tbody></table></div><p>以下示例，使用一次性计时器 timer 模拟周期性计时器 ticker</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">timer := time.NewTimer(<span class="number">5</span> * time.Second) <span class="comment">//定义一次性计时器timer</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Time: "</span>, time.Now().Format(<span class="string">"2006-01-02 15:04:05"</span>))</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(t *time.Timer)</span></span> &#123;</span><br><span class="line">times := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&lt;-t.C <span class="comment">//计时</span></span><br><span class="line">fmt.Println(<span class="string">"Time: "</span>, time.Now().Format(<span class="string">"2006-01-02 15:04:05"</span>))</span><br><span class="line"></span><br><span class="line">times++</span><br><span class="line">t.Reset(<span class="number">5</span> * time.Second) <span class="comment">//重新开始计时</span></span><br><span class="line"><span class="keyword">if</span> times &gt; <span class="number">3</span> &#123;</span><br><span class="line">t.Stop() <span class="comment">//停止计时</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(timer)</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">30</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://www.topgoer.com/并发编程/" target="_blank" rel="noopener">并发编程</a></p></li><li><p><a href="https://hedon954.github.io/noteSite/backend/golang/high/goroutine_channel.html" target="_blank" rel="noopener">Golang 并发编程</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Go 并发编程&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://gy23333.github.io/categories/Golang/"/>
    
    
    <category term="Golang" scheme="https://gy23333.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go学习路线</title>
    <link href="https://gy23333.github.io/2024/09/04/Go%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://gy23333.github.io/2024/09/04/Go%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</id>
    <published>2024-09-04T15:38:51.000Z</published>
    <updated>2024-11-19T18:02:53.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Golang 学习路线梳理</p><a id="more"></a><p><img src="https://github.com/darius-khll/golang-developer-roadmap/blob/master/i18n/zh-CN/golang-developer-roadmap-zh-CN.png?raw=true" alt=""></p><ol><li>Go 基础<ul><li><a href="https://gy23333.github.io/2023/03/15/Go基本语法/">Go 基本语法</a></li><li><a href="https://gy23333.github.io/2024/09/05/Go并发编程/">Go 并发编程</a></li></ul></li><li>SQL</li><li>数据结构与算法</li><li>网络编程</li><li>命令行工具<ul><li>cobra</li></ul></li><li>Web 框架<ul><li>Gin</li></ul></li><li>数据库<ul><li>PostgreSQL</li><li>MongoDB</li><li>Redis</li><li>Mysql</li><li>kafka</li></ul></li><li>日志<ul><li>zap</li><li>logrus</li></ul></li><li>微服务<ul><li><a href="https://gy23333.github.io/2023/09/20/gRPC%E4%B8%8EGo/">gRPC</a></li><li>goKit</li></ul></li><li>云原生<ul><li>gitlab</li><li><a href="https://gy23333.github.io/2024/09/19/Docker/">Docker</a></li><li>Kubernetes</li><li>Promethues</li></ul></li><li>其他<ul><li>Opentelemetry</li><li>Promethues</li></ul></li></ol><p><a href="https://github.com/talkgo/read" target="_blank" rel="noopener">https://github.com/talkgo/read</a></p><p><a href="https://www.topgoer.com" target="_blank" rel="noopener">https://www.topgoer.com</a></p><p><a href="https://www.liwenzhou.com/posts/Go/golang-menu/" target="_blank" rel="noopener">https://www.liwenzhou.com/posts/Go/golang-menu/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Golang 学习路线梳理&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://gy23333.github.io/categories/Golang/"/>
    
    
    <category term="Golang" scheme="https://gy23333.github.io/tags/Golang/"/>
    
    <category term="学习路线" scheme="https://gy23333.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>TRex 教程</title>
    <link href="https://gy23333.github.io/2024/08/23/TRex-%E6%95%99%E7%A8%8B/"/>
    <id>https://gy23333.github.io/2024/08/23/TRex-%E6%95%99%E7%A8%8B/</id>
    <published>2024-08-23T14:18:42.000Z</published>
    <updated>2024-11-11T03:57:58.117Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>TRex 是基于 DPDK 的一个开源、低成本的流量生成器，支持生成 L3～7 流量，提供有状态、无状态两种模式。</p><a id="more"></a><h1 id="TRex-架构"><a href="#TRex-架构" class="headerlink" title="TRex 架构"></a>TRex 架构</h1><p>TRex 之所以能够产生相比其他流量生成器更大的流量，原因是使用了 DPDK。</p><p>传统的工具，比如 iperf，如果想要生成包，需要走 Linux 内核，经过绑定的 socket API、 TCP/IP 栈、设备驱动这样一套完整的流程，最终才能到达物理网卡。</p><p>而 TRex 使用 DPDK，这意味着它可以绕过 Linux 内核态协议栈，直接控制物理网卡，应用单独实现包处理过程，不用经历内核/用户态切换、内存拷贝、冗余的 TCP/IP 协议栈等步骤。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20240831003920365.png" alt="TRex架构"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>进入安装目录，比如 <code>/opt/trex</code> </p></li><li><p>下载 <a href="https://trex-tgn.cisco.com/trex/release/" target="_blank" rel="noopener">TRex 压缩包</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-cache --no-check-certificate https://trex-tgn.cisco.com/trex/release/latest</span><br></pre></td></tr></table></figure></li><li><p>解压 TRex 压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf latest</span><br></pre></td></tr></table></figure></li></ol><h1 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h1><p>TRex 需要 DPDK 绑定网卡，通过 TRex 提供的脚本可以查看或修改网卡</p><h2 id="查看网卡状态"><a href="#查看网卡状态" class="headerlink" title="查看网卡状态"></a>查看网卡状态</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/opt/trex/v3.<span class="number">05</span><span class="comment"># ./dpdk_setup_ports.py -s</span></span><br><span class="line"></span><br><span class="line">Network devices <span class="keyword">using</span> DPDK-compatible driver</span><br><span class="line">============================================</span><br><span class="line">&lt;none&gt;</span><br><span class="line"></span><br><span class="line">Network devices <span class="keyword">using</span> kernel driver</span><br><span class="line">===================================</span><br><span class="line"><span class="number">0000</span>:<span class="number">02</span>:<span class="number">01.0</span> <span class="string">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class="keyword">if</span>=ens33 drv=e1000 unused=igb_uio,vfio<span class="literal">-pci</span>,uio_pci_generic *Active*</span><br><span class="line"><span class="number">0000</span>:<span class="number">02</span>:<span class="number">05.0</span> <span class="string">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class="keyword">if</span>=ens37 drv=e1000 unused=igb_uio,vfio<span class="literal">-pci</span>,uio_pci_generic</span><br><span class="line"><span class="number">0000</span>:<span class="number">02</span>:<span class="number">06.0</span> <span class="string">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class="keyword">if</span>=ens38 drv=e1000 unused=igb_uio,vfio<span class="literal">-pci</span>,uio_pci_generic</span><br><span class="line"></span><br><span class="line">Other network devices</span><br><span class="line">=====================</span><br><span class="line">&lt;none&gt;</span><br></pre></td></tr></table></figure><ul><li>当前三张网卡都绑定在 kernel 下，DPDK 未绑定网卡</li><li><code>Active</code>的网卡为 ssh 使用的管理网卡，不可以设置在 TRex 配置文件中，分配给 DPDK</li></ul><p>在运行 TRex 时，会自动将 TRex 配置文件中<code>interfaces</code>网卡绑定 DPDK</p><h1 id="TRex-配置"><a href="#TRex-配置" class="headerlink" title="TRex 配置"></a>TRex 配置</h1><p><a href="https://trex-tgn.cisco.com/trex/doc/trex_manual.html#_platform_yaml_cfg_argument" target="_blank" rel="noopener">官方文档</a></p><p>Yaml 格式配置文件，用来配置 TRex 服务器，包括：</p><ul><li>每个网卡的源、目的 IP 和 MAC 地址</li><li>屏蔽网卡，保证 TRex 不使用管理网卡作为流量网卡</li></ul><p>在运行 TRex 服务器时，通过 <code>--cfg</code>配置，如果未设置，则使用默认路径<code>/etc/trex_cfg.yaml</code>，TRex 提供了一些示例 TRex 配置文件在 <code>$TREX_ROOT/cfg</code></p><h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><ul><li><code>port_limit</code>：（必选）网卡数量，绑定 DPDK 的网卡数量，必须和<code>interfaces</code>中的网卡数量对应</li><li><code>version</code>：（必选）必须是 2</li><li><code>interfaces</code>：（必选）TRex 使用的网卡 PCI，顺序有意义，对应<code>port_info</code>中的顺序<ul><li>必须是偶数个，成对存在，按顺序分别为 clinet 和 server 网卡</li><li>如是奇数个网卡，可以使用<code>dummy</code>填充，但每对网卡对必须有非<code>dummy</code> 的网卡</li><li>通过 <code>./dpdk_setup_ports.py -s</code> 查看网卡 PCI</li><li>不能填入 ssh 使用的网卡</li></ul></li><li><code>c</code>：分配给每个网卡对的线程数，会被运行时的命令行参数<code>-c</code>覆盖</li><li><code>services_core</code>：（非必选）用来跑 scapy、PyBird、Emu 这些 service 的核，如果未设置，则会采用以下逻辑<ul><li><em>low_end</em> 开启，使用 <em>low_end_core</em></li><li><em>low_end</em> 未开启，使用 <em>master_thread_id</em></li><li><em>low_end</em> 未开启，使用 <em>master_thread_id</em>，使用 core 0</li></ul></li><li><code>port_info</code>：（必选）<ul><li>网卡信息，每项按顺序对应<code>interfaces</code>中的网卡</li><li>（必选）对于每张网卡，都必须要设置目的 MAC 地址，有两种设置方式：<ul><li>直接设置<code>dest_mac</code></li><li>设置<code>default_gw</code>，在未设置<code>dest_mac</code>时，TRex 会对<code>default_gw</code>这个 IP 发送 ARP 请求，使用回复的结果作为目的 MAC 地址</li></ul></li><li><code>dest_mac</code>：目的 MAC 地址，该网卡打流将打往这个 MAC 地址</li><li><code>default_gw</code>：默认网关，用于生成目的 MAC 地址</li><li><code>src_mac</code>：（非必选）该网卡生成流量的源 MAC 地址，如果未设置，将使用该网卡的 MAC 地址作为源 MAC 地址</li></ul></li><li><code>platform</code>：（非必选）<ul><li><code>master_thread_id</code>：控制线程使用的线程 id</li><li><code>latency_thread_id</code>：RX 线程使用的线程 id，用来计算延迟</li><li><code>dual_if</code>：<ul><li>与<code>interfaces</code>中的网卡对一一对应</li><li><code>socket</code>：该网卡对被分配的 NUMA 节点</li><li><code>threads</code>：该网卡对用来发包的线程 id</li></ul></li></ul></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">port_limit      :</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">version         :</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#List of interfaces. Change to suit your setup. Use ./dpdk_setup_ports.py -s to see available options</span></span><br><span class="line">  <span class="attr">interfaces    :</span> <span class="string">["03:00.0","03:00.1"]</span></span><br><span class="line">  <span class="attr">port_info       :</span>  <span class="comment"># Port IPs. Change to suit your needs. In case of loopback, you can leave as is.</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ip         :</span> <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">            <span class="attr">default_gw :</span> <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ip         :</span> <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span></span><br><span class="line">            <span class="attr">default_gw :</span> <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">platform :</span></span><br><span class="line">      <span class="attr">master_thread_id  :</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">latency_thread_id :</span> <span class="number">7</span></span><br><span class="line">      <span class="attr">dual_if   :</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">socket   :</span> <span class="number">0</span></span><br><span class="line">             <span class="attr">threads  :</span> <span class="string">[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><h1 id="Traffic-模版配置"><a href="#Traffic-模版配置" class="headerlink" title="Traffic 模版配置"></a>Traffic 模版配置</h1><p><a href="https://trex-tgn.cisco.com/trex/doc/trex_manual.html#_traffic_yaml_f_argument_of_stateful" target="_blank" rel="noopener">官方文档</a></p><p>Stateful 模式时需配置 Traffic 模版，用以生成流量。</p><p>运行 TRex 时，通过配置<code>-f &lt;file&gt;</code>参数来设置流量模版 yaml 文件。</p><h2 id="配置项-1"><a href="#配置项-1" class="headerlink" title="配置项"></a>配置项</h2><ul><li><p><code>duration</code>：测试持续时间，即打多久的流量，单位 s。会被运行时的命令行参数<code>-d</code>覆盖</p></li><li><p><code>generator</code>：</p><ul><li><p>生成流量的 IP 依据<code>clients_start</code>、<code>clients_end</code>、<code>servers_start</code>、<code>servers_end</code>、<code>dual_port_mask</code></p><ul><li><p><code>clients_start</code>、<code>clients_end</code>、<code>servers_start</code>、<code>servers_end</code> 分别设置了 client 和 server 的 IP 池，该范围即限定了 client 和 server 的总数</p></li><li><p><code>dual_port_mask</code> 设置网卡对的偏移量，使得可以为每个网卡对配置不同的静态路由，如需要发送同样的范围，则设置为<code>0.0.0.0</code></p></li><li><p>下面示例中，如果 TRex 配置设置了两个网卡对（4张网卡），则分配 IP 如下</p><ul><li>```powershell<br>port pair-0 (0,1) —&gt; C (16.0.0.1-16.0.0.128  ) &lt;-&gt; S( 48.0.0.1 - 48.0.0.128)<br>port pair-1 (2,3) —&gt; C (17.0.0.129-17.0.0.255  ) &lt;-&gt; S( 49.0.0.129 - 49.0.0.255) + mask  (“1.0.0.0”)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - client 和 server 数量即为设置范围的数量，都是 255，不会因为网卡数量而变化</span><br><span class="line"></span><br><span class="line">  - 网卡对偏移量为&#96;dual_port_mask&#96;，第二对网卡对比第一对偏移 &#96;1.0.0.0&#96;</span><br><span class="line"></span><br><span class="line">- 如果 &#96;dual_port_mask&#96; 设置为&#96;0.0.0.0&#96;，依旧设置 TRex 配置两个网卡对（4张网卡），则分配 IP 如下</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;powershell</span><br><span class="line">    port pair-0 (0,1) --&gt; C (16.0.0.1-16.0.0.128  ) &lt;-&gt; S( 48.0.0.1 - 48.0.0.128)</span><br><span class="line">    port pair-1 (2,3) --&gt; C (16.0.0.129-16.0.0.255  ) &lt;-&gt; S( 48.0.0.129 - 48.0.0.255)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>生成流量的 IP 范围</p><ul><li>client IP 范围：网卡对中的 client 发送流量的源 IP、网卡对中的 server 发送流量的目的 IP</li><li>server IP 范围：网卡对中的 client 发送流量的目的 IP、网卡对中的 server 发送流量的源 IP</li></ul></li></ul></li><li><p><code>clients_per_gb</code>：已废弃</p></li><li><p><code>min_clients</code>：已废弃</p></li><li><p><code>cap_info</code></p><ul><li><code>name</code>：pcap文件，流量模版文件<ul><li>只允许单数据流</li><li>生成流量时使用该流量模版，并将 IP 替换为 client 和 server 的 IP 池中的 IP</li></ul></li><li><code>cps</code>：每秒连接数，实际连接数需乘以运行时设置的 <code>-m</code></li><li><code>ipg</code>：报文间隙，单位 ms</li><li><code>rtt</code>：设置与<code>ipg</code>相同的值</li><li><code>w</code>：定义一个burst中该template生成几个flow，默认为 1</li></ul></li></ul></li></ul><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">duration :</span> <span class="number">10.0</span></span><br><span class="line">  <span class="attr">generator :</span></span><br><span class="line">          <span class="attr">distribution :</span> <span class="string">"seq"</span></span><br><span class="line">          <span class="attr">clients_start :</span> <span class="string">"16.0.0.1"</span></span><br><span class="line">          <span class="attr">clients_end   :</span> <span class="string">"16.0.0.255"</span></span><br><span class="line">          <span class="attr">servers_start :</span> <span class="string">"48.0.0.1"</span></span><br><span class="line">          <span class="attr">servers_end   :</span> <span class="string">"48.0.0.255"</span></span><br><span class="line">          <span class="attr">clients_per_gb :</span> <span class="number">201</span></span><br><span class="line">          <span class="attr">min_clients    :</span> <span class="number">101</span></span><br><span class="line">          <span class="attr">dual_port_mask :</span> <span class="string">"1.0.0.0"</span></span><br><span class="line">          <span class="attr">tcp_aging      :</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">udp_aging      :</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">cap_info :</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cap2/dns.pcap</span></span><br><span class="line">       <span class="attr">cps :</span> <span class="number">1.0</span></span><br><span class="line">       <span class="attr">ipg :</span> <span class="number">10000</span></span><br><span class="line">       <span class="attr">rtt :</span> <span class="number">10000</span></span><br><span class="line">       <span class="attr">w   :</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="运行命令行参数"><a href="#运行命令行参数" class="headerlink" title="运行命令行参数"></a>运行命令行参数</h1><p>通过<code>./t-rex-64</code>运行 TRex 服务器，添加参数设置有状态/无状态以及其他选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./t-rex-64 [mode] &lt;options&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>./t-rex-64 -h</code>查看细节</p><p>设置 mode：</p><ul><li><code>-f &lt;file&gt;</code>：运行有状态模式，需设置流量模版 yaml 文件</li><li><code>-i</code>：运行无状态模式</li></ul><p>可选参数：</p><ul><li><code>--cfg &lt;file&gt;</code>：TRex 配置文件，如果未设置，则使用默认路径<code>/etc/trex_cfg.yaml</code></li><li><code>-c &lt;num&gt;</code>：给每个网卡对分配的线程数，会覆盖 TRex 配置中的<code>c</code></li><li><code>-m &lt;num&gt;</code>：流量放大倍数，生成基础流量大小乘以这个倍数的流量</li><li><code>-d</code>：持续时间，单位 s，默认3600s</li></ul><h1 id="Stateful-示例"><a href="#Stateful-示例" class="headerlink" title="Stateful 示例"></a>Stateful 示例</h1><p>使用下面测试交换机性能示例来理解 Stateful 运行模式。</p><p>该示例配置有一台 TRex 机器和一台交换机。</p><ul><li>Trex 机器有两张网卡绑定 DPDK，port 1 作为模拟 client 的网卡，port 2 作为模拟 server 的网卡</li><li>交换机配置有两条静态路由，如下图所示，可以将<code>16.0.0.0/8</code>的包传到 TRex 的 port 0，将<code>48.0.0.0/8</code>的包传到 TRex 的 port 1</li></ul><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20240902003128411.png" alt="TRex-Stateful示例"></p><p>根据下面配置，运行 TRex 有状态模式 <code>./t-rex-64 -f traffic.yaml</code>，打流流程如下</p><ol><li>Port 0 发包<ul><li>TRex 配置中的<code>interfaces</code>网卡对中的前一张网卡 port 0 作为 client 发包</li><li>发包使用 Traffic 模版配置中的 <code>cap_info</code> 中的第一个包，也就是其中的 DNS query 请求</li><li>发送的包中的源目的 IP 会随机被替换为 Traffic 模版中的配置的范围，其中，源 IP 范围 <code>16.0.0.1</code>(clients_start) ~ <code>16.0.0.255</code>(clients_end)，目的 IP 范围 <code>48.0.0.1</code>(servers_start) ~ <code>48.0.255.255</code>(servers_end)</li><li>包被发往 TRex 配置中设置的 port 0 网卡的目的 MAC 地址 <code>dest_mac</code>，本示例即通过默认网卡 <code>default_gw</code> 得到的目的 MAC 地址</li></ul></li><li>Port 1 收包<ul><li>交换机 port 2 收到 TRex 机器 port 1 发来的目的 IP 为<code>48.0.0.1</code>~ <code>48.0.255.255</code>的包，根据路由，将其通过 port 3 转发到 TRex 机器的 port 1</li><li>TRex 配置中的<code>interfaces</code>网卡对中的后一张网卡 port 1 作为 server 收包</li></ul></li><li>Port 1 发包<ul><li>TRex 配置中的<code>interfaces</code>网卡对中的后一张网卡  port 1 作为 server 发包</li><li>发包使用 Traffic 模版配置中的 <code>cap_info</code> 中的第二个包，也就是其中的 DNS response 回复</li><li>发送的包中的源目的 IP 会随机被替换为 Traffic 模版中的配置的范围，其中，源 IP 范围<code>48.0.0.1</code>(servers_start) ~ <code>48.0.255.255</code>(servers_end)，目的 IP 范围 <code>16.0.0.1</code>(clients_start) ~ <code>16.0.0.255</code>(clients_end)</li><li>包被发往 TRex 配置中设置的 port 1 网卡的目的 MAC 地址 <code>dest_mac</code>，本示例即通过默认网卡 <code>default_gw</code> 得到的目的 MAC 地址</li></ul></li><li>Port 0 收包<ul><li>交换机 port 3 收到 TRex 机器 port 2 发来的目的 IP 为<code>16.0.0.1</code> ~ <code>16.0.0.255</code>的包，根据路由，将其通过 port 2 转发到 TRex 机器的 port 0</li><li>TRex 配置中的<code>interfaces</code>网卡对中的后一张网卡 port 0 作为 server 收包</li></ul></li></ol><p>TRex 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">port_limit :</span> <span class="number">2</span>  <span class="comment">#对应下面的网卡数量</span></span><br><span class="line">  <span class="attr">version :</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">interfaces :</span> <span class="string">["06:00.0","06:00.1"]</span>  <span class="comment">#port0、port1的PCI，网卡对，前一个为模拟client的网卡，后一个为模拟server的网卡</span></span><br><span class="line">  <span class="attr">c :</span> <span class="number">6</span>  <span class="comment">#对应下面的每对网卡几个发包threads</span></span><br><span class="line">  <span class="attr">port_info :</span></span><br><span class="line">  <span class="comment">#port0的配置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ip :</span> <span class="number">11.11</span><span class="number">.11</span><span class="number">.11</span>  <span class="comment">#port0的IP</span></span><br><span class="line">      <span class="attr">default_gw :</span> <span class="number">11.11</span><span class="number">.11</span><span class="number">.1</span>  <span class="comment">#port2（port0的网关）的IP，由此推出port0网卡发包时的目的MAC地址</span></span><br><span class="line">    <span class="comment">#port1的配置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ip :</span> <span class="number">12.12</span><span class="number">.12</span><span class="number">.12</span>  <span class="comment">#port1的IP</span></span><br><span class="line">      <span class="attr">default_gw :</span> <span class="number">12.12</span><span class="number">.12</span><span class="number">.1</span>  <span class="comment">#port3（port1的网关）的IP，由此推出port1网卡发包时的目的MAC地址</span></span><br><span class="line">  <span class="attr">platform :</span></span><br><span class="line">    <span class="attr">master_thread_id  :</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">latency_thread_id :</span> <span class="number">7</span></span><br><span class="line">    <span class="attr">dual_if :</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">socket :</span> <span class="number">0</span></span><br><span class="line">         <span class="attr">threads :</span> <span class="string">[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><p>Traffic 模版配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">duration :</span> <span class="number">10.0</span></span><br><span class="line">  <span class="attr">generator :</span></span><br><span class="line">          <span class="attr">distribution :</span> <span class="string">"seq"</span></span><br><span class="line">          <span class="attr">clients_start :</span> <span class="string">"16.0.0.1"</span></span><br><span class="line">          <span class="attr">clients_end   :</span> <span class="string">"16.0.0.255"</span></span><br><span class="line">          <span class="attr">servers_start :</span> <span class="string">"48.0.0.1"</span></span><br><span class="line">          <span class="attr">servers_end   :</span> <span class="string">"48.0.255.255"</span></span><br><span class="line">          <span class="attr">clients_per_gb :</span> <span class="number">201</span></span><br><span class="line">          <span class="attr">min_clients    :</span> <span class="number">101</span></span><br><span class="line">          <span class="attr">dual_port_mask :</span> <span class="string">"1.0.0.0"</span></span><br><span class="line">          <span class="attr">tcp_aging      :</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">udp_aging      :</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">cap_info :</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cap2/dns.pcap</span></span><br><span class="line">       <span class="attr">cps :</span> <span class="number">1.0</span></span><br><span class="line">       <span class="attr">ipg :</span> <span class="number">10000</span></span><br><span class="line">       <span class="attr">rtt :</span> <span class="number">10000</span></span><br><span class="line">       <span class="attr">w   :</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>pcap 包模版</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/opt/trex/v3.<span class="number">05</span><span class="comment"># tcpdump -r cap2/dns.pcap</span></span><br><span class="line">reading from file cap2/dns.pcap, link<span class="literal">-type</span> EN10MB (Ethernet)</span><br><span class="line"><span class="literal">-7</span>:<span class="number">00</span>:<span class="number">00.000000</span> IP <span class="number">21.0</span>.<span class="number">0.2</span>.<span class="number">1030</span> &gt; <span class="number">22.0</span>.<span class="number">0.12</span>.domain: <span class="number">48</span> A? www.cisco.com. (<span class="number">31</span>)</span><br><span class="line"><span class="literal">-7</span>:<span class="number">00</span>:<span class="number">00.020944</span> IP <span class="number">22.0</span>.<span class="number">0.12</span>.domain &gt; <span class="number">21.0</span>.<span class="number">0.2</span>.<span class="number">1030</span>: <span class="number">48</span>* <span class="number">1</span>/<span class="number">0</span>/<span class="number">0</span> A <span class="number">100.100</span>.<span class="number">100.100</span> (<span class="number">47</span>)</span><br></pre></td></tr></table></figure><h1 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h1><h2 id="Stateful"><a href="#Stateful" class="headerlink" title="Stateful"></a>Stateful</h2><p>在 Linux 虚拟机上演示 Stateful 模式简单示例，直接将流量从 ens37 打到 ens38，再从 ens38 回复到 ens37，配置如下</p><h3 id="初始网卡信息"><a href="#初始网卡信息" class="headerlink" title="初始网卡信息"></a>初始网卡信息</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/opt/trex/v3.<span class="number">05</span><span class="comment"># ./dpdk_setup_ports.py -s</span></span><br><span class="line"></span><br><span class="line">Network devices <span class="keyword">using</span> DPDK-compatible driver</span><br><span class="line">============================================</span><br><span class="line">&lt;none&gt;</span><br><span class="line"></span><br><span class="line">Network devices <span class="keyword">using</span> kernel driver</span><br><span class="line">===================================</span><br><span class="line"><span class="number">0000</span>:<span class="number">02</span>:<span class="number">01.0</span> <span class="string">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class="keyword">if</span>=ens33 drv=e1000 unused=igb_uio,vfio<span class="literal">-pci</span>,uio_pci_generic *Active*</span><br><span class="line"><span class="number">0000</span>:<span class="number">02</span>:<span class="number">05.0</span> <span class="string">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class="keyword">if</span>=ens37 drv=e1000 unused=igb_uio,vfio<span class="literal">-pci</span>,uio_pci_generic</span><br><span class="line"><span class="number">0000</span>:<span class="number">02</span>:<span class="number">06.0</span> <span class="string">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class="keyword">if</span>=ens38 drv=e1000 unused=igb_uio,vfio<span class="literal">-pci</span>,uio_pci_generic</span><br><span class="line"></span><br><span class="line">Other network devices</span><br><span class="line">=====================</span><br><span class="line">&lt;none&gt;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/opt/trex/v3.<span class="number">05</span><span class="comment"># ip a</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::<span class="number">1</span>/<span class="number">128</span> scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc fq_codel state UP group default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:f6:<span class="number">9</span>c:<span class="number">9</span>a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp2s1</span><br><span class="line">    inet <span class="number">192.168</span>.<span class="number">0.106</span>/<span class="number">24</span> brd <span class="number">192.168</span>.<span class="number">0.255</span> scope global dynamic noprefixroute ens33</span><br><span class="line">       valid_lft <span class="number">6304</span>sec preferred_lft <span class="number">6304</span>sec</span><br><span class="line">    inet6 fe80::dbd1:<span class="number">95</span>a:<span class="number">915</span>f:<span class="number">65</span>a7/<span class="number">64</span> scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">3</span>: ens37: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc fq_codel state UP group default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:f6:<span class="number">9</span>c:a4 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp2s5</span><br><span class="line">    inet <span class="number">192.168</span>.<span class="number">45.137</span>/<span class="number">24</span> brd <span class="number">192.168</span>.<span class="number">45.255</span> scope global dynamic noprefixroute ens37</span><br><span class="line">       valid_lft <span class="number">904</span>sec preferred_lft <span class="number">904</span>sec</span><br><span class="line">    inet6 fe80::<span class="number">205</span>c:eff4:<span class="number">8197</span>:d72f/<span class="number">64</span> scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">4</span>: ens38: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc fq_codel state UP group default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:f6:<span class="number">9</span>c:ae brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp2s6</span><br><span class="line">    inet <span class="number">192.168</span>.<span class="number">45.138</span>/<span class="number">24</span> brd <span class="number">192.168</span>.<span class="number">45.255</span> scope global dynamic noprefixroute ens38</span><br><span class="line">       valid_lft <span class="number">903</span>sec preferred_lft <span class="number">903</span>sec</span><br><span class="line">    inet6 fe80::<span class="number">99</span>b1:de77:f189:<span class="number">6869</span>/<span class="number">64</span> scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h3 id="TRex-配置-1"><a href="#TRex-配置-1" class="headerlink" title="TRex 配置"></a>TRex 配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">port_limit      :</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">version         :</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">interfaces    :</span> <span class="string">["02:05.0","02:06.0"]</span></span><br><span class="line">  <span class="attr">port_info :</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ip         :</span> <span class="number">192.168</span><span class="number">.45</span><span class="number">.137</span></span><br><span class="line">            <span class="attr">dest_mac :</span> <span class="number">00</span><span class="string">:0c:29:f6:9c:ae</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ip         :</span> <span class="number">192.168</span><span class="number">.45</span><span class="number">.138</span></span><br><span class="line">            <span class="attr">dest_mac :</span> <span class="number">00</span><span class="string">:0c:29:f6:9c:a4</span></span><br><span class="line">  <span class="attr">platform :</span></span><br><span class="line">    <span class="attr">master_thread_id  :</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">latency_thread_id :</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">dual_if   :</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">socket   :</span> <span class="number">0</span></span><br><span class="line">             <span class="attr">threads  :</span> <span class="string">[2]</span></span><br></pre></td></tr></table></figure><h3 id="Traffic-配置"><a href="#Traffic-配置" class="headerlink" title="Traffic 配置"></a>Traffic 配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">duration :</span> <span class="number">10.0</span></span><br><span class="line">  <span class="attr">generator :</span></span><br><span class="line">          <span class="attr">distribution :</span> <span class="string">"seq"</span></span><br><span class="line">          <span class="attr">clients_start :</span> <span class="string">"16.0.0.1"</span></span><br><span class="line">          <span class="attr">clients_end   :</span> <span class="string">"16.0.0.255"</span></span><br><span class="line">          <span class="attr">servers_start :</span> <span class="string">"48.0.0.1"</span></span><br><span class="line">          <span class="attr">servers_end   :</span> <span class="string">"48.0.0.255"</span></span><br><span class="line">          <span class="attr">clients_per_gb :</span> <span class="number">201</span></span><br><span class="line">          <span class="attr">min_clients    :</span> <span class="number">101</span></span><br><span class="line">          <span class="attr">dual_port_mask :</span> <span class="string">"1.0.0.0"</span></span><br><span class="line">          <span class="attr">tcp_aging      :</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">udp_aging      :</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">cap_info :</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cap2/dns.pcap</span></span><br><span class="line">       <span class="attr">cps :</span> <span class="number">1.0</span></span><br><span class="line">       <span class="attr">ipg :</span> <span class="number">10000</span></span><br><span class="line">       <span class="attr">rtt :</span> <span class="number">10000</span></span><br><span class="line">       <span class="attr">w   :</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./t<span class="literal">-rex</span><span class="literal">-64</span> <span class="operator">-f</span> /opt/trex/config/traffic.yaml <span class="literal">-d</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>运行过程中，实时状态显示如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-Per</span> port stats table  <span class="comment">#两张网卡当前的状态</span></span><br><span class="line">      ports |               <span class="number">0</span> |               <span class="number">1</span></span><br><span class="line"> -----------------------------------------------------------------------------------------</span><br><span class="line">   opackets |               <span class="number">2</span> |               <span class="number">2</span> <span class="comment">#当前总发包数</span></span><br><span class="line">     obytes |             <span class="number">154</span> |             <span class="number">186</span> <span class="comment">#当前总发包比特</span></span><br><span class="line">   ipackets |               <span class="number">2</span> |               <span class="number">2</span> <span class="comment">#当前总收包数</span></span><br><span class="line">     ibytes |             <span class="number">186</span> |             <span class="number">154</span> <span class="comment">#当前总收包比特</span></span><br><span class="line">    ierrors |               <span class="number">0</span> |               <span class="number">0</span></span><br><span class="line">    oerrors |               <span class="number">0</span> |               <span class="number">0</span></span><br><span class="line">      Tx Bw |     <span class="number">282.57</span>  bps |     <span class="number">341.28</span>  bps</span><br><span class="line"></span><br><span class="line"><span class="literal">-Global</span> stats enabled</span><br><span class="line"> Cpu Utilization : <span class="number">0.2</span>  %  <span class="number">0.0</span> Gb/core <span class="comment">#CPU占用率</span></span><br><span class="line"> Platform_factor : <span class="number">1.0</span></span><br><span class="line"> Total<span class="literal">-Tx</span>        :     <span class="number">623.85</span>  bps <span class="comment">#实际发包 byte per second</span></span><br><span class="line"> Total<span class="literal">-Rx</span>        :     <span class="number">623.85</span>  bps <span class="comment">#实际收包 byte per second</span></span><br><span class="line"> Total<span class="literal">-PPS</span>       :       <span class="number">0.92</span>  pps <span class="comment">#实际 packet per second</span></span><br><span class="line"> Total<span class="literal">-CPS</span>       :       <span class="number">0.46</span>  cps <span class="comment">#实际 connect per second</span></span><br><span class="line"></span><br><span class="line"> Expected<span class="literal">-PPS</span>    :       <span class="number">2.00</span>  pps <span class="comment">#期望 packet per second</span></span><br><span class="line"> Expected<span class="literal">-CPS</span>    :       <span class="number">1.00</span>  cps <span class="comment">#期望 connect per second</span></span><br><span class="line"> Expected<span class="literal">-BPS</span>    :       <span class="number">1.36</span> Kbps <span class="comment">#期望 byte per second</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Client 数量</span></span><br><span class="line"> Active<span class="literal">-flows</span>    :        <span class="number">0</span>  Clients :      <span class="number">255</span>   Socket<span class="literal">-util</span> : <span class="number">0.0000</span> %</span><br><span class="line"><span class="comment"># Server 数量</span></span><br><span class="line"> <span class="built_in">Open-flows</span>      :        <span class="number">2</span>  Servers :      <span class="number">255</span>   Socket :        <span class="number">2</span> Socket/Clients :  <span class="number">0.0</span></span><br><span class="line"> drop<span class="literal">-rate</span>       :       <span class="number">0.00</span>  bps <span class="comment">#丢包率</span></span><br><span class="line"> current time    : <span class="number">3.9</span> sec <span class="comment">#已测试时间</span></span><br><span class="line"> test duration   : <span class="number">6.1</span> sec <span class="comment">#剩余测试时间</span></span><br></pre></td></tr></table></figure><p>最终结果</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"> ==================</span><br><span class="line"> interface sum</span><br><span class="line"> ==================</span><br><span class="line">------------------------</span><br><span class="line"> per core stats core id : <span class="number">1</span></span><br><span class="line">------------------------</span><br><span class="line">------------------------</span><br><span class="line"> per core per <span class="keyword">if</span> stats id : <span class="number">1</span></span><br><span class="line">------------------------</span><br><span class="line"> port <span class="number">0</span>, queue id :<span class="number">0</span>  - client</span><br><span class="line"> ----------------------------</span><br><span class="line"> port <span class="number">1</span>, queue id :<span class="number">0</span>  - server</span><br><span class="line"> ----------------------------</span><br><span class="line"> ==================</span><br><span class="line"> generators</span><br><span class="line"> ==================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">normal</span><br><span class="line">-------------</span><br><span class="line"> min_delta  : <span class="number">10</span> usec</span><br><span class="line"> cnt        : <span class="number">0</span></span><br><span class="line"> high_cnt   : <span class="number">0</span></span><br><span class="line"> max_d_time : <span class="number">0</span> usec</span><br><span class="line"> sliding_average    : <span class="number">0</span> usec</span><br><span class="line"> precent    : <span class="literal">-nan</span> %</span><br><span class="line"> histogram</span><br><span class="line"> -----------</span><br><span class="line"> m_total_bytes                           :       <span class="number">1.49</span> Kbytes</span><br><span class="line"> m_total_pkt                             :      <span class="number">18.00</span>  pkt</span><br><span class="line"> m_total_open_flows                      :       <span class="number">9.00</span>  flows</span><br><span class="line"> m_total_pkt                             : <span class="number">18</span></span><br><span class="line"> m_total_open_flows                      : <span class="number">9</span></span><br><span class="line"> m_total_close_flows                     : <span class="number">9</span></span><br><span class="line"> m_total_bytes                           : <span class="number">1530</span></span><br><span class="line"> ---------------</span><br><span class="line">port : <span class="number">0</span></span><br><span class="line">------------</span><br><span class="line"> opackets                                 : <span class="number">9</span></span><br><span class="line"> obytes                                   : <span class="number">693</span></span><br><span class="line"> ipackets                                 : <span class="number">9</span></span><br><span class="line"> ibytes                                   : <span class="number">837</span></span><br><span class="line"> Tx :     <span class="number">290.02</span>  bps</span><br><span class="line">port : <span class="number">1</span></span><br><span class="line">------------</span><br><span class="line"> opackets                                 : <span class="number">9</span></span><br><span class="line"> obytes                                   : <span class="number">837</span></span><br><span class="line"> ipackets                                 : <span class="number">9</span></span><br><span class="line"> ibytes                                   : <span class="number">693</span></span><br><span class="line"> Tx :     <span class="number">350.28</span>  bps</span><br><span class="line"> Cpu Utilization : <span class="number">0.4</span>  %  <span class="number">0.0</span> Gb/core</span><br><span class="line"> Platform_factor : <span class="number">1.0</span></span><br><span class="line"> Total<span class="literal">-Tx</span>        :     <span class="number">640.30</span>  bps</span><br><span class="line"> Total<span class="literal">-Rx</span>        :     <span class="number">640.30</span>  bps</span><br><span class="line"> Total<span class="literal">-PPS</span>       :       <span class="number">0.94</span>  pps</span><br><span class="line"> Total<span class="literal">-CPS</span>       :       <span class="number">0.47</span>  cps</span><br><span class="line"></span><br><span class="line"> Expected<span class="literal">-PPS</span>    :       <span class="number">2.00</span>  pps</span><br><span class="line"> Expected<span class="literal">-CPS</span>    :       <span class="number">1.00</span>  cps</span><br><span class="line"> Expected<span class="literal">-BPS</span>    :       <span class="number">1.36</span> Kbps</span><br><span class="line"></span><br><span class="line"> Active<span class="literal">-flows</span>    :        <span class="number">0</span>  Clients :      <span class="number">255</span>   Socket<span class="literal">-util</span> : <span class="number">0.0000</span> %</span><br><span class="line"> <span class="built_in">Open-flows</span>      :        <span class="number">9</span>  Servers :      <span class="number">255</span>   Socket :        <span class="number">0</span> Socket/Clients :  <span class="number">0.0</span></span><br><span class="line"> drop<span class="literal">-rate</span>       :       <span class="number">0.00</span>  bps</span><br><span class="line"> summary stats</span><br><span class="line"> --------------</span><br><span class="line"> Total<span class="literal">-pkt</span><span class="literal">-drop</span>       : <span class="number">0</span> pkts</span><br><span class="line"> Total<span class="literal">-tx</span><span class="literal">-bytes</span>       : <span class="number">1530</span> bytes</span><br><span class="line"> Total<span class="literal">-tx</span><span class="literal">-sw</span><span class="literal">-bytes</span>    : <span class="number">0</span> bytes</span><br><span class="line"> Total<span class="literal">-rx</span><span class="literal">-bytes</span>       : <span class="number">1530</span> byte</span><br><span class="line"></span><br><span class="line"> Total<span class="literal">-tx</span><span class="literal">-pkt</span>         : <span class="number">18</span> pkts</span><br><span class="line"> Total<span class="literal">-rx</span><span class="literal">-pkt</span>         : <span class="number">18</span> pkts</span><br><span class="line"> Total<span class="literal">-sw</span><span class="literal">-tx</span><span class="literal">-pkt</span>      : <span class="number">0</span> pkts</span><br><span class="line"> Total<span class="literal">-sw</span><span class="literal">-err</span>         : <span class="number">0</span> pkts</span><br><span class="line"> Total ARP sent       : <span class="number">2</span> pkts</span><br><span class="line"> Total ARP received   : <span class="number">1</span> pkts</span><br></pre></td></tr></table></figure><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="初始化-EAL-环境失败"><a href="#初始化-EAL-环境失败" class="headerlink" title="初始化 EAL 环境失败"></a>初始化 EAL 环境失败</h2><p>如运行 TRex 遇到下面 EAL 环境报错，则需设置大页</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/opt/trex/v3.<span class="number">05</span><span class="comment"># ./t-rex-64 -f /opt/trex/config/traffic.yaml</span></span><br><span class="line">WARNING: tried to configure <span class="number">2</span> hugepages <span class="keyword">for</span> socket <span class="number">0</span>, but result is: <span class="number">1</span></span><br><span class="line">The ports are bound/configured.</span><br><span class="line">Starting  TRex v3.<span class="number">04</span> please wait  ...</span><br><span class="line">EAL: FATAL: Cannot get hugepage information.</span><br><span class="line">EAL: Cannot get hugepage information.</span><br><span class="line"> You might need to run ./trex<span class="literal">-cfg</span>  once</span><br><span class="line">EAL: Error - exiting with code: <span class="number">1</span></span><br><span class="line">  Cause: Invalid EAL arguments</span><br></pre></td></tr></table></figure><p>设置 1024 个 2048kB 大页，即写入 1024 到 hugepages-2048kB 下的 nr_hugepages 文件（初始为 0）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/opt/trex/v3.<span class="number">05</span><span class="comment"># echo 1024 | tee /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</span></span><br><span class="line"><span class="number">1024</span></span><br></pre></td></tr></table></figure><p>重新运行，即可正常</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://trex-tgn.cisco.com" target="_blank" rel="noopener">https://trex-tgn.cisco.com</a></p><p><a href="https://blog.csdn.net/shaoyunzhe/article/details/132344878" target="_blank" rel="noopener">https://blog.csdn.net/shaoyunzhe/article/details/132344878</a></p><p><a href="https://www.youtube.com/watch?v=ginboH5cCyA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=ginboH5cCyA</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;TRex 是基于 DPDK 的一个开源、低成本的流量生成器，支持生成 L3～7 流量，提供有状态、无状态两种模式。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DPDK" scheme="https://gy23333.github.io/tags/DPDK/"/>
    
    <category term="TRex" scheme="https://gy23333.github.io/tags/TRex/"/>
    
  </entry>
  
  <entry>
    <title>日语语法</title>
    <link href="https://gy23333.github.io/2024/04/14/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95/"/>
    <id>https://gy23333.github.io/2024/04/14/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95/</id>
    <published>2024-04-13T18:08:41.000Z</published>
    <updated>2024-11-11T03:57:58.125Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>XXX</p><a id="more"></a><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>A　は　B　です</p><p>A　は　B　では　ありません</p><p>じゃ　ありません</p><p>A　は　B　ですか</p><p>A　の　B</p><p>場所　に　何　が　ありなす</p><p>場所　に　誰　が　います</p><p>何　は　場所　に　あります</p><p>誰　は　場所　に　います</p><p>場所　に　何　も　ありません</p><p>場所　に　誰　も　いません</p><p>場所　へ　行きます</p><p>場所「時間」　から、場所「時間」　まで</p><p>車　で　行きます</p><h2 id="何を-动词"><a href="#何を-动词" class="headerlink" title="何を　动词"></a>何を　动词</h2><p>动作对象 + を</p><ul><li>ご飯<strong>を</strong>食べる</li></ul><h2 id="場所で-动词"><a href="#場所で-动词" class="headerlink" title="場所で　动词"></a>場所で　动词</h2><p>在某地做某事</p><ul><li>図書館で勉強する</li></ul><h2 id="Aか-B"><a href="#Aか-B" class="headerlink" title="Aか　B"></a>Aか　B</h2><p>A 或 B</p><ul><li>休みは土曜日か月曜日です</li></ul><h2 id="手段-原料で-动词"><a href="#手段-原料で-动词" class="headerlink" title="手段/原料で　动词"></a>手段/原料で　动词</h2><ul><li>日本語で手紙を書きます</li></ul><h2 id="誰に-何を-あげます"><a href="#誰に-何を-あげます" class="headerlink" title="誰に　何を　あげます"></a>誰に　何を　あげます</h2><p>给某人</p><ul><li>森さんにお土産をあげました</li></ul><h2 id="誰に・から-何を-もらいます"><a href="#誰に・から-何を-もらいます" class="headerlink" title="誰に・から　何を　もらいます"></a>誰に・から　何を　もらいます</h2><p>从某人那里得倒</p><ul><li>森さんにお土産をもらいました</li><li>森さんからお土産をもらいました</li></ul><h2 id="誰に-会います"><a href="#誰に-会います" class="headerlink" title="誰に　会います"></a>誰に　会います</h2><p>见谁</p><ul><li>森さんに駅で会いました</li></ul><h2 id="何が-好きです"><a href="#何が-好きです" class="headerlink" title="何が　好きです"></a>何が　好きです</h2><ul><li><p>情感的对象后面加 が</p><ul><li>好き、嫌い、怖い</li><li>森さんは映画が好きです</li></ul></li><li><p>能力的对象后面加 が</p><ul><li>分かります、できます、苦手です、上手です</li><li>森さんは料理が苦手です</li></ul></li></ul><h2 id="名や-名（など）"><a href="#名や-名（など）" class="headerlink" title="名や　名（など）"></a>名や　名（など）</h2><p>比如什么、什么</p><ul><li>森さんはビールーやお茶などが好きです</li></ul><h1 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>一类动词（五段动词）</p><ol><li><p>う段非る</p><ul><li>書く（かく）、探す（さがす）、勝つ（かつ）</li></ul></li><li><p>あ段+る、う段+る、お段+る</p><ul><li>困る（こまる）、怒る（おこる）、やる</li></ul></li><li><p>特例</p><ul><li>切る（きる）、帰る（かえる）、走る（はしる）</li></ul></li></ol><p>二类动词</p><ol><li>い段+る<ul><li>起きる（おきる）</li></ul></li><li>え段+る<ul><li>食べる（たべる）</li></ul></li></ol><p>三类动词</p><ol><li>来る（くる）</li><li>名　＋　する<ul><li>勉強する</li></ul></li></ol><h2 id="动词变形（ます型）"><a href="#动词变形（ます型）" class="headerlink" title="动词变形（ます型）"></a>动词变形（ます型）</h2><p>一类</p><p>う段　=&gt;　い段 + ます</p><ul><li>書く　＝＞　書きます</li><li>困る　＝＞　困ります</li><li>切る　＝＞　切ります</li></ul><p>二类</p><p>る　＝＞　ます</p><ul><li>起きる　＝＞　起きます</li><li>食べる　＝＞　食べます</li></ul><p>三类</p><p>来る　＝＞　きます</p><p>する　＝＞　します</p><ul><li>勉強する　＝＞　勉強します</li></ul><h2 id="时态以及肯否定"><a href="#时态以及肯否定" class="headerlink" title="时态以及肯否定"></a>时态以及肯否定</h2><p>一般现在：ます</p><p>一般现在（否）：ません</p><p>过去：ました</p><p>过去（否）：ませんでした</p><h1 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h1><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><p>一类形容词</p><ol><li>い　结尾</li><li>汉字　＋　い<ul><li>寒い、暖かい</li></ul></li></ol><p>二类形容词</p><ol><li>汉字<ul><li>綺麗（きれい）</li></ul></li></ol><h2 id="时态"><a href="#时态" class="headerlink" title="时态"></a>时态</h2><h3 id="一类"><a href="#一类" class="headerlink" title="一类"></a>一类</h3><p>现在肯定：XX　い</p><ul><li>今日は暑いです</li></ul><p>现在否定：い　→　くない　或　XX　く　ありません</p><ul><li>今日は暑くないです</li><li>今日は暑くありません</li></ul><p>过去肯定：い　→　かった</p><ul><li>昨日は暑かったです</li></ul><p>过去否定：い　→　くなかった　或　く　ありませんでした</p><ul><li>昨日は暑くなかったです</li></ul><p>一类形容词　名词</p><h3 id="二类"><a href="#二类" class="headerlink" title="二类"></a>二类</h3><p>现在肯定：二类形容词　＋　です</p><p>过去肯定：二类形容词　＋　でした</p><p>否定：二类形容词　＋　ではありません</p><p>过去否定：二类形容词　＋　ではありませんでした</p><p>二类形容词　な　名词</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;XXX&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>DPDK</title>
    <link href="https://gy23333.github.io/2024/01/15/DPDK/"/>
    <id>https://gy23333.github.io/2024/01/15/DPDK/</id>
    <published>2024-01-14T16:47:35.000Z</published>
    <updated>2024-11-11T03:57:58.124Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>DPDK 学习</p><a id="more"></a><h1 id="DPDK-概述"><a href="#DPDK-概述" class="headerlink" title="DPDK 概述"></a>DPDK 概述</h1><h2 id="包处理"><a href="#包处理" class="headerlink" title="包处理"></a>包处理</h2><p>基于系统是网络终端还是中间件，包处理会有不同的范围。一般来说，包含了包的接收和传输、包头的解析、包的修改以及转发，这些步骤发生在多个协义层。</p><ul><li>对于网络终端，包会发给本地应用进行更多的处理，如包的加解密、隧道覆盖，这些都可能是包处理、会话建立及结束的一部分。</li><li>对于中间件，包会被转发给网络中的下一跳。一般这种系统需要处理大量的进出数据包，功能包括包查询、访问控制、QoS 等等。</li></ul><h2 id="传统包处理"><a href="#传统包处理" class="headerlink" title="传统包处理"></a>传统包处理</h2><p>在 DPDK 前，Linux 一般的网卡包处理过程如下：</p><ol><li>包的数据帧抵达网卡</li><li>网卡把包的帧以 DMA（Direct Memory Access）的方式写到内存</li><li>网卡硬中断通知 CPU 有包到达</li><li>CPU 响应硬中断，简单处理后，发出软中断，尽量快速释放 CPU 资源</li><li>ksoftirqd 内核线程检测到软中断后，调用网卡驱动注册的 poll 函数开始轮询收包</li><li>帧从 RingBuffer 摘下，收到的包交给 Linux 内核的各个协议栈处理</li><li>如果最终收包的应用在用户态，包中的信息会从内核态拷贝到用户态</li><li>如果最终收包的应用在内核态，包中的信息直接在内核态被处理</li></ol><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/1687344-20201204090611124-2143444161.png" alt="Linux收包过程"></p><p>在上述包处理过程中，Linux 采用了 NAPI 和 Netmap两个机制来加快包处理过程</p><ul><li>NAPI 即轮询收包，一次处理多个数据包，处理结束后，再回到中断状态</li><li>Netmap 则是数据包通过共享池的方式，减少包从内核态到用户态的复制</li></ul><p>但这依旧不够，如何使包处理性能更强？待解决的问题如下：</p><ul><li>Linux 包处理过程需要在内核态和用户态之间转换，任务切换、cache 替换等都会带来不小的开销</li><li>随着 CPU 核数越来越多，早期为了适应 CPU 核数较少的分时调度机制限制了处理性能</li></ul><p>由上述问题，期望的包处理框架应具有如下能力：</p><ul><li>一个软件方式可以在 x86 CPU 进行包处理</li><li>自定义包处理</li><li>能使用多核架构，具有高性能</li><li>将一般的 Linux 系统调教为包处理环境</li></ul><h2 id="DPDK-特性"><a href="#DPDK-特性" class="headerlink" title="DPDK 特性"></a>DPDK 特性</h2><p>DPDK 就是回应上述期待的包处理技术，DPDK 拥有下面这些特性：</p><ul><li>轮询<ul><li>为网卡的收发包分配独立的核，不需要与其他任务共享核，因此该类核可以无限循环地检查是否有包到达以及是否需要发送包</li><li>该方法减少了中断服务导致的上下文切换等开销</li></ul></li><li>用户态驱动<ul><li>在大多数期间下，包最后都会被发到用户态，但 Linux 网卡驱动在内核态</li><li>用户态驱动可以避免包从内核态到用户态不必要的内存拷贝，并避免系统调用开销</li><li>用户驱动更加灵活，可自定义，不受限于内核现有的数据格式与行为定义</li></ul></li><li>CPU 亲和<ul><li>DPDK 虽然工作在用户态，但线程调度依旧依赖内核<ul><li>线程在不同的核间切换，由于缓存未命中和缓存写回，会导致性能的下降</li><li>同一核内不同任务切换，每次切换都需要保存当前状态寄存器到堆栈中，并恢复切换后的进程的状态信息，带来了额外的开销</li></ul></li><li>CPU 亲和，即将进程或线程绑定到一个或多个特定的 CPU，进一步可独占该核，而不会迁移到其他核</li><li>如此，独占固定的核运行 DPDK，既避免了核之间的切换，提高了缓存命中率，又使得该核不用频繁的进行任务切换，减少了任务切换的开销</li></ul></li><li>低访存开销<ul><li>包处理大量的 I/O 需要频繁地访存，需要降低访存带来的开销</li><li>如采用大页技术降低 TLB miss</li></ul></li><li>软件调优<ul><li>一系列调优方式，如 cache line 对齐、cache line 共享等等</li></ul></li></ul><h2 id="DPDK-框架"><a href="#DPDK-框架" class="headerlink" title="DPDK 框架"></a>DPDK 框架</h2><p>下面是 DPDK 的基本模块，作为开发包处理系统的基础层，可以用软件模拟大部分的网络功能。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20240908210138213.png" alt="DPDK 框架"></p><p>在最底部的内核态有三个模块 ：KNI、IGB_UIO、VFIO，其中</p><ul><li><strong>KNI</strong>，Kernel Network Interface，内核网络接口，提供 DPDK 和内核交换报文的解决方案。<ul><li>KNI 模拟了一个虚拟网卡，提供 DPDK 与 Linux 内核之间通讯，允许报文被用户态接收后转发到 Linux 内核协议栈。</li></ul></li><li><strong>IGB_UIO</strong>，通过 UIO 技术，在初始化过程中将网卡硬件寄存器映射到用户态。<ul><li>UIO 技术是一种用户态 I/O 框架，支持将用户态驱动的很少一部分运行在内核空间，大部分则运行在用户空间</li><li>IGB_UIO 则是 UIO 的，形态上是一种网卡驱动，网卡绑定 IGB_UIO 驱动后，相当于隔离了内核的网卡驱动，同时 IGB_UIO 还能够完成网卡中断内核态的初始化，并将中断信号映射到用户态</li></ul></li><li><strong>VFIO</strong>，可以安全地把设备 I/O、中断、DMA 等暴露到用户空间，从而可以在用户空间完成设备驱动的架构</li></ul><p>在上层的用户态，DPDK由很多库组成，主要包括：核心部件库（Core Libs）、平台相关模块（platform）、网卡轮询模式驱动模块（PMD-natives &amp; virtual）、QoS 库、报文转发分类算法（classify 算法）等几大类。</p><ul><li><strong>核心部件库（Core Libs）</strong>：提供环境抽象层（EAL）、大页内存、缓存池、定时器以及无锁环等基础组件</li><li><strong>PMD 库</strong>：提供所有用户态驱动，以便通过轮询和线程绑定得到高网络吞吐量。支持各种本地或者虚拟网卡</li><li><strong>Classify 库</strong>：支持精确匹配（exact match）、最长后缀匹配（LPM，longest prefix match）、通配符匹配（ACL，access control list）和 cuckoo hash 算法，这些算法用来包处理中的查表操作</li><li><strong>加速器 API</strong>：支持包安全（CryptoDev）、数据压缩（CompressionDev）和用于内核间通信的事件建模器（EventDev）</li><li><strong>QoS 库</strong>：提供网络服务质量相关组件，如限速（Meter）和调度（Sched）</li><li><strong>平台相关模块</strong>：<ul><li>POWER：能耗管理，运行时调整 CPU 时钟频率，可以根据分组接收频率动态调整 CPU 频率，或进入 CPU 的不同休眠状态</li><li>KNI：通过 kni.ko 模块将数据报文从用户态传递到内核态协议栈，以便用户进程使用传统的 Socket 接口对相关报文进行处理</li><li>Packet Framework 和 DISTRIB 为搭建更复杂的多核流水线处理模型提供了基础的组件</li></ul></li></ul><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><p>核心组件是用来做高性能包处理 app 的一系列库。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20240909135406179.png" alt="核心组件" style="zoom: 67%;" /></p><h1 id="大页技术"><a href="#大页技术" class="headerlink" title="大页技术"></a>大页技术</h1><h2 id="物理内存和虚拟内存"><a href="#物理内存和虚拟内存" class="headerlink" title="物理内存和虚拟内存"></a>物理内存和虚拟内存</h2><p>CPU 的内存管理包含两个概念：</p><ul><li>物理内存：即安装在计算机的物理内存条</li><li>虚拟内存：虚拟的内存地址</li></ul><p>多进程操作系统，进程不能直接访问物理内存，避免不安全行为，每个进程都维护了一套自己的虚拟地址，由 CPU 的内存管理单元（MMU）将虚拟地址转换到物理地址，再通过物理地址访问实际的物理内存，保证各个进程之间内存不互相干涉。</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20240908150407363.png" style="zoom:50%;" /></p><p>转换过程对进程是全透明的，进程可认为程序直接通过虚拟地址访问虚拟内存得到了数据，实际是通过虚拟地址映射到的物理地址在物理内存得到的数据。</p><h2 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h2><p>分页是整个虚拟和物理内存空间切成一段段固定尺寸的大小的页（Page），在 Linux 的缺省配置，页大小为 4 KB。</p><p>分页机制下，虚拟地址分为了页号和页内偏移量两个部分</p><ol><li>根据虚拟页号，在页表中找到对应的物理页号</li><li>在物理页号对应的物理内存页上，加上页内偏移量，得到物理内存地址</li></ol><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20240908154512478.png" alt="内存分页机制"></p><h2 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h2><p>但分页方式依旧有缺陷，假如每个进程的虚拟内存有 4GB，采用默认的页大小 4KB，也就是需要对应 1M 个物理页，即需要 1M 个页表项，每个页表项 4B，那么每个进程都需要 4MB 的大小空间用于存储页表。100 个进程就会需要 400 MB 空间。</p><p>由此引出多级页表，将虚拟页号和物理页号的对应拆成多级，对于相同的物理页数量，映射使用的页表总大小减小。</p><p>以二级页表为例，虚拟地址分为了一级页号、二级页号和页内偏移量三个部分</p><ol><li>在一级页表，根据一级页号找到对应的二级页表地址</li><li>在二级页表地址对应的二级页表上，根据二级页号找到对应的物理页号</li><li>在物理页号对应的物理内存页上，加上页内偏移量，得到物理内存地址</li></ol><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20240908162116839.png" alt="多级页表"></p><h2 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a>TLB</h2><p>多级页表虽然解决了空间问题，但是多了几道地址转换的查表，时间成本增加。</p><p>由此引入 TLB（Translation Lookaside Buffer）快表，程序有局部性，对于一个程序而言，往往访问的都是内存的某些区域，所以可以将进程经常访问的页表项存入 Cache 中，这个 Cache 即是 TLB 快表。</p><p>在之前的步骤前加上查询 TLB 快表的流程，TLB 快表中存储了经常访问的虚拟页号到物理页号的映射。</p><ol><li>先查询 TLB，如果查到了，则直接快速拿到物理地址</li><li>如果 TLB 未能查到，也就是 TLB miss，则按照正常地流程步骤获取物理地址，并将其加入 TLB 中</li></ol><h2 id="大页"><a href="#大页" class="headerlink" title="大页"></a>大页</h2><p>TLB 的大小有限，即可以存储的快速查找的虚拟页号到物理页号的映射有限。</p><p>在 Linux 的缺省配置，页大小为 4 KB。但也支持更大的尺寸，如 2MB 或 1 GB 的大页，这样虽然 TLB 的页表项数量不变，但是每一项对应的物理页面的大小增加，可以由 TLB 直接命中的范围也就增加了。</p><p>TLB 命中概率增加，TLB miss 发生概率减小，如此大大增加了访存效率。</p><h2 id="激活大页"><a href="#激活大页" class="headerlink" title="激活大页"></a>激活大页</h2><p>设置大页，2MB 的大页设置 1024 个</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">1024</span> &gt; /sys/kernel/mm/hugepages/hugepages<span class="literal">-2048kB</span>/nr_hugepages</span><br></pre></td></tr></table></figure><p>查看大页设置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># cat /proc/meminfo |grep Hu</span></span><br><span class="line">AnonHugePages:         <span class="number">0</span> kB</span><br><span class="line">ShmemHugePages:        <span class="number">0</span> kB</span><br><span class="line">FileHugePages:         <span class="number">0</span> kB</span><br><span class="line">HugePages_Total:    <span class="number">1024</span></span><br><span class="line">HugePages_Free:     <span class="number">1024</span></span><br><span class="line">HugePages_Rsvd:        <span class="number">0</span></span><br><span class="line">HugePages_Surp:        <span class="number">0</span></span><br><span class="line">Hugepagesize:       <span class="number">2048</span> kB</span><br><span class="line">Hugetlb:         <span class="number">2097152</span> kB</span><br></pre></td></tr></table></figure><h1 id="环境抽象层-EAL"><a href="#环境抽象层-EAL" class="headerlink" title="环境抽象层 EAL"></a>环境抽象层 EAL</h1><p>EAL（Environment Abstraction Layer，环境抽象层）用于获取底层资源。EAL 可以使用通用接口，屏蔽应用和库的环境特殊性，同时负责初始化分配资源。</p><p>EAL 主要提供下列典型服务：</p><ul><li>DPDK 的加载和启动：DPDK 和指定的程序链接成一个独立的进程，并以某种方式加载</li><li>CPU 亲和性和分配处理：DPDK 提供机制将执行单元绑定到特定的核上，就像创建一个执行程序一样。</li><li>系统内存分配：EAL 实现了不同区域内存的分配，例如为设备接口提供了物理内存。</li><li>PCI 地址抽象：EAL 提供了对 PCI 地址空间的访问接口。</li><li>跟踪调试功能：日志信息，堆栈打印、异常挂起等等。</li><li>公用功能：提供了标准 libc 不提供的自旋锁、原子计数器等。</li><li>CPU 特征辨识：用于决定 CPU 运行时的一些特殊功能，决定当前 CPU 支持的特性，以便编译对应的二进制文件。</li><li>中断处理：提供接口用于向中断注册/解注册回掉函数。</li><li>告警功能：提供接口用于设置/取消指定时间环境下运行的毁掉函数。</li></ul><h2 id="EAL-参数"><a href="#EAL-参数" class="headerlink" title="EAL 参数"></a>EAL 参数</h2><p><a href="https://doc.dpdk.org/guides/linux_gsg/linux_eal_parameters.html" target="_blank" rel="noopener">EAL parameters</a></p><h2 id="内核初始化与启动"><a href="#内核初始化与启动" class="headerlink" title="内核初始化与启动"></a>内核初始化与启动</h2><p>内核的初始化由 <code>rte_eal_init()</code> 函数完成，待所有核完成初始化后，通过 <code>`rte_eal_remote_launch()</code> ` 函数启动各个核上的应用，具体过程如下</p><ol><li>MAIN lcore 启动 <code>main()</code> 函数</li><li><p>MAIN lcore 调用 <code>rte_eal_init()</code> 进行各种初始化</p><ol><li>命令行参数 <code>-l</code> 可以设置运行 lcore，第一个作为 MAIN lcore，剩下的作为 WORKER lcores，如不设置，</li><li>在 MAIN lcore 中主要包括内存、日志、PCI 等初始化工作</li><li>在 WORKER lcores 启动线程，并使之处于 WAIT 状态</li><li>MAIN lcore 等待所有逻辑核初始化完毕</li></ol></li><li><p>其他初始化工作，如初始化 lib 库和驱动</p></li><li><p>MAIN lcore 调用 <code>rte_eal_remote_launch(func, arg, worker_id)</code> 函数，给 WORKER lcore 分配 function 并启动</p><ol><li>发送信息到对应 worker_id 的 WORKER lcore，确认该核处在 WAIT 状态</li><li>WORKER lcore 接收到信息，切换到 RUNNING 状态，并执行 function 带 arg 参数</li><li>WORKER lcore 执行 function 完毕后，切换回 WAIT 状态，function 的返回值可以通过 <code>rte_eal_wait_lcore()</code> 读取</li></ol></li><li><p>MAIN lcore 调用 <code>rte_cal_mp_wait_Icore()</code> 函数，等待所有 WORKER lcores 完成 app</p><ol><li>如果不设置等待，MAIN lcore 会直接结束，不知道其他核的运行情况</li><li>等待所有的核完成 function 切回 WAIT 状态</li></ol></li></ol><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20240908213559764.png" alt="内核初始化与启动"></p><h2 id="关闭与清理环境"><a href="#关闭与清理环境" class="headerlink" title="关闭与清理环境"></a>关闭与清理环境</h2><p>在 MAIN lcore 程序的最后运行 <code>rte_eal_cleanup()</code> 函数，用于清理 EAL 环境。<code>rte_eal_cleanup()</code> 将会释放 <code>rte_eal_init()</code> 分配的内存，在清理之后，DPDK 函数就无法再被调用了。</p><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><h2 id="MEMPOOL-Library"><a href="#MEMPOOL-Library" class="headerlink" title="MEMPOOL Library"></a>MEMPOOL Library</h2><p>rte_pktmbuf_pool_create</p><p>rte_pktmbuf_pool_create_by_ops</p><p>rte_mempool_lookup</p><p>rte_mempool_free</p><h1 id="DPDK-环境搭建"><a href="#DPDK-环境搭建" class="headerlink" title="DPDK 环境搭建"></a>DPDK 环境搭建</h1><p>以 Ubuntu 20.04.6 安装 DPDK 23.11 为例</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li><p>安装 C 编译器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install build-essential</span><br></pre></td></tr></table></figure></li><li><p>安装 meson 和 ninja</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install meson ninja</span><br></pre></td></tr></table></figure></li><li><p>安装 pyelftools</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyelftools</span><br></pre></td></tr></table></figure></li><li><p>安装 NUMA Library</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install libnuma-dev</span><br></pre></td></tr></table></figure></li></ul><h2 id="大页-1"><a href="#大页-1" class="headerlink" title="大页"></a>大页</h2><p>设置大页</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">1024</span> &gt; /sys/kernel/mm/hugepages/hugepages<span class="literal">-2048kB</span>/nr_hugepages</span><br></pre></td></tr></table></figure><h2 id="DPDK-安装"><a href="#DPDK-安装" class="headerlink" title="DPDK 安装"></a>DPDK 安装</h2><ul><li><p>下载解压</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://fast.dpdk.org/rel/dpdk<span class="literal">-23</span>.<span class="number">11</span>.tar.xz</span><br><span class="line">tar xJf dpdk<span class="literal">-23</span>.<span class="number">11</span>.tar.xz</span><br><span class="line">cd dpdk<span class="literal">-23</span>.<span class="number">11</span></span><br></pre></td></tr></table></figure></li><li><p>设置编译选项</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meson setup build</span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd build</span><br><span class="line">ninja</span><br><span class="line">meson install</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure></li></ul><h1 id="DPDK-与网卡"><a href="#DPDK-与网卡" class="headerlink" title="DPDK 与网卡"></a>DPDK 与网卡</h1><h1 id="官方实例"><a href="#官方实例" class="headerlink" title="官方实例"></a>官方实例</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><ul><li><p>编译</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd build</span><br><span class="line">meson configure <span class="literal">-Dexamples</span>=helloworld</span><br><span class="line">ninja</span><br></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">1024</span> &gt; /sys/kernel/mm/hugepages/hugepages<span class="literal">-2048kB</span>/nr_hugepages</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/opt/dpdk<span class="literal">-23</span>.<span class="number">11</span>/build<span class="comment"># ./examples/dpdk-helloworld</span></span><br><span class="line">EAL: Detected CPU lcores: <span class="number">3</span></span><br><span class="line">EAL: Detected NUMA nodes: <span class="number">1</span></span><br><span class="line">EAL: Detected <span class="keyword">static</span> linkage of DPDK</span><br><span class="line">EAL: Multi<span class="literal">-process</span> socket /var/run/dpdk/rte/mp_socket</span><br><span class="line">EAL: Selected IOVA mode <span class="string">'PA'</span></span><br><span class="line">EAL: VFIO support initialized</span><br><span class="line">TELEMETRY: No legacy callbacks, legacy socket not created</span><br><span class="line">hello from core <span class="number">1</span></span><br><span class="line">hello from core <span class="number">2</span></span><br><span class="line">hello from core <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><p>建立一个多核（线程）运行环境，每个线程打印<code>hello from core</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SPDX-License-Identifier: BSD-3-Clause</span></span><br><span class="line"><span class="comment"> * Copyright(c) 2010-2014 Intel Corporation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/queue.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;rte_memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;rte_launch.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;rte_eal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;rte_per_lcore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;rte_lcore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;rte_debug.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Launch a function on lcore. 8&lt; */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">lcore_hello(__rte_unused <span class="keyword">void</span> *arg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> lcore_id;</span><br><span class="line">lcore_id = rte_lcore_id();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello from core %u\n"</span>, lcore_id);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &gt;8 End of launching function on lcore. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Initialization of Environment Abstraction Layer (EAL). 8&lt; */</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="keyword">unsigned</span> lcore_id;</span><br><span class="line"></span><br><span class="line">ret = rte_eal_init(argc, argv);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">rte_panic(<span class="string">"Cannot init EAL\n"</span>);</span><br><span class="line"><span class="comment">/* &gt;8 End of initialization of Environment Abstraction Layer */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Launches the function on each lcore. 8&lt; */</span></span><br><span class="line">RTE_LCORE_FOREACH_WORKER(lcore_id) &#123;</span><br><span class="line"><span class="comment">/* Simpler equivalent. 8&lt; */</span></span><br><span class="line">rte_eal_remote_launch(lcore_hello, <span class="literal">NULL</span>, lcore_id);</span><br><span class="line"><span class="comment">/* &gt;8 End of simpler equivalent. */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* call it on main lcore too */</span></span><br><span class="line">lcore_hello(<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">/* &gt;8 End of launching the function on each lcore. */</span></span><br><span class="line"></span><br><span class="line">rte_eal_mp_wait_lcore();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* clean up the EAL */</span></span><br><span class="line">rte_eal_cleanup();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://doc.dpdk.org" target="_blank" rel="noopener">DPDK 官方文档</a></li><li>《深入浅出DPDK》</li><li><a href="https://zzqcn.github.io/opensource/dpdk/index.html" target="_blank" rel="noopener">https://zzqcn.github.io/opensource/dpdk/index.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;DPDK 学习&lt;/p&gt;</summary>
    
    
    
    
    <category term="DPDK" scheme="https://gy23333.github.io/tags/DPDK/"/>
    
  </entry>
  
  <entry>
    <title>Neovim</title>
    <link href="https://gy23333.github.io/2023/10/12/Neovim/"/>
    <id>https://gy23333.github.io/2023/10/12/Neovim/</id>
    <published>2023-10-12T15:53:52.000Z</published>
    <updated>2024-11-17T16:04:07.060Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>vim</p><a id="more"></a><h1 id="Neovim-安装"><a href="#Neovim-安装" class="headerlink" title="Neovim 安装"></a>Neovim 安装</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>对于 Ubuntu，安装更新版本的 Neovim</p><ol><li><p>添加源</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:neovim-ppa&#x2F;unstable</span><br></pre></td></tr></table></figure></li><li><p>更新源</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装 Neovim</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install neovim</span><br></pre></td></tr></table></figure></li></ol><p>安装后输入 <code>nvim</code> 即可进入</p><p>如果依旧想要输入 <code>vim</code> 进入，可使用链接替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias vim&#x3D;&#39;nvim&#39;</span><br></pre></td></tr></table></figure><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>对于 mac，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install neovim</span><br></pre></td></tr></table></figure><p>在 <code>~/.bash_profile</code> 中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias vim&#x3D;&#39;nvim&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure><h1 id="Vim-模式"><a href="#Vim-模式" class="headerlink" title="Vim 模式"></a>Vim 模式</h1><h2 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h2><p>打开 Vim 直接进入的就是普通模式，主要用于浏览文件、执行复制粘贴删除等的操作</p><h2 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h2><p>普通模式下输入 <code>i</code> 进入输入模式，输入 <code>Esc</code> 退出输入模式回到普通模式</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>普通模式下输入 <code>:</code> 进入命令模式</p><h2 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h2><p>普通模式下输入 <code>v</code> 进入可视模式，用于选中</p><h1 id="普通模式-1"><a href="#普通模式-1" class="headerlink" title="普通模式"></a>普通模式</h1><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><p>可以使用方向键进行移动，但更多地使用 <code>hjkl</code> 移动光标</p><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center"><code>h</code></td><td style="text-align:center">左移</td></tr><tr><td style="text-align:center"><code>j</code></td><td style="text-align:center">下移</td></tr><tr><td style="text-align:center"><code>k</code></td><td style="text-align:center">上移</td></tr><tr><td style="text-align:center"><code>l</code></td><td style="text-align:center">右移</td></tr><tr><td style="text-align:center"><code>4h</code></td><td style="text-align:center">左移4格</td></tr><tr><td style="text-align:center"><code>w</code> (word)</td><td style="text-align:center">跳转到下一个单词的开头</td></tr><tr><td style="text-align:center"><code>b</code> (beginning)</td><td style="text-align:center">跳转到前一个单词的开头</td></tr><tr><td style="text-align:center"><code>gg</code></td><td style="text-align:center">跳转到文件开头</td></tr><tr><td style="text-align:center"><code>G</code></td><td style="text-align:center">跳转到文件结尾</td></tr><tr><td style="text-align:center"><code>Ctrl</code>+<code>u</code> (PgUp)</td><td style="text-align:center">向上翻页</td></tr><tr><td style="text-align:center"><code>Ctrl</code>+<code>d</code> (PgDown)</td><td style="text-align:center">向下翻页</td></tr><tr><td style="text-align:center"><code>fr</code> (find r)</td><td style="text-align:center">移动到下一个 <code>r</code></td></tr></tbody></table></div><h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><p>复制键 <code>y</code> (yank)，粘贴键 <code>p</code> (paste)</p><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center"><code>yaw</code> (yank all word)</td><td style="text-align:center">复制整个单词</td></tr><tr><td style="text-align:center"><code>y4j</code></td><td style="text-align:center">复制本行以及下4行（一共5行）</td></tr><tr><td style="text-align:center"><code>yfr</code></td><td style="text-align:center">复制到 <code>r</code> 为止的内容（包括 <code>r</code>）</td></tr><tr><td style="text-align:center"><code>p</code></td><td style="text-align:center">粘贴</td></tr></tbody></table></div><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除键 <code>d</code> (delete)，操作与复制同理</p><h2 id="改变"><a href="#改变" class="headerlink" title="改变"></a>改变</h2><p>改变键 <code>c</code> (change)，操作与复制同理，删除选中内容并进入输入模式</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center"><code>/</code></td><td style="text-align:center">从上往下查找</td></tr><tr><td style="text-align:center"><code>?</code></td><td style="text-align:center">从下往上查找</td></tr><tr><td style="text-align:center"><code>n</code></td><td style="text-align:center">下一个</td></tr><tr><td style="text-align:center"><code>N</code></td><td style="text-align:center">上一个</td></tr></tbody></table></div><h1 id="命令模式-1"><a href="#命令模式-1" class="headerlink" title="命令模式"></a>命令模式</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><code>:h &lt;plugin name&gt;</code></td><td style="text-align:center">查看插件说明书</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td></tr></tbody></table></div><p>窗口</p><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center"><code>:b&lt;N&gt;</code></td><td style="text-align:center">跳到第 N 个 Tab</td></tr><tr><td style="text-align:center"><code>:b &lt;file name&gt;</code></td><td style="text-align:center">跳到相应文件名的 Tab</td></tr><tr><td style="text-align:center"><code>:bn</code></td><td style="text-align:center">跳到上一个的 Tab</td></tr><tr><td style="text-align:center"><code>:bp</code></td><td style="text-align:center">跳到下一个的 Tab</td></tr></tbody></table></div><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;Ctrl-w&gt; + h/j/k/l</code></td><td style="text-align:center">切换聚焦窗口</td></tr><tr><td style="text-align:center"><code>&lt;Ctrl-w&gt; + w</code></td><td style="text-align:center">切换聚焦到下一个窗口</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td></tr></tbody></table></div><h1 id="LazyVim"><a href="#LazyVim" class="headerlink" title="LazyVim"></a>LazyVim</h1><p><a href="http://www.lazyvim.org" target="_blank" rel="noopener">http://www.lazyvim.org</a></p><p>【【教完必会】别再说配置neovim麻烦了！给我1分钟就够！— Lazyvim教程】<a href="https://www.bilibili.com/video/BV1ds4y1P7Rs?vd_source=c44e01a0c037484413d7d1b782385f3e" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1ds4y1P7Rs?vd_source=c44e01a0c037484413d7d1b782385f3e</a></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="光标跳转"><a href="#光标跳转" class="headerlink" title="光标跳转"></a>光标跳转</h2><ul><li>跳转到周围特定字母<ol><li><code>s</code> 进入查找状态  </li><li>输入待查找字母，标亮周围该字母，并附上标签</li><li>输入标签，跳转到特定位置</li></ol></li></ul><h2 id="目录树"><a href="#目录树" class="headerlink" title="目录树"></a>目录树</h2><p>侧边栏的目录树由 NeoTree 插件驱动</p><ul><li>显示/隐藏侧边栏 <code>Space</code> -&gt; <code>e</code></li><li>查看快捷键 <code>?</code></li></ul><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><ul><li>唤出/隐藏终端：<code>ctrl</code> + <code>\</code></li></ul><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><ul><li>切换下一个 Buffer：<code>SHIFT</code> + <code>l</code></li><li>切换上一个 Buffer：<code>SHIFT</code> + <code>h</code></li></ul><h2 id="LSP"><a href="#LSP" class="headerlink" title="LSP"></a>LSP</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>输入<code>:Mason</code> 进入 Mason</li><li></li></ol><h1 id="LSP-1"><a href="#LSP-1" class="headerlink" title="LSP"></a>LSP</h1><p>Lazyvim 默认配置 LSP</p><h2 id="Mason"><a href="#Mason" class="headerlink" title="Mason"></a>Mason</h2><p>Mason 用来做 LSP 的包管理</p><p><strong>进入 Mason 管理窗口</strong></p><p>有两种方法：</p><ul><li><code>:Mason</code> </li><li><code>leader</code> -&gt; <code>c</code> -&gt; <code>m</code></li></ul><p>在这个窗口适用文件的各种查找操作</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241115215614647-20241115215702924.png" alt="image-20241115215614647"></p><p><strong>搜索包</strong></p><p>可以通过 Language Filter 过滤出指定语言：<code>CTRL</code> + <code>f</code></p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/image-20241115220223740.png" alt="image-20241115220223740"></p><p>或者和文件一样，通过 <code>/</code> 或其他搜索</p><p><strong>安装包</strong></p><p>移动到相应包，按 <code>i</code></p><p><strong>卸载包</strong></p><p>移动到相应包，按 <code>X</code></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="跳转查看"><a href="#跳转查看" class="headerlink" title="跳转查看"></a>跳转查看</h3><ul><li>查看定义：<code>g</code> —&gt; <code>d</code></li><li>跳转到定义：<code>g</code> —&gt; <code>D</code></li><li>查看引用：<code>g</code> —&gt; <code>r</code></li><li>查看详情：<code>K</code></li></ul><h3 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h3><ul><li>变量重命名：<code>Leader</code> —&gt; <code>c</code> —&gt; <code>r</code></li><li></li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>新建 nvim 的配置文件夹 <code>~/.config/nvim</code> ，结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">├── init.vim                              入口文件，这里负责加载所有lua文件夹里的文件</span><br><span class="line">└── lua                                   所有 lua 配置文件</span><br><span class="line">    ├── basic.lua                         Neovim 的基础配置</span><br><span class="line">    ├── keybindings.lua                   快捷键配置</span><br><span class="line">    ├── lsp                               内置 LSP  (Language Server Protocol) 配置</span><br><span class="line">    │   ├── diagnostic_signs.lua</span><br><span class="line">    │   ├── language_servers.lua</span><br><span class="line">    │   └── nvim-cmp-config.lua</span><br><span class="line">    ├── plugin-config                     各个插件配置在这个文件夹</span><br><span class="line">    │   ├── bufferline.lua</span><br><span class="line">    │   ├── comment.lua</span><br><span class="line">    │   ├── nvim-autopairs.lua</span><br><span class="line">    │   ├── nvim-colorizer.lua</span><br><span class="line">    │   ├── nvim-tree.lua</span><br><span class="line">    │   ├── nvim-treesitter.lua</span><br><span class="line">    │   ├── rust-tools.lua</span><br><span class="line">    │   ├── surround.lua</span><br><span class="line">    │   ├── telescope.lua</span><br><span class="line">    │   └── which-key.lua</span><br><span class="line">    └── plugins.lua                       插件安装管理</span><br></pre></td></tr></table></figure><p>nvim 在下次启动时会自动查看其中的内容进行更新，当然也可以在编辑后直接使用 <code>:so</code> 命令当重新载入。</p><p>以 <code>~/.config/nvim/init.lua</code> 作为入口，lua 文件夹放置不同的模块</p><h1 id="插件-1"><a href="#插件-1" class="headerlink" title="插件"></a>插件</h1><p>使用插件管理器 <a href="https://github.com/folke/lazy.nvim" target="_blank" rel="noopener">lazy.vim</a> 进行插件管理</p><h2 id="安装-lazyvim"><a href="#安装-lazyvim" class="headerlink" title="安装 lazyvim"></a>安装 lazyvim</h2><ul><li><p>新建 <code>lua/lazynvim-init.lua</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> lazypath = vim.fn.stdpath(<span class="string">"data"</span>) .. <span class="string">"/lazy/lazy.nvim"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> vim.loop.fs_stat(lazypath) <span class="keyword">then</span></span><br><span class="line">  vim.fn.system(&#123;</span><br><span class="line">    <span class="string">"git"</span>,</span><br><span class="line">    <span class="string">"clone"</span>,</span><br><span class="line">    <span class="string">"--filter=blob:none"</span>,</span><br><span class="line">    <span class="string">"https://github.com/folke/lazy.nvim.git"</span>,</span><br><span class="line">    <span class="string">"--branch=stable"</span>, <span class="comment">-- latest stable release</span></span><br><span class="line">    lazypath,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">vim.opt.rtp:prepend(lazypath)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"lazy"</span>).setup(&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在 <code>init.lua</code> 中</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"lazynvim-init"</span>)</span><br></pre></td></tr></table></figure></li><li><p>如此后，便可输入 <code>:Lazy</code> 打开</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/%E6%88%AA%E5%B1%8F2023-10-24%2000.47.43.png" alt=""></p></li></ul><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p> 以安装 nvim-tree 为例</p><ul><li><p>在 <code>lua</code> 文件夹下新建 <code>plugins</code> 目录</p></li><li><p>在 <code>lazynvim-init.lua</code> 中的 <code>setup</code> 中将 <code>plugins</code> 目录添加为参数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"lazy"</span>).setup(<span class="string">"plugins"</span>)</span><br></pre></td></tr></table></figure></li><li><p>在 <code>lua/plugins</code> 下添加文件 <code>plugin-nvim-tree.lua</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"nvim-tree/nvim-tree.lua"</span>,</span><br><span class="line">        version = <span class="string">"*"</span>,</span><br><span class="line">        dependencies = &#123;<span class="string">"nvim-tree/nvim-web-devicons"</span>&#125;,</span><br><span class="line">        <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            <span class="built_in">require</span>(<span class="string">"nvim-tree"</span>).setup &#123;&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&quot;nvim-tree/nvim-tree.lua&quot;</code>：插件在 github 上的短 url</p></li><li><p><code>version</code>：下载的版本，<code>*</code> 表示自动更新最新版本</p></li><li><p><code>dependencies = {&quot;nvim-tree/nvim-web-devicons&quot;}</code>：依赖插件</p></li><li><p><code>config = ... ...</code>：当插件启动加载以后，则会执行该 config 的代码</p></li></ul></li><li><p>重新打开 vim 即可自动加载插件</p></li></ul><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><h3 id="主题插件-TokyoNight"><a href="#主题插件-TokyoNight" class="headerlink" title="主题插件 TokyoNight"></a>主题插件 <a href="https://github.com/folke/tokyonight.nvim" target="_blank" rel="noopener">TokyoNight</a></h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"folke/tokyonight.nvim"</span>,</span><br><span class="line">        version = <span class="string">"*"</span>,</span><br><span class="line">        <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            <span class="built_in">require</span>(<span class="string">"tokyonight"</span>).setup &#123;&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件树插件-nvim-tree"><a href="#文件树插件-nvim-tree" class="headerlink" title="文件树插件 nvim-tree"></a>文件树插件 <a href="https://github.com/nvim-tree/nvim-tree.lua" target="_blank" rel="noopener">nvim-tree</a></h3><ul><li><p>下载 nerd fornt 字体</p><p><strong>Linux</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https:&#x2F;&#x2F;github.com&#x2F;ryanoasis&#x2F;nerd-fonts&#x2F;releases&#x2F;download&#x2F;v3.0.2&#x2F;DejaVuSansMono.zip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unzip DejaVuSansMono.zip -d &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;DejaVuSansMono</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;SourceCodePro</span><br><span class="line">sudo mkfontscale # 生成核心字体信息</span><br><span class="line">sudo mkfontdir # 生成字体文件夹</span><br><span class="line">sudo fc-cache -fv # 刷新系统字体缓存</span><br></pre></td></tr></table></figure><p><strong>Mac</strong></p><p><a href="https://joit.info/essay/a5f51f2cbbb240d7a992d481fc09f7e0" target="_blank" rel="noopener">https://joit.info/essay/a5f51f2cbbb240d7a992d481fc09f7e0</a></p><p>下载字体后在配置里配置 Terminal 字体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew&#x2F;cask-fonts</span><br><span class="line">brew install --cask font-hack-nerd-font</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"nvim-tree/nvim-tree.lua"</span>,</span><br><span class="line">        version = <span class="string">"*"</span>,</span><br><span class="line">        dependencies = &#123;<span class="string">"nvim-tree/nvim-web-devicons"</span>&#125;,</span><br><span class="line">        <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            <span class="built_in">require</span>(<span class="string">"nvim-tree"</span>).setup &#123;&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关命令：</p><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center"><code>g?</code></td><td style="text-align:center">查看帮助</td></tr><tr><td style="text-align:center"><code>&lt;C-k&gt;</code></td><td style="text-align:center">查看信息</td></tr><tr><td style="text-align:center"><code>r</code></td><td style="text-align:center">重命名</td></tr><tr><td style="text-align:center"><code>o</code></td><td style="text-align:center">开文件</td></tr><tr><td style="text-align:center"><code>a</code></td><td style="text-align:center">创建新文件</td></tr><tr><td style="text-align:center"><code>d</code></td><td style="text-align:center">删除文件</td></tr><tr><td style="text-align:center"><code>c</code></td><td style="text-align:center">复制文件</td></tr><tr><td style="text-align:center"><code>p</code></td><td style="text-align:center">粘贴文件</td></tr><tr><td style="text-align:center"><code>x</code></td><td style="text-align:center">剪切文件</td></tr><tr><td style="text-align:center"><code>J</code></td><td style="text-align:center">跳到顶部的文件/文件夹</td></tr><tr><td style="text-align:center"><code>K</code></td><td style="text-align:center">跳到底部的文件/文件夹</td></tr><tr><td style="text-align:center"><code>&lt;</code> / <code>&gt;</code></td><td style="text-align:center">跳到上一个/下一个兄弟文件/文件夹</td></tr><tr><td style="text-align:center"><code>y</code></td><td style="text-align:center">复制文件名</td></tr><tr><td style="text-align:center"><code>Y</code></td><td style="text-align:center">复制相对地址</td></tr><tr><td style="text-align:center"><code>gy</code></td><td style="text-align:center">复制绝对地址</td></tr></tbody></table></div><h3 id="状态栏插件-lualine-nvim"><a href="#状态栏插件-lualine-nvim" class="headerlink" title="状态栏插件 lualine.nvim"></a>状态栏插件 <a href="https://github.com/nvim-lualine/lualine.nvim" target="_blank" rel="noopener">lualine.nvim</a></h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"nvim-lualine/lualine.nvim"</span>,</span><br><span class="line">        version = <span class="string">"*"</span>,</span><br><span class="line">        <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            <span class="built_in">require</span>(<span class="string">"lualine"</span>).setup &#123;&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页插件-bufferline-nvim"><a href="#页插件-bufferline-nvim" class="headerlink" title="页插件 bufferline.nvim"></a>页插件 <a href="https://github.com/akinsho/bufferline.nvim" target="_blank" rel="noopener">bufferline.nvim</a></h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"akinsho/bufferline.nvim"</span>,</span><br><span class="line">        version = <span class="string">"*"</span>,</span><br><span class="line">        <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            vim.opt.termguicolors = <span class="literal">true</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"bufferline"</span>).setup&#123;&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/571617696" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/571617696</a></li><li><a href="https://github.com/folke/lazy.nvim" target="_blank" rel="noopener">lazy.vim官网</a></li><li><a href="https://zhuanlan.zhihu.com/p/638379995" target="_blank" rel="noopener">lazy-nvim插件管理器基础入门</a></li><li><a href="https://www.bilibili.com/video/BV1Td4y1578E/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f5f8e6e01c0d525ef6934da8b95c76ce" target="_blank" rel="noopener">【全程讲解】Neovim从零配置成属于你的个人编辑器</a></li><li><a href="http://www.lazyvim.org" target="_blank" rel="noopener">Lazyvim官方文档</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;vim&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 网络</title>
    <link href="https://gy23333.github.io/2023/10/11/Linux-%E7%BD%91%E7%BB%9C/"/>
    <id>https://gy23333.github.io/2023/10/11/Linux-%E7%BD%91%E7%BB%9C/</id>
    <published>2023-10-11T15:15:53.000Z</published>
    <updated>2024-11-11T03:57:58.129Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a id="more"></a><h1 id="内核如何收包"><a href="#内核如何收包" class="headerlink" title="内核如何收包"></a>内核如何收包</h1><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/202310112358835.png" alt=""></p><ol><li><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1></li></ol><ul><li><a href="http://arthurchiao.art/blog/linux-net-stack-implementation-rx-zh/" target="_blank" rel="noopener">Linux 网络栈接收数据</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gRPC与Go</title>
    <link href="https://gy23333.github.io/2023/09/20/gRPC%E4%B8%8EGo/"/>
    <id>https://gy23333.github.io/2023/09/20/gRPC%E4%B8%8EGo/</id>
    <published>2023-09-19T17:29:19.000Z</published>
    <updated>2024-11-25T16:50:02.572Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>gRPC，由 google 开发的一种远程过程调用协议。gRPC 支持多种语言之间的调用，本文主要讲述 gRPC 基于 Go 的实现。</p><a id="more"></a><h1 id="gRPC-简介"><a href="#gRPC-简介" class="headerlink" title="gRPC 简介"></a>gRPC 简介</h1><p><img src="https://grpc.io/img/landing-2.svg" alt=""></p><p>gRPC 使用 Protocol Buffer 作为其接口定义语言，使得 gRPC 客户端可以跨机器、跨语言调用 gRPC 服务器的方法。</p><ul><li><p>Protocol Buffer 定义接口的输入参数和返回类型</p></li><li><p>gRPC 服务端：实现接口方法，并运行 gRPC Server</p></li><li><p>gRPC 客户端：调用 gRPC Stub （相当于 gRPC Server 在客户端的代理，拥有与 Server 实现的接口方法）的接口</p></li></ul><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p>Mac 安装 go gRPC 所需环境</p><h2 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h2><p>安装 protobuf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install protobuf</span><br></pre></td></tr></table></figure><p>检查安装是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ protoc --version</span><br><span class="line">libprotoc 28.3</span><br></pre></td></tr></table></figure><h2 id="protoc-gen-go、protoc-gen-go-grpc"><a href="#protoc-gen-go、protoc-gen-go-grpc" class="headerlink" title="protoc-gen-go、protoc-gen-go-grpc"></a>protoc-gen-go、protoc-gen-go-grpc</h2><p>安装 protoc-gen-go、protoc-gen-go-grpc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install google.golang.org&#x2F;protobuf&#x2F;cmd&#x2F;protoc-gen-go@latest</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install google.golang.org&#x2F;grpc&#x2F;cmd&#x2F;protoc-gen-go-grpc@latest</span><br></pre></td></tr></table></figure><p>安装完成后，可以在 <code>${GOPATH}/bin</code> 下看到 <code>protoc-gen-go</code> 和 <code>protoc-gen-go-grpc</code></p><p>确认 <code>${GOPATH}/bin</code> 已添加到环境变量的 PATH 中</p><h1 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h1><p>Protobuf 是 google 开发的序列化数据格式，定义交换的数据格式，序列化和反序列化数据到各种语言，实现跨语言、跨平台通信。</p><h2 id="Protobuf-版本"><a href="#Protobuf-版本" class="headerlink" title="Protobuf 版本"></a>Protobuf 版本</h2><p>.proto 文件的开头需要注明使用的 Protobuf 版本号，Protobuf 共有 editions、proto2、proto3 三种版本，建议使用 proto3，下面说明均以 proto3 为例。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br></pre></td></tr></table></figure><p>如不声明，默认使用 proto2。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p>Protobuf 支持多种内置数据类型，并可以映射到各种语言，以 Go 语言为例：</p><div class="table-container"><table><thead><tr><th>Protobuf</th><th>Go数据类型</th><th>备注</th></tr></thead><tbody><tr><td>double</td><td>float64</td><td></td></tr><tr><td>float</td><td>float32</td><td></td></tr><tr><td>int32</td><td>int32</td><td>负数会占用更多字节</td></tr><tr><td>int64</td><td>int64</td><td></td></tr><tr><td>uint32</td><td>uint32</td><td>字节长度会依据数字大小变化</td></tr><tr><td>uint64</td><td>uint64</td><td></td></tr><tr><td>sint32</td><td>int32</td><td>与 int32 同表示 32 位整数，但 sin32 更适合处理负数场景，正负数相同字节数</td></tr><tr><td>sint64</td><td>int64</td><td></td></tr><tr><td>fixed32</td><td>uint32</td><td>与 uint32 同表示 32 位正整数，fixed32 在处理大于 $2^{28}$ 的数时更高效，永远是 4 字节</td></tr><tr><td>fixed64</td><td>uint64</td><td></td></tr><tr><td>sfixed32</td><td>int32</td><td></td></tr><tr><td>sfixed64</td><td>int64</td><td></td></tr><tr><td>bool</td><td>bool</td><td></td></tr><tr><td>string</td><td>string</td><td></td></tr><tr><td>bytes</td><td>[]byte</td></tr></tbody></table></div><p>定义的 <code>enum</code> 和 <code>message</code> 也可作为数据类型。</p><h3 id="repeated"><a href="#repeated" class="headerlink" title="repeated"></a>repeated</h3><p>用于描述数组，可重复各种基础类型，包括内置类型、 <code>enum</code> 和 <code>message</code></p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">int32</span> numbers = <span class="number">1</span>;  <span class="comment">// 一个整数列表</span></span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> names = <span class="number">2</span>;  <span class="comment">// 一个字符串列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>用于键值对结构，第一位为 key 类型，第二位 value 类型</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">  map&lt;<span class="built_in">string</span>, <span class="built_in">int32</span>&gt; scores = <span class="number">1</span>;  <span class="comment">// 键为字符串，值为整数</span></span><br><span class="line">  map&lt;<span class="built_in">int32</span>, <span class="built_in">string</span>&gt; ids = <span class="number">2</span>;    <span class="comment">// 键为整数，值为字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>key 和 value 的类型可以是基础类型，包括内置类型、 <code>enum</code> 和 <code>message</code> ，但不能是 <code>repeated</code>，如果希望 value 为数组，需要先用 <code>message</code> 包装这个 <code>repeated</code></p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">StudentList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">repeated</span> <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  map&lt;<span class="built_in">string</span>, StudentList&gt; class_map = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p><code>enum</code> 枚举类型，类型名采用驼峰命名方式，字段命名采用大写字母加下划线分隔方式。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个 enum 类型</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Corpus</span> </span>&#123;</span><br><span class="line">  CORPUS_UNSPECIFIED = <span class="number">0</span>;</span><br><span class="line">  CORPUS_UNIVERSAL = <span class="number">1</span>;</span><br><span class="line">  CORPUS_WEB = <span class="number">2</span>;</span><br><span class="line">  CORPUS_IMAGES = <span class="number">3</span>;</span><br><span class="line">  CORPUS_LOCAL = <span class="number">4</span>;</span><br><span class="line">  CORPUS_NEWS = <span class="number">5</span>;</span><br><span class="line">  CORPUS_PRODUCTS = <span class="number">6</span>;</span><br><span class="line">  CORPUS_VIDEO = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">int32</span> results_per_page = <span class="number">3</span>;</span><br><span class="line">  Corpus corpus = <span class="number">4</span>; <span class="comment">// 使用 enum 类型字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>enum</code> 的默认值为其 0 值，所以必须在第一位定义 0 值。</p></blockquote><p><code>enum</code> 可以通过添加 <code>option allow_alias = true;</code> 允许使用别名。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EnumAllowingAlias</span> </span>&#123;</span><br><span class="line">  <span class="keyword">option</span> allow_alias = <span class="literal">true</span>; <span class="comment">// 允许别名</span></span><br><span class="line">  EAA_UNSPECIFIED = <span class="number">0</span>;</span><br><span class="line">  EAA_STARTED = <span class="number">1</span>; <span class="comment">// EAA_STARTED 和 EAA_RUNNING互为别名</span></span><br><span class="line">  EAA_RUNNING = <span class="number">1</span>;</span><br><span class="line">  EAA_FINISHED = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="message"><a href="#message" class="headerlink" title="message"></a>message</h2><p><code>message</code> 消息类型，类型名采用驼峰命名方式，字段命名采用小写字母加下划线分隔方式。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">int32</span> results_per_page = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>每个字段都要分配唯一的数值标签 tag。已有序号不能随意改动，不然会导致调用失败，在后面添加新 tag 字段不影响旧有调用。</p></blockquote><p><code>message</code> 类型里支持嵌套其他 <code>message</code> 或 <code>enum</code> 定义.</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchResponse</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> url = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> title = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">repeated</span> <span class="built_in">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">repeated</span> Result results = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 parent message 外也可以引用到嵌套的 message 类型.</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SomeOtherMessage</span> </span>&#123;</span><br><span class="line">  SearchResponse.Result result = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>定义远程调用方法作为客户端与服务端的约定，服务端需实现此接口，用户端调用此接口</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Search(SearchRequest) <span class="keyword">returns</span> (SearchResponse)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><p>编辑完 .proto 文件后，便可生成各种语言的代码，供客户端和服务端使用，以 Go 语言为例，生成代码命令如下：</p><p><code></code></p><h1 id="一个简单的-gRPC"><a href="#一个简单的-gRPC" class="headerlink" title="一个简单的 gRPC"></a>一个简单的 gRPC</h1><p>实现客户端向服务端查询用户的信息</p><h2 id="Protocol-Buffer"><a href="#Protocol-Buffer" class="headerlink" title="Protocol Buffer"></a>Protocol Buffer</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://grpc.io/docs/languages/go/quickstart/" target="_blank" rel="noopener">gRPC 官方文档</a></li><li><a href="http://www.topgoer.com/微服务/gRPC.html" target="_blank" rel="noopener">Go-gRPC 使用教程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;gRPC，由 google 开发的一种远程过程调用协议。gRPC 支持多种语言之间的调用，本文主要讲述 gRPC 基于 Go 的实现。&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://gy23333.github.io/categories/Golang/"/>
    
    
    <category term="Golang" scheme="https://gy23333.github.io/tags/Golang/"/>
    
    <category term="gRPC" scheme="https://gy23333.github.io/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://gy23333.github.io/2023/08/01/git/"/>
    <id>https://gy23333.github.io/2023/08/01/git/</id>
    <published>2023-07-31T17:11:30.000Z</published>
    <updated>2024-11-11T03:57:58.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Git 常用命令以及使用场景</p><a id="more"></a><h1 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h1><ol><li><p>初始化新仓</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go init</span><br></pre></td></tr></table></figure><p> 此时里面的所有文件都是“未跟踪”状态</p><p> <img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/%E6%88%AA%E5%B1%8F2023-08-01%2004.24.26.png" alt=""></p></li><li><p>将文件添加到暂存区</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;name&gt;</span><br></pre></td></tr></table></figure><p> <img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/%E6%88%AA%E5%B1%8F2023-08-01%2004.29.39.png" alt=""></p></li><li><p>提交</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;message&quot;</span><br></pre></td></tr></table></figure><p> <img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/%E6%88%AA%E5%B1%8F2023-08-01%2004.34.50.png" alt=""></p></li></ol><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="查看-git-配置"><a href="#查看-git-配置" class="headerlink" title="查看 git 配置"></a>查看 git 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>初始化新仓</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go init</span><br></pre></td></tr></table></figure><p>此时会在目录下新增一个 <code>.git</code> 隐藏目录，用于跟踪管理版本库</p><h2 id="克隆已有项目"><a href="#克隆已有项目" class="headerlink" title="克隆已有项目"></a>克隆已有项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;HTTP or SSH&gt;</span><br></pre></td></tr></table></figure><h2 id="添加修改"><a href="#添加修改" class="headerlink" title="添加修改"></a>添加修改</h2><p>将修改过的文件修改为缓存状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;name&gt;</span><br></pre></td></tr></table></figure><h2 id="取消缓存状态"><a href="#取消缓存状态" class="headerlink" title="取消缓存状态"></a>取消缓存状态</h2><p>通过 <code>add</code> 设置的缓存状态，可以通过 <code>reset</code> 取消</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;name&gt;</span><br></pre></td></tr></table></figure><h1 id="git-clone-速度慢"><a href="#git-clone-速度慢" class="headerlink" title="git clone 速度慢"></a>git clone 速度慢</h1><p>添加 git 的域名映射</p><ol><li><p>查询 ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  ~ nslookup github.global.ssl.fastly.Net</span><br><span class="line">Server:192.168.1.1</span><br><span class="line">Address:192.168.1.1#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:github.global.ssl.fastly.Net</span><br><span class="line">Address: 173.252.88.67</span><br><span class="line"></span><br><span class="line">(base) ➜  ~ nslookup github.com</span><br><span class="line">Server:192.168.1.1</span><br><span class="line">Address:192.168.1.1#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:github.com</span><br><span class="line">Address: 20.205.243.166</span><br></pre></td></tr></table></figure></li><li><p>在 <code>/etc/hosts</code> 添加域名映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20.205.243.166  github.com</span><br><span class="line">173.252.88.67 github.global.ssl.fastly.Net</span><br></pre></td></tr></table></figure></li><li><p>刷新 DNS 缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Git 常用命令以及使用场景&lt;/p&gt;</summary>
    
    
    
    
    <category term="git" scheme="https://gy23333.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python</title>
    <link href="https://gy23333.github.io/2023/05/30/Python/"/>
    <id>https://gy23333.github.io/2023/05/30/Python/</id>
    <published>2023-05-29T16:47:12.000Z</published>
    <updated>2024-11-22T15:57:39.319Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python 学习记录</p><a id="more"></a><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>不使用 <code>{}</code>，而是使用缩进的方式来表示代码块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"False"</span>)</span><br></pre></td></tr></table></figure><h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>过长的语句采用 <code>\</code> 换行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure><p>在 <code>[]</code>, <code>{}</code>, 或 <code>()</code> 中的多行语句，不需要使用反斜杠 <code>\</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="string">'item_one'</span>, <span class="string">'item_two'</span>, <span class="string">'item_three'</span>,</span><br><span class="line">        <span class="string">'item_four'</span>, <span class="string">'item_five'</span>]</span><br></pre></td></tr></table></figure><h2 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h2><p>引入整个模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> somemodule</span><br></pre></td></tr></table></figure><p>引入模块中的部分函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> somemodule <span class="keyword">import</span> somefunction</span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>Python 中的变量赋值不需要类型声明，所以每个变量在使用前都必须赋值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>多个变量赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="string">'abc'</span></span><br></pre></td></tr></table></figure><p>允许连等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>支持 int、float、bool、complex</p><p>可以用 <code>type()</code> 来查询变量所指的对象类型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = <span class="number">1</span>, <span class="number">1.5</span>, <span class="literal">True</span>, <span class="number">4</span>+<span class="number">3j</span></span><br><span class="line">print(type(a), type(b), type(c), type(d))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;bool&#39;&gt; &lt;class &#39;complex&#39;&gt;</span><br></pre></td></tr></table></figure><h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><p>与其他语言不同，python 中 <code>\</code> 和 <code>\\</code> 都是除法，但是 <code>\</code> 得一浮点数，<code>\\</code> 得一整数 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 1 / 2</span></span><br><span class="line">0.5</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 1 // 2</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure><p><code>**</code> 表示乘方，<code>x ** y</code> 即 $x^y$</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 2 ** 5</span></span><br><span class="line">32</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>转换成数字类型直接用 <code>int()</code>、<code>float()</code> 这样的强制类型转换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a, b, c = 1, 1.2, <span class="string">'123'</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">float</span>(a)</span></span><br><span class="line">1.0</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; int(b)</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; int(c)</span></span><br><span class="line">123</span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>可以用 <code>&#39;</code> 或 <code>&quot;</code> 来创建字符串</p><p>Python 不支持单字符类型，单字符也当作字符串处理</p><h3 id="索引与截取"><a href="#索引与截取" class="headerlink" title="索引与截取"></a>索引与截取</h3><p>字符串索引，前面从 0 开始，后面从 -1 开始</p><p><img src="https://gy-pic.oss-cn-hangzhou.aliyuncs.com/%E6%88%AA%E5%B1%8F2023-06-05%2002.04.31.png" alt=""></p><p>字符串截取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str[上标 : 下标]</span><br></pre></td></tr></table></figure><p>范围是 [上标, 下标)，不包括下标</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; str = <span class="string">'python'</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; str[0:3]</span></span><br><span class="line">'pyt'</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; str[2:-1]</span></span><br><span class="line">'tho'</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; str[1:]</span></span><br><span class="line">'ython'</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; str[:-1]</span></span><br><span class="line">'pytho'</span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>列表 List 的数据项不需要是相同的类型，索引方式与 String 相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; list = [1, 2, <span class="string">"Red"</span>]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; list[0]</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; list[-1]</span></span><br><span class="line">'Red'</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; list[1:]</span></span><br><span class="line">[2, 'Red']</span><br></pre></td></tr></table></figure><p>使用 <code>append()</code> 方法来添加列表项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; list.append(<span class="string">"Green"</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; list</span></span><br><span class="line">[1, 2, 'Red', 'Green']</span><br></pre></td></tr></table></figure><p>也可用 <code>+</code> 或 <code>*</code> 来扩展 List</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; [1, 2, 3] + [4, 5, 6]</span></span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; [1] * 3</span></span><br><span class="line">[1, 1, 1]</span><br></pre></td></tr></table></figure><p>使用 <code>del</code> 语句来删除列表的的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; del list[2]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; list</span></span><br><span class="line">[1, 2, 'Green']</span><br></pre></td></tr></table></figure><p>求长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; len([1, 2, 3])</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>判断元素是否在 List 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 1 <span class="keyword">in</span> [1, 2, 3]</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>遍历 List</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>判断两个 List 是否相同，需引入 <code>operator</code> 模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line">list1, list2, list3 = [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(operator.eq(list1, list2)) <span class="comment"># True</span></span><br><span class="line">print(operator.eq(list1, list3)) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><p>元祖 Tuple 与 List 类似，但是 Tuple 不能修改</p><h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="部分运算符"><a href="#部分运算符" class="headerlink" title="部分运算符"></a>部分运算符</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>**</code></td></tr></tbody></table></div><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><h2 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h2><h1 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h1><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python 学习记录&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://gy23333.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>GDB调试工具</title>
    <link href="https://gy23333.github.io/2023/04/17/GDB%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    <id>https://gy23333.github.io/2023/04/17/GDB%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</id>
    <published>2023-04-17T05:20:36.000Z</published>
    <updated>2024-11-11T03:57:58.107Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>GDB调试器的</p><a id="more"></a><p>GDB可以完成以下功能：</p><ul><li>开始并设置参数</li><li>打断点</li><li></li></ul><p>GDB支持多种语言，常见的比如 C、C++、Go</p><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><ul><li><p>安装GDB</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gdb</span><br></pre></td></tr></table></figure><p>  如brew下载缓慢，也可以在官网下载</p></li></ul><ul><li>查看GDB版本</li></ul><h1 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;GDB调试器的&lt;/p&gt;</summary>
    
    
    
    
    <category term="GDB" scheme="https://gy23333.github.io/tags/GDB/"/>
    
  </entry>
  
</feed>
